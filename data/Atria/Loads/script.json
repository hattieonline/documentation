[
    {
        "App":  "Atria-Extract",
        "Section":  "  1st of Month   Occupancy",
        "LoadScriptContent":  [
                                  "$tab **1st of Month** Occupancy",
                                  "factUnitOccupancyByMonth:",
                                  "  LOAD ",
                                  "    *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Occupancy.factUnitOccupancyByMonth",
                                  "where EffectiveDT \u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "store [factUnitOccupancyByMonth] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factUnitOccupancyByMonth.qvd](qvd);",
                                  "",
                                  "Drop Table [factUnitOccupancyByMonth];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "  NICMAP_CBSA_Trends",
        "LoadScriptContent":  [
                                  "$tab //NICMAP_CBSA_Trends",
                                  "/AGH: Commented out on 12.20.2021 because it is not currently in use. We can permanently delete this one we confirm it is definitely not needed (no loads fail, etc.)",
                                  "",
                                  "// LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "// NICMarketShare:",
                                  "// LOAD *;",
                                  "// SQL SELECT *",
                                  "// FROM AtriaDW.Pricing.factCBSAPropertyTrend;",
                                  "",
                                  "// store [NICMarketShare] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMarketShare.qvd](qvd);",
                                  "",
                                  "// Drop Table [NICMarketShare];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "  NICMAP_Portfolios",
        "LoadScriptContent":  [
                                  "$tab //NICMAP_Portfolios",
                                  "/AGH: Commented out on 12.20.2021 because it is not currently in use. We can permanently delete this one we confirm it is definitely not needed (no loads fail, etc.)",
                                  "",
                                  "// MarketShare:",
                                  "// LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "// LOAD *",
                                  "//     Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "// SQL SELECT *",
                                  "// FROM AtriaDW.Pricing.factCompetitorSetInventoryTrend;",
                                  "",
                                  "// store [MarketShare] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMAP_Portfolios.qvd](qvd);",
                                  "",
                                  "// Drop Table [MarketShare];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "  Product Inventory Business Data",
        "LoadScriptContent":  [
                                  "$tab //Product Inventory Business Data",
                                  "// /Needed because the AtriaDW.Pricing.mstrProductInventory table does not have SemiPrivateRate.",
                                  "// LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "// [BusinessDataProductInventory]:",
                                  "// LOAD ProductInventoryID,",
                                  "//     GrossPotentialRent,",
                                  "//     StreetRate,",
                                  "//     SpecialRate,",
                                  "// //     BudgetRate,",
                                  "//     SemiPrivateRate,",
                                  "//     AdditionalOccupantRate,",
                                  "//     DailyRate,",
                                  "//     isModelRoomFlg;",
                                  "// SQL SELECT ProductInventoryID,",
                                  "//     GrossPotentialRent,",
                                  "//     StreetRate,",
                                  "//     SpecialRate,",
                                  "// //     BudgetRate,",
                                  "//     SemiPrivateRate,",
                                  "//     AdditionalOccupantRate,",
                                  "//     DailyRate,",
                                  "//     isModelRoomFlg",
                                  "// FROM BusinessData.ARM.tblProductInventory;",
                                  "",
                                  "// store [BusinessDataProductInventory] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_BusinessDataProductInventory.qvd](qvd);",
                                  "",
                                  "// Drop Table [BusinessDataProductInventory];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "  Rate Increase Care Services",
        "LoadScriptContent":  [
                                  "$tab //Rate Increase Care Services",
                                  "// factRateIncreaseCareServices:",
                                  "// LOAD ",
                                  "// // ResidentRoomID,",
                                  "//     CommunityID,",
                                  "//     CustomerID,",
                                  "// //     BatchID,",
                                  "// //     RateIncreaseID,",
                                  "//     EffectiveDT,",
                                  "//     RateForecast",
                                  "// //     RateOverride,",
                                  "// //     ErrorFlg,",
                                  "// // //     ErrorReason,",
                                  "// //     BypassFlg,",
                                  "// //     OverrideFlg,",
                                  "// //     OverrideBy,",
                                  "// //     Date(Floor(OverrideDT)) as OverrideDT,",
                                  "// //     InheritFlg,",
                                  "// //     CreateBy,",
                                  "// //     Date(Floor(CreateDT)) as CreateDT,",
                                  "// //     ModifyBy,",
                                  "// //     Date(Floor(ModifyDT)) as ModifyDT,",
                                  "// // //     ActiveFlg,",
                                  "// //     ProcessFlg,",
                                  "// //     Date(Floor(ProcessDT)) as ProcessDT,",
                                  "// //     ProcessBy",
                                  "// //     rptPrice,",
                                  "// //     Date(Floor(rptPriceEffectiveDT)) as PriceEffectiveDT,",
                                  "// //     rptRatePrevious,",
                                  "// //     Date(Floor(rptRatePreviousEffectiveDT)) as RatePreviousEffectiveDT,",
                                  "// //     rptRateAffected,",
                                  "// //     rptRateForecast as M_TargetWithBuffer,",
                                  "// //     rptRateForecastPercentage,",
                                  "// //     rptRateOverride,",
                                  "// //     rptRateOverridePercentage,",
                                  "// //     rptRateIncrease,",
                                  "// //     rptRateIncreasePercentage,",
                                  "// //     rptResidentRoomID",
                                  "//     Where EffectiveDT \u003e= Date(Floor(Yearstart(Today(),-1)))",
                                  "//     and Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID);",
                                  "// //     rptEffectiveDT;",
                                  "// SQL SELECT *",
                                  "// FROM BusinessData.RateIncrease.tblResidentOtherBilling",
                                  "// where LedgerEntryID=\u0027126\u0027;",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "// store [factRateIncreaseCareServices] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factRateIncreaseCareServices.qvd](qvd);",
                                  "",
                                  "// Drop Table [factRateIncreaseCareServices];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "  Rate Increase Room",
        "LoadScriptContent":  [
                                  "$tab //Rate Increase Room",
                                  "/ RETIRING 10/14/19 in favor of new factRateIncrease table in AtriaDW.",
                                  "",
                                  "// /Step 1: Load all resident room rate increases for the last 12 months and the next 3 months where ErrorFlg=0",
                                  "// factRateIncreaseRoom:",
                                  "// LOAD DISTINCT",
                                  "// // ResidentRoomID,",
                                  "//     CommunityID,",
                                  "//     CustomerID,",
                                  "// //     BatchID,",
                                  "// //     RateIncreaseID,",
                                  "//     Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "//     RateForecast,",
                                  "//     RateOverride,",
                                  "// //     ErrorFlg,",
                                  "// // //     ErrorReason,",
                                  "//     BypassFlg,",
                                  "//     OverrideFlg,",
                                  "// //     OverrideBy,",
                                  "// //     Date(Floor(OverrideDT)) as OverrideDT,",
                                  "// //     InheritFlg,",
                                  "// //     CreateBy,",
                                  "//     CreateDT,",
                                  "// //     ModifyBy,",
                                  "// //     Date(Floor(ModifyDT)) as ModifyDT,",
                                  "// // //     ActiveFlg,",
                                  "//     ProcessFlg",
                                  "// //     Date(Floor(ProcessDT)) as ProcessDT,",
                                  "// //     ProcessBy",
                                  "// //     rptPrice,",
                                  "// //     Date(Floor(rptPriceEffectiveDT)) as PriceEffectiveDT,",
                                  "// //     rptRatePrevious,",
                                  "// //     Date(Floor(rptRatePreviousEffectiveDT)) as RatePreviousEffectiveDT,",
                                  "// //     rptRateAffected,",
                                  "// //     rptRateForecast as M_TargetWithBuffer,",
                                  "// //     rptRateForecastPercentage,",
                                  "// //     rptRateOverride,",
                                  "// //     rptRateOverridePercentage,",
                                  "// //     rptRateIncrease,",
                                  "// //     rptRateIncreasePercentage,",
                                  "// //     rptResidentRoomID",
                                  "//     Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID);",
                                  "// //     rptEffectiveDT;",
                                  "// SQL SELECT *",
                                  "// FROM BusinessData.RateIncrease.tblResidentRoom",
                                  "// where ErrorFlg=0 and EffectiveDT \u003e= \u0027$(vT12monthstart)\u0027 and EffectiveDT \u003c \u0027$(vnext4monthend)\u0027;",
                                  "",
                                  "// /Step 2: Inner Join so that in cases where there is more than one rate increase entered for a day (duplication), we only look at the one that was created most recently",
                                  "// INNER JOIN (factRateIncreaseRoom)",
                                  "// LOAD DISTINCT CustomerID, Date(Floor(EffectiveDT)) as EffectiveDT, MAX(CreateDT) as CreateDT",
                                  "// Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID)",
                                  "// Group By CustomerID, DATE(FLOOR(EffectiveDT));",
                                  "// SQL SELECT *",
                                  "// FROM BusinessData.RateIncrease.tblResidentRoom",
                                  "// where ErrorFlg=0 and EffectiveDT \u003e= \u0027$(vT12monthstart)\u0027 and EffectiveDT \u003c \u0027$(vnext4monthend)\u0027;",
                                  "",
                                  "",
                                  "// store [factRateIncreaseRoom] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factRateIncreaseRoom.qvd](qvd);",
                                  "",
                                  "// Drop Table [factRateIncreaseRoom];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "1.1 eLead Creation Journal Activity",
        "LoadScriptContent":  [
                                  "$tab 1.1 eLead Creation Journal Activity",
                                  "eLeadCreationJournalActivity:",
                                  "/Step 1: Get all of the activity created by APFM, etc. so we know when the eLead was created (first email notification of eLead)",
                                  "LOAD",
                                  "factInquiryJournalActivityID,",
                                  "    InquiryJournalID,",
                                  "    InquiryJournalID as eLeadCreationJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "//     CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    Time#(EffectiveTM, \u0027hh:mm:ss\u0027) as EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    ReplicaDT",
                                  " Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber)",
                                  " and RankActivity = 1; //ensures we only pull the very first eLead activity",
                                  "SQL SELECT factInquiryJournalActivityID,",
                                  "    factInquiryJournalActivity.InquiryJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    ReplicaDT,",
                                  "\tRANK() OVER (Partition By CommunityNumber, InquiryID Order By factInquiryJournalActivity.InquiryJournalID) as RankActivity",
                                  "FROM AtriaDW.Sales.factInquiryJournalActivity",
                                  "Left Join (Select InquiryJournalID, ELeadFlg from BusinessData.CRM.tblInquiryJournal Where ELeadFlg IS NOT NULL) ELead",
                                  "ON ELead.InquiryJournalID = factInquiryJournalActivity.InquiryJournalID",
                                  "where ",
                                  "\t\tEffectiveDt\u003e=\u0027$(vmindate2)\u0027",
                                  "AND\t\tEffectiveDt is not null",
                                  "AND\t\t(Owner in (\u0027APlaceForMom\u0027, \u0027AtriaSeniorLiving.Com\u0027,\u0027Real Page Chat (ASL.com)\u0027, \u0027Atria Senior Living\u0027, \u0027Caring.com\u0027, \u0027Caring.Com\u0027, \u0027My Senior Care\u0027, \u0027SiteStaff (ASL.com)\u0027, \u0027OurParents\u0027, \u0027Seniorliving.Net\u0027)",
                                  "\t\tOR ELeadFlg = 1)",
                                  "AND\t\tTypeID in (7, 18, 40)",
                                  "order by EffectiveDT,EffectiveTM",
                                  ";",
                                  "",
                                  "store [eLeadCreationJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactELeadCreationJournalActivity.qvd](qvd);"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "1.2 Journal Activity",
        "LoadScriptContent":  [
                                  "$tab 1.2 Journal Activity",
                                  "InquiryJournalActivity:",
                                  "LOAD",
                                  "factInquiryJournalActivityID,",
                                  "    InquiryJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    Time#(EffectiveTM, \u0027hh:mm:ss\u0027) as EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    JournalStatusChangeReasonID,",
                                  "    JournalStatusChangeReason,",
                                  "    ReplicaDT",
                                  " Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber) ",
                                  "\tand Not(Exists(eLeadCreationJournalID, InquiryJournalID));",
                                  "",
                                  "SQL SELECT factInquiryJournalActivityID,",
                                  "    factInquiryJournalActivity.InquiryJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    JournalStatusChangeReasonID,",
                                  "    JournalStatusChangeReason,",
                                  "    ReplicaDT",
                                  "FROM AtriaDW.Sales.factInquiryJournalActivity",
                                  "Left Join (Select InquiryJournalID, ELeadFlg from BusinessData.CRM.tblInquiryJournal Where ELeadFlg IS NOT NULL) ELead",
                                  "ON ELead.InquiryJournalID = factInquiryJournalActivity.InquiryJournalID",
                                  "where ",
                                  "\t\tEffectiveDt\u003e=\u0027$(vmindate2)\u0027",
                                  "AND \tEffectiveDt is not null",
                                  "AND \tType is not null",
                                  "// AND \tNOT((Owner in (\u0027APlaceForMom\u0027, \u0027AtriaSeniorLiving.Com\u0027,\u0027Real Page Chat (ASL.com)\u0027, \u0027Atria Senior Living\u0027, \u0027Caring.com\u0027, \u0027Caring.Com\u0027, \u0027My Senior Care\u0027, \u0027SiteStaff (ASL.com)\u0027, \u0027OurParents\u0027, \u0027Seniorliving.Net\u0027)",
                                  "// \t\tOR ELeadFlg = 1)",
                                  "// \t\tAND\tTypeID in (7, 40))",
                                  "order by EffectiveDT,EffectiveTM;",
                                  "",
                                  "/want to only pull in data with a date. Also, do not want to include the eLead creation journal activity (email) by APFM, etc. ",
                                  "/\t\tto accurately determine the first contact point with the community.",
                                  "",
                                  "/Left Joining to get flags that will be used throughout apps ",
                                  "Left Join (InquiryJournalActivity)",
                                  "LOAD",
                                  "    JournalTypeID as TypeID,",
                                  "    JournalQlikCategory,",
                                  "    PlannedTourFlg,",
                                  "    TelephoneCallFlg,",
                                  "    ScheduledTourFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Sales/Journal Categories.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "",
                                  "store [InquiryJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd](qvd);",
                                  "",
                                  "Drop Table [InquiryJournalActivity];",
                                  "Drop Table [eLeadCreationJournalActivity];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "ALZ 1",
        "LoadScriptContent":  [
                                  "$tab ALZ 1",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/For pricing compliance, some communities need ALZ1 care level added to their revenue. ",
                                  "/Step 1.1: Find HISTORICAL communities with active Care Levels of \"Life Guidance\" or \"ALZ 1\" where ChargeAmount \u003e0 and not the list of communities excluded below.",
                                  "TempCommunityDate:",
                                  "LOAD distinct",
                                  "// CommunityToCareID,",
                                  "//     CareID,",
                                  "    CommunityID;",
                                  "//     ChargeAmount,",
                                  "//     Date(Floor(EffectiveDT)) as FromDate,",
                                  "//     CreateDT,",
                                  "//     RoomFee,",
                                  "//     CreateBy,",
                                  "//     GLAccount,",
                                  "//     DailyRate,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     GrossPotentialRate,",
                                  "//     BudgetRate;",
                                  "//     ActiveFlg,",
                                  "//     TransactionID,",
                                  "//     TypeID,",
                                  "//     AssessmentScoreMinimum,",
                                  "//     AssessmentScoreMaximum,",
                                  "//     BuildingID,",
                                  "//     AssessmentTimeMaximum,",
                                  "//     AssessmentTimeMinimum,",
                                  "//     InterpretiveDescription;",
                                  "SQL SELECT *",
                                  "FROM BusinessData.ARM.trnCommunityToCare",
                                  "Where CareID in (\u002715\u0027,\u002738\u0027) //and BudgetRate\u003e0 ",
                                  "and ChargeAmount\u003e0",
                                  "and (CommunityID not in (\u0027435\u0027,\u0027308\u0027,\u0027244\u0027) or (CommunityID=487 and EffectiveDT \u003e=\u00272019-10-01\u0027)); //Rancho Mirage only needs for 11/1/19 and on, so need to pull effective care rate immediately before then",
                                  "",
                                  "",
                                  "/Step 1.2:Join every date in dimDate to this list",
                                  "Join(TempCommunityDate)",
                                  "LOAD",
                                  "//     EffectiveDT,",
                                  "    %DateKey",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_dimDate.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "/We will need to create a record for every day that the ALZ1 rate was in effect so we can join the ALZ1 rate to move in date in factRevenuebyMoveIn QVD.",
                                  "/Step 2: Creating a \"Key\" for the rate by community and a \"Key\" with every date. Will later eliminate any that are not within the start/end date for that rate.",
                                  "FactLinkCreation:",
                                  "Load %BudgetKey \u0026 \u0027*\u0027 \u0026 %DateKey as %FactLink, *;",
                                  "Load CommunityID  as %BudgetKey, *",
                                  "Resident TempCommunityDate;",
                                  "Drop Table TempCommunityDate;",
                                  "",
                                  "",
                                  "/Step 3.1: Get the historical From Dates for each BudgetKey in the trn table",
                                  "TempChargeAmount:",
                                  "LOAD CommunityID as %BudgetKey,",
                                  "// CommunityToCareID,",
                                  "//     CareID,",
                                  "//     CommunityID,",
                                  "    ChargeAmount,",
                                  "    Date(Floor(EffectiveDT)) as FromDate,",
                                  "//     CreateDT,",
                                  "//     RoomFee,",
                                  "//     CreateBy,",
                                  "//     GLAccount,",
                                  "//     DailyRate,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     GrossPotentialRate,",
                                  "//     BudgetRate,",
                                  "    Ranking",
                                  "Where Ranking=1;",
                                  "//     ActiveFlg,",
                                  "//     TransactionID,",
                                  "//     TypeID,",
                                  "//     AssessmentScoreMinimum,",
                                  "//     AssessmentScoreMaximum,",
                                  "//     BuildingID,",
                                  "//     AssessmentTimeMaximum,",
                                  "//     AssessmentTimeMinimum,",
                                  "//     InterpretiveDescription;",
                                  "SQL SELECT distinct CommunityID, EffectiveDT, ChargeAmount, CreateDT,",
                                  "    Rank() OVER",
                                  "\t\t\t\t(PARTITION BY CommunityID, Cast(EffectiveDT as date) order by CommunityID, CreateDT desc) as Ranking",
                                  "FROM BusinessData.ARM.trnCommunityToCare",
                                  "Where CareID in (\u002715\u0027,\u002738\u0027)",
                                  "and (CommunityID not in (\u0027435\u0027,\u0027308\u0027,\u0027244\u0027) or (CommunityID=487 and EffectiveDT \u003e=\u00272019-10-01\u0027));//Rancho Mirage only needs for 11/1/19 and on, so need to pull effective care rate immediately before then",
                                  "",
                                  "",
                                  "/Step 3.2: Get the \"To Dates\" as the Previous From Date - 1",
                                  "ChargeAmount:",
                                  "Load [%BudgetKey] \u0026 \u0027*\u0027 \u0026 FromDate \u0026 \u0027*\u0027 \u0026 ToDate as %BudgetLink, *;",
                                  "Load [%BudgetKey], ChargeAmount, FromDate, ",
                                  "IF(Previous([%BudgetKey])=[%BudgetKey], Previous(Date(FromDate-1)), Date(Today())) as ToDate",
                                  "Resident TempChargeAmount",
                                  "Order By [%BudgetKey], FromDate desc;",
                                  "drop table TempChargeAmount;",
                                  "",
                                  "/Step 3.3: Only keep the relevant dates for each BudgetKey based on To and From",
                                  "LinkTable:",
                                  "IntervalMatch(%DateKey, [%BudgetKey])",
                                  "Load FromDate,",
                                  "ToDate,",
                                  "[%BudgetKey]",
                                  "Resident ChargeAmount;",
                                  "",
                                  "/Step 3.4: Get the BudgetLink (BudgetKey + From + To) then get the FactLink (BudgetKey + Date)",
                                  "Left Join (LinkTable)",
                                  "Load [%BudgetKey], FromDate, ToDate, [%BudgetLink]",
                                  "Resident ChargeAmount;",
                                  "Left Join (LinkTable)",
                                  "Load [%BudgetKey], [%DateKey], %FactLink\t",
                                  "Resident FactLinkCreation;",
                                  "",
                                  "/Step 3.5: Drop so we don\u0027t have synthetic keys",
                                  "Drop Field [%DateKey] from FactLinkCreation;",
                                  "Drop Field [%BudgetKey], FromDate, ToDate From LinkTable;",
                                  "Drop Field [%BudgetKey] from FactLinkCreation, ChargeAmount;",
                                  "",
                                  "/Step 3.6: Create the full table with all relevant information for every day that the date was effective",
                                  "Join (LinkTable)",
                                  "Load * Resident ChargeAmount;",
                                  "Drop Table ChargeAmount;",
                                  "Join (LinkTable)",
                                  "Load * Resident FactLinkCreation;",
                                  "Drop Table FactLinkCreation;",
                                  "Left Join (LinkTable)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "store [LinkTable] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_TEMPALZ1.qvd](qvd);",
                                  "drop table LinkTable;",
                                  "",
                                  "Step 4: Some minor clean up to the table. ",
                                  "ALZ1:",
                                  "LOAD",
                                  "//     %FactLink,",
                                  "//     %BudgetLink,",
                                  "    %DateKey,",
                                  "    ChargeAmount,",
                                  "    FromDate,",
                                  "    ToDate,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_TEMPALZ1.qvd]",
                                  "(qvd)",
                                  "where NOT(ISNULL(ChargeAmount)) and Not(ISNULL(CommunityNumber))",
                                  "\tand Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber)",
                                  "    and ((CommunityNumber=10381 and %DateKey \u003e= \u002711/1/19\u0027) or CommunityNumber\u003c\u003e10381); //Rancho Mirage only needs for 11/1/19 and on",
                                  "",
                                  "store [ALZ1] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ALZ1.qvd](qvd);",
                                  "drop table ALZ1;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Auto Apply Move Ins",
        "LoadScriptContent":  [
                                  "$tab Auto Apply Move Ins",
                                  "AutoApply:",
                                  "LOAD CustomerID,",
                                  "    LeaseXml,",
                                  "    CreateDT,",
                                  "    IsAutoApplyFlg",
                                  "Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT CustomerID,",
                                  "\tCommunityID,",
                                  "    LeaseXml.value(\u0027(Lease/LeaseStartDT)[1][not(@xsi:nil = true)]\u0027, \u0027VARCHAR(10)\u0027) as \u0027LeaseXml\u0027,",
                                  "    CreateDT,",
                                  "    IsAutoApplyFlg",
                                  "FROM BusinessData.ResidentManagement.wrkResidentMoveIn",
                                  " ",
                                  "WHERE ",
                                  "//CustomerID = \u00271486922\u0027 ",
                                  "//AND ",
                                  "PrimaryResidentFlg = 1",
                                  "AND ProcessFlg = 0",
                                  "AND IsAutoApplyFlg = 1",
                                  " ;",
                                  " ",
                                  "Left Join (AutoApply)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  " ",
                                  "store [AutoApply] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_AutoApply.qvd](qvd);",
                                  "",
                                  "Drop Table [AutoApply];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "B2B Activity",
        "LoadScriptContent":  [
                                  "$tab B2B Activity",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "[factContactJournalActivity]:",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber)",
                                  "and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "",
                                  "SELECT ",
                                  "*",
                                  "FROM AtriaDW.Sales.factContactJournalActivity",
                                  "where effectivedt\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "/Left Joining to get journal categories for use in Qlik",
                                  "Left Join (factContactJournalActivity)",
                                  "LOAD",
                                  "    JournalTypeID as TypeID,",
                                  "    JournalQlikCategory",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Sales/Journal Categories.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "store [factContactJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factContactJournalActivity.qvd](qvd);",
                                  "",
                                  "Drop Table [factContactJournalActivity];",
                                  "",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Business Data tblReservation",
        "LoadScriptContent":  [
                                  "$tab Business Data tblReservation",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "tblReservationBusinessData:",
                                  "LOAD ReservationID,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    CommunityID,",
                                  "    BedID,",
                                  "    ProductInventoryID,",
                                  "    BedNumber,",
                                  "    BillingID,",
                                  "    DesiredDT,",
                                  "    DepositAmount,",
                                  "    PayorID,",
                                  "    MethodOfPaymentID,",
                                  "    RoomRate,",
                                  "    RateLockFlg,",
                                  "    RateLockEndDT,",
                                  "    EffectiveDT,",
                                  "    Note,",
                                  "    ReservationXML,",
                                  "    CloseFlg,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    ActiveFlg,",
                                  "    inquiryHistoryID,",
                                  "    StreetRate,",
                                  "    ReasonID,",
                                  "    HasRVPApprovalFlg,",
                                  "    ReservationCreateRank,",
                                  "    ReservationProductCreateRank,",
                                  "    RoomRateDeviationReason",
                                  "    Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT ReservationID,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    CommunityID,",
                                  "    BedID,",
                                  "    ProductInventoryID,",
                                  "    BedNumber,",
                                  "    BillingID,",
                                  "    DesiredDT,",
                                  "    DepositAmount,",
                                  "    PayorID,",
                                  "    MethodOfPaymentID,",
                                  "    RoomRate,",
                                  "    RateLockFlg,",
                                  "    RateLockEndDT,",
                                  "    EffectiveDT,",
                                  "    Note,",
                                  "    ReservationXML,",
                                  "    CloseFlg,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    ActiveFlg,",
                                  "    inquiryHistoryID,",
                                  "    StreetRate,",
                                  "    ReasonID,",
                                  "    HasRVPApprovalFlg,",
                                  "    RoomRateDeviationReason,",
                                  "    RANK() OVER (PARTITION BY      CommunityID, InquiryID, CustomerID",
                                  "                                        ORDER BY    CommunityID,",
                                  "                                        \t\t\tInquiryID,",
                                  "                                        \t\t\tCustomerID,",
                                  "                                                    CreateDT DESC,",
                                  "                                                    ReservationID DESC) AS [ReservationCreateRank],",
                                  "\tRANK() OVER (PARTITION BY\t\tCommunityID, InquiryID, CustomerID, ProductInventoryID",
                                  "    \t\t\t\t\t\t\t\t\tORDER BY\tCommunityID,",
                                  "                                        \t\t\tInquiryID,",
                                  "                                                    CustomerID,",
                                  "                                                    ProductInventoryID,",
                                  "                                                    CreateDT DESC,",
                                  "                                                    ReservationID DESC) AS ReservationProductCreateRank",
                                  "FROM BusinessData.CRM.tblReservation",
                                  "where ActiveFlg=1 and EffectiveDT\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "/Joining to get Community Number because we join on that in most of our transformation tables.",
                                  "Left Join (tblReservationBusinessData)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Joining to get the Reason",
                                  "Left Join (tblReservationBusinessData)",
                                  "LOAD ReasonID,",
                                  "    Reason;",
                                  "SQL SELECT ReasonID,",
                                  "    Reason",
                                  "FROM BusinessData.CRM.luReservationCloseReason;",
                                  "",
                                  "",
                                  "",
                                  "store [tblReservationBusinessData] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd](qvd);",
                                  "drop table tblReservationBusinessData;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Care Concierge",
        "LoadScriptContent":  [
                                  "$tab Care Concierge",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "ConciergeCare:",
                                  "",
                                  "LOAD",
                                  "\t\u0027Schedules\u0027 AS FactType,",
                                  "    CustomerID,",
                                  "    CommunityID,",
                                  "    CommunityName,",
                                  "    CommunityNumber,",
                                  "    BillingID,",
                                  "    LastName \u0026 \u0027, \u0027 \u0026 FirstName AS Resident,",
                                  "    ResidentStatus,",
                                  "    CareType,",
                                  "    DepartureDT,",
                                  "    ExpectedReturnDT,",
                                  "    ActualReturnDT,",
                                  "    AssessmentDT,",
                                  "    Title AS ModelTitle,",
                                  "    Description,",
                                  "    Title AS TaskTitle,",
                                  "    Comment,",
                                  "    ADLTime,",
                                  "    DailyFrequency,",
                                  "    ResourceRole,",
                                  " \tSchedule,",
                                  "    Time,",
                                  "    MapDay,",
                                  "    MapTime,",
                                  "    MID(MapDay,1,1) as MapDaySunday,",
                                  "    MID(MapDay,2,1) as MapDayMonday,",
                                  "    MID(MapDay,3,1) as MapDayTuesday,",
                                  "    MID(MapDay,4,1) as MapDayWednesday,",
                                  "    MID(MapDay,5,1) as MapDayThursday,",
                                  "    MID(MapDay,6,1) as MapDayFriday,",
                                  "    MID(MapDay,7,1) as MapDaySaturday,",
                                  "    Employees",
                                  ";",
                                  "    ",
                                  "SQL SELECT ",
                                  "\tBusinessData.ARM.tblCustomer.CustomerID,",
                                  "    BusinessData.ARM.tblCustomer.CommunityID,",
                                  "    BusinessData.ARM.tblCommunity.CommunityName,",
                                  "    BusinessData.ARM.tblCommunity.CommunityNumber,",
                                  "    BusinessData.ARM.tblCustomer.BillingID,",
                                  "    BusinessData.ARM.tblCustomer.FirstName,",
                                  "    BusinessData.ARM.tblCustomer.LastName,",
                                  "    BusinessData.ARM.luResidentStatus.ResidentStatus,",
                                  "    BusinessData.ARM.luCareType.CareType,",
                                  "    BusinessData.ARM.tblShortTermLeave.DepartureDT,",
                                  "    BusinessData.ARM.tblShortTermLeave.ExpectedReturnDT,",
                                  "    BusinessData.ARM.tblShortTermLeave.ActualReturnDT,",
                                  "    BusinessData.ACM.tblResidentAssessment.AssessmentDT,",
                                  "    BusinessData.CareManagement.luModel.Title,",
                                  "    BusinessData.ACM.luServiceCode.Description,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.Title,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.Comment,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.ADLTime,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.DailyFrequency,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.ResourceRole,",
                                  " \tBusinessData.ACM.FN_MapDayList(BusinessData.ACM.tblResidentScheduleADL.MapDay) AS Schedule,",
                                  "    BusinessData.ACM.FN_MapTimeList(BusinessData.ACM.tblResidentScheduleADL.MapTime) AS Time,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.MapDay,",
                                  "    BusinessData.ACM.tblResidentScheduleADL.MapTime,",
                                  "    CASE WHEN ISNULL(Main.TaskDocumentation, \u0027\u0027) \u003c\u003e \u0027\u0027 THEN LEFT(Main.TaskDocumentation, len(Main.TaskDocumentation) - 1) ELSE \u0027\u0027 END AS Employees",
                                  "FROM BusinessData.ARM.tblCustomer",
                                  "INNER JOIN BusinessData.ARM.tblCommunity",
                                  "\t\tON BusinessData.ARM.tblCommunity.CommunityID = BusinessData.ARM.tblCustomer.CommunityID",
                                  "INNER JOIN BusinessData.ARM.luResidentStatus",
                                  "\t\tON BusinessData.ARM.luResidentStatus.ResidentStatusID = BusinessData.ARM.tblCustomer.StatusID",
                                  "INNER JOIN BusinessData.ACM.tblResidentScheduleADL",
                                  "\t\tON BusinessData.ACM.tblResidentScheduleADL.CustomerID = BusinessData.ARM.tblCustomer.CustomerID",
                                  "INNER JOIN BusinessData.ACM.tblResidentAssessment",
                                  "\t\tON BusinessData.ACM.tblResidentAssessment.ResidentAssessmentID = BusinessData.ACM.tblResidentScheduleADL.ResidentAssessmentID",
                                  "INNER JOIN BusinessData.ACM.tblCareHistory",
                                  "\t\tON BusinessData.ACM.tblCareHistory.ResidentAssessmentID = BusinessData.ACM.tblResidentAssessment.ResidentAssessmentID",
                                  "INNER JOIN BusinessData.ARM.luCare",
                                  "\t\tON BusinessData.ARM.luCare.CareID = BusinessData.ACM.tblCareHistory.CareID",
                                  "INNER JOIN BusinessData.ARM.luCareType",
                                  "\t\tON BusinessData.ARM.luCareType.CareTypeID = BusinessData.ARM.luCare.CareTypeID",
                                  "INNER JOIN BusinessData.CareManagement.luModel",
                                  "\t\tON BusinessData.CareManagement.luModel.ModelID = BusinessData.ACM.tblResidentScheduleADL.ModelID",
                                  "INNER JOIN BusinessData.CareManagement.luModelSection",
                                  "\t\tON BusinessData.CareManagement.luModelSection.ModelSectionID = BusinessData.ACM.tblResidentScheduleADL.ModelSectionID",
                                  "INNER JOIN BusinessData.ACM.luResourceRole",
                                  "\t\tON BusinessData.ACM.luResourceRole.ResourceRoleID = BusinessData.ACM.tblResidentScheduleADL.ResourceRoleID",
                                  "INNER JOIN BusinessData.ACM.luUnitTimeValue",
                                  "\t\tON BusinessData.ACM.luUnitTimeValue.UnitTimeValueID = BusinessData.ACM.tblResidentScheduleADL.UnitTimeValueID",
                                  "INNER JOIN BusinessData.ACM.luServiceCode",
                                  "\t\tON BusinessData.ACM.luServiceCode.ServiceCodeID = BusinessData.ACM.tblResidentScheduleADL.ServiceCodeID",
                                  "LEFT JOIN  BusinessData.ARM.tblShortTermLeave",
                                  "\t\tON BusinessData.ARM.tblShortTermLeave.CustomerID = BusinessData.ARM.tblCustomer.CustomerID AND BusinessData.ARM.tblShortTermLeave.ActiveFlg = 1",
                                  "AND\t       GETDATE() BETWEEN BusinessData.ARM.tblShortTermLeave.DepartureDT AND ISNULL(BusinessData.ARM.tblShortTermLeave.ActualReturnDT, ExpectedReturnDT)",
                                  "LEFT JOIN ",
                                  " (",
                                  "        SELECT ST2.CustomerID,",
                                  "            (",
                                  "                SELECT DISTINCT(ST1.EmplUserName) + \u0027, \u0027 AS [text()]",
                                  "                FROM  BusinessData.ACM.trnResidentADL ST1",
                                  "                WHERE ST1.CustomerID = ST2.CustomerID",
                                  "                AND ST1.CommunityResourceRoleID IN (Select CommunityResourceRoleID FROM BusinessData.ACM.tblCommunityResourceRole WHERE BusinessData.ACM.tblCommunityResourceRole.ResourceRoleID = \u002718\u0027)",
                                  "                FOR XML PATH (\u0027\u0027)",
                                  "            ) TaskDocumentation",
                                  "        FROM BusinessData.ARM.tblCustomer ST2",
                                  "    ) Main",
                                  "\tON Main.CustomerID = BusinessData.ARM.tblCustomer.CustomerID",
                                  "WHERE",
                                  "\tBusinessData.ARM.tblCustomer.StatusID IN (6, 7, 8, 10)",
                                  "// AND\tBusinessData.ARM.tblCommunity.CommunityName = \u0027Park of Great Neck\u0027",
                                  "AND\tBusinessData.ACM.tblResidentScheduleADL.ResourceRole = \u0027PDA\u0027",
                                  "AND\tBusinessData.ACM.tblResidentScheduleADL.ServiceCodeID = 58",
                                  "AND\tBusinessData.ACM.tblResidentScheduleADL.ADLTime \u003e 0",
                                  ";",
                                  "",
                                  "Store ConciergeCare into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ConciergeCareSchedules.qvd](qvd) ;",
                                  "Drop Table ConciergeCare;",
                                  "",
                                  "RoomGroups:",
                                  "",
                                  "LOAD * ;",
                                  "",
                                  "",
                                  "SQL",
                                  "",
                                  "SELECT DISTINCT Room.CustomerID",
                                  ",tblRoomGroup.Title AS Title",
                                  ",tblRoomGroup.Description AS RoomGroupDescription",
                                  ",tblProductInventory.ProductNumber AS ProductNumber",
                                  ",tblCommunityResourceRole.ResourceRole AS CommRole",
                                  ",luResourceRole.ResourceRoleID",
                                  "FROM",
                                  "BusinessData.ACM.tblRoomGroup tblRoomGroup",
                                  "INNER JOIN BusinessData.ARM.tblCommunity  tblCommunity",
                                  "        ON tblCommunity.CommunityID = tblRoomGroup.CommunityID",
                                  "INNER JOIN BusinessData.ACM.lnkRoomGroupToProductInventory lnkRoomGroupToProductInventory",
                                  "        ON lnkRoomGroupToProductInventory.RoomGroupID = tblRoomGroup.RoomGroupID",
                                  "INNER JOIN BusinessData.ARM.tblProductInventory tblProductInventory",
                                  "        ON tblProductInventory.ProductInventoryID = lnkRoomGroupToProductInventory.ProductInventoryID",
                                  "INNER JOIN BusinessData.ACM.tblCommunityResourceRole tblCommunityResourceRole",
                                  "        ON tblCommunityResourceRole.RoomGroupID = tblRoomGroup.RoomGroupID AND tblCommunityResourceRole.ActiveFlg = 1",
                                  "INNER JOIN BusinessData.ACM.luResourceRole luResourceRole",
                                  "        ON luResourceRole.ResourceRoleID = tblCommunityResourceRole.ResourceRoleID",
                                  "INNER JOIN",
                                  "        (",
                                  "            SELECT   tblResidentRoom.ResidentRoomID",
                                  "                    ,tblResidentRoom.CustomerID",
                                  "                    ,tblResidentRoom.CommunityID",
                                  "                    ,tblResidentRoom.RoomNumber",
                                  "                    ,tblResidentRoom.EffectiveDt",
                                  "                    ,RANK() OVER (PARTITION BY      CustomerID",
                                  "                                        ORDER BY    CustomerID,",
                                  "                                                    EffectiveDT DESC,",
                                  "                                                    ResidentRoomID DESC) AS [RANK]",
                                  "            FROM",
                                  "            BusinessData.ARM.tblResidentRoom tblResidentRoom",
                                  "        ) Room",
                                  "        ON     Room.CommunityID = tblProductInventory.CommunityID",
                                  "        AND Room.RoomNumber = tblProductInventory.ProductNumber",
                                  "        AND Room.RANK = 1",
                                  "WHERE    CommunityName = \u0027Park of Great Neck\u0027;",
                                  "",
                                  "Store RoomGroups into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RoomGroups.qvd](qvd) ;",
                                  "Drop Table RoomGroups;",
                                  "",
                                  "",
                                  "ConciergeCareTasks:",
                                  "",
                                  "LOAD \u0027Tasks\u0027 AS FactType,",
                                  "\tCommunityID,",
                                  "    CommunityName,",
                                  "    BillingID,",
                                  "    CustomerID,",
                                  "    LastName \u0026 \u0027, \u0027 \u0026 FirstName AS Resident,",
                                  "    ADLDT as ADLDT_Time,",
                                  "    Date(Floor(ADLDT)) as %DateKey,",
                                  "    Room,",
                                  "    Title,",
                                  "    Description,",
                                  "    CommunityResourceRoleID,",
                                  "    UserName,",
                                  "    EmplID,",
                                  "    CompleteFlg,",
                                  "    ADLTime,",
                                  "    ADLTimeComplete,",
                                  "    ADLStatusID,",
                                  "    ServiceCodeID,",
                                  "    EmplUserName,",
                                  "    ResidentADLID,",
                                  "    DeviceID,",
                                  "    ResidentADLProcessReasonID,",
                                  "    ADLStatus,",
                                  "    ADLType",
                                  "   ",
                                  "    ",
                                  ";",
                                  "",
                                  "SQL SELECT ",
                                  "\tBusinessData.ACM.trnResidentADL.CommunityID,",
                                  "    BusinessData.ARM.tblCommunity.CommunityName,",
                                  "    BusinessData.ARM.tblCustomer.BillingID,",
                                  "    BusinessData.ARM.tblCustomer.CustomerID,",
                                  "    BusinessData.ARM.tblCustomer.LastName,",
                                  "    BusinessData.ARM.tblCustomer.FirstName,",
                                  "    BusinessData.ACM.trnResidentADL.ADLDT,",
                                  "    BusinessData.ACM.trnResidentADL.Room,",
                                  "    BusinessData.ACM.trnResidentADL.Title,",
                                  "    BusinessData.ACM.trnResidentADL.Description,",
                                  "    BusinessData.ACM.trnResidentADL.CommunityResourceRoleID,",
                                  "    BusinessData.ACM.trnResidentADL.UserName,",
                                  "    EmplID,",
                                  "    CompleteFlg,",
                                  "    ADLTime,",
                                  "    ADLTimeComplete,",
                                  "    BusinessData.ACM.trnResidentADL.ADLStatusID,",
                                  "    BusinessData.ACM.luServiceCode.ServiceCodeID,",
                                  "    EmplUserName,",
                                  "    ResidentADLID,",
                                  "    DeviceID,",
                                  "    ResidentADLProcessReasonID,",
                                  "    BusinessData.ACM.luADLStatus.ADLStatus,",
                                  "    BusinessData.ACM.luServiceCode.Description,",
                                  "    BusinessData.ACM.luADLType.ADLType",
                                  "    ",
                                  "FROM BusinessData.ACM.trnResidentADL",
                                  "INNER JOIN BusinessData.ACM.luADLStatus",
                                  "\t\tON BusinessData.ACM.trnResidentADL.ADLStatusID = BusinessData.ACM.luADLStatus.ADLStatusID",
                                  "INNER JOIN BusinessData.ARM.tblCustomer",
                                  "\t\tON BusinessData.ARM.tblCustomer.CustomerID = BusinessData.ACM.trnResidentADL.CustomerID",
                                  "INNER JOIN BusinessData.ARM.tblCommunity",
                                  "\t\tON BusinessData.ARM.tblCommunity.CommunityID = BusinessData.ACM.trnResidentADL.CommunityID",
                                  "INNER JOIN BusinessData.ARM.luResidentStatus",
                                  "\t\tON BusinessData.ARM.luResidentStatus.ResidentStatusID = BusinessData.ARM.tblCustomer.StatusID",
                                  "INNER JOIN BusinessData.ACM.luServiceCode",
                                  "\t\tON BusinessData.ACM.luServiceCode.ServiceCodeID = BusinessData.ACM.trnResidentADL.ServiceCodeID",
                                  "INNER JOIN BusinessData.ACM.luADLType",
                                  "\t\tON BusinessData.ACM.luADLType.ADLTypeID = BusinessData.ACM.trnResidentADL.ADLTypeID",
                                  "WHERE \tBusinessData.ACM.trnResidentADL.CommunityID = \u002762\u0027 AND ",
                                  "\t\tBusinessData.ACM.trnResidentADL.ADLDT \u003e=\u0027$(vDate)\u0027 AND",
                                  "        BusinessData.ACM.trnResidentADL.ActiveFlg = 1\t   AND",
                                  "        BusinessData.ACM.trnResidentADL.ADLDT \u003c= GETDATE() AND",
                                  "        (BusinessData.ACM.trnResidentADL.CommunityResourceRoleID IN (Select CommunityResourceRoleID FROM BusinessData.ACM.tblCommunityResourceRole WHERE BusinessData.ACM.tblCommunityResourceRole.ResourceRoleID = \u002718\u0027)",
                                  "\t\t OR BusinessData.ACM.trnResidentADL.ServiceCodeID = 58)",
                                  "UNION",
                                  "SELECT ",
                                  "\tBusinessData.ACM.tblResidentADL.CommunityID,",
                                  "    BusinessData.ARM.tblCommunity.CommunityName,",
                                  "    BusinessData.ARM.tblCustomer.BillingID,",
                                  "    BusinessData.ARM.tblCustomer.CustomerID,",
                                  "    BusinessData.ARM.tblCustomer.LastName,",
                                  "    BusinessData.ARM.tblCustomer.FirstName,",
                                  "    BusinessData.ACM.tblResidentADL.ADLDT,",
                                  "    BusinessData.ACM.tblResidentADL.Room,",
                                  "    BusinessData.ACM.tblResidentADL.Title,",
                                  "    BusinessData.ACM.tblResidentADL.Description,",
                                  "    BusinessData.ACM.tblResidentADL.CommunityResourceRoleID,",
                                  "    \u0027\u0027 AS UserName,",
                                  "    EmplID,",
                                  "    CompleteFlg,",
                                  "    ADLTime,",
                                  "    ADLTimeComplete,",
                                  "    BusinessData.ACM.tblResidentADL.ADLStatusID,",
                                  "    BusinessData.ACM.luServiceCode.ServiceCodeID,",
                                  "    EmplUserName,",
                                  "    ResidentADLID,",
                                  "    DeviceID,",
                                  "    ResidentADLProcessReasonID,",
                                  "    BusinessData.ACM.luADLStatus.ADLStatus,",
                                  "    BusinessData.ACM.luServiceCode.Description,",
                                  "    BusinessData.ACM.luADLType.ADLType",
                                  "    ",
                                  "FROM BusinessData.ACM.tblResidentADL",
                                  "INNER JOIN BusinessData.ACM.luADLStatus",
                                  "\t\tON BusinessData.ACM.tblResidentADL.ADLStatusID = BusinessData.ACM.luADLStatus.ADLStatusID",
                                  "INNER JOIN BusinessData.ARM.tblCustomer",
                                  "\t\tON BusinessData.ARM.tblCustomer.CustomerID = BusinessData.ACM.tblResidentADL.CustomerID",
                                  "INNER JOIN BusinessData.ARM.tblCommunity",
                                  "\t\tON BusinessData.ARM.tblCommunity.CommunityID = BusinessData.ACM.tblResidentADL.CommunityID",
                                  "INNER JOIN BusinessData.ARM.luResidentStatus",
                                  "\t\tON BusinessData.ARM.luResidentStatus.ResidentStatusID = BusinessData.ARM.tblCustomer.StatusID",
                                  "INNER JOIN BusinessData.ACM.luServiceCode",
                                  "\t\tON BusinessData.ACM.luServiceCode.ServiceCodeID = BusinessData.ACM.tblResidentADL.ServiceCodeID",
                                  "INNER JOIN BusinessData.ACM.luADLType",
                                  "\t\tON BusinessData.ACM.luADLType.ADLTypeID = BusinessData.ACM.tblResidentADL.ADLTypeID",
                                  "WHERE \tBusinessData.ACM.tblResidentADL.CommunityID = \u002762\u0027 AND ",
                                  "\t\tBusinessData.ACM.tblResidentADL.ADLDT \u003e=\u0027$(vDate)\u0027 AND",
                                  "        BusinessData.ACM.tblResidentADL.ActiveFlg = 1\t   AND",
                                  "        BusinessData.ACM.tblResidentADL.ADLDT \u003c= GETDATE() AND",
                                  "        (BusinessData.ACM.tblResidentADL.CommunityResourceRoleID IN (Select CommunityResourceRoleID FROM BusinessData.ACM.tblCommunityResourceRole WHERE BusinessData.ACM.tblCommunityResourceRole.ResourceRoleID = \u002718\u0027)",
                                  "\t\tOR BusinessData.ACM.tblResidentADL.ServiceCodeID = 58)",
                                  ";",
                                  "",
                                  "Store ConciergeCareTasks into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ConciergeCareTasks.qvd](qvd) ;",
                                  "Drop Table ConciergeCareTasks;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Communities",
        "LoadScriptContent":  [
                                  "$tab Communities",
                                  "/Extraction layer of Community Table used for most apps",
                                  "[mstrCommunity]:",
                                  "    LOAD CommunityNumber as CommunityInclude,",
                                  "    CommunityID as CommunityIDInclude,",
                                  "    *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber)",
                                  "and (IsReportFlg=1);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Master.mstrCommunity;",
                                  "",
                                  "",
                                  "store [mstrCommunity] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunity.qvd](qvd);",
                                  "",
                                  "",
                                  "/Extraction layer of Community Table used for iPod Task Apps - includes Home Care",
                                  "[mstrCommunityHomeCare]:",
                                  "    LOAD CommunityNumber as CommunityIncludeHomeCare,",
                                  "    CommunityID as CommunityIDIncludeHomeCare,",
                                  "    *",
                                  "Where Not Exists(CommunityExcludeHC, CommunityNumber)",
                                  "and (IsReportFlg=1 or CommunityNumber=\u002710163\u0027);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Master.mstrCommunity;",
                                  "",
                                  "store [mstrCommunityHomeCare] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunityHomeCare.qvd](qvd);"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Product Tiers",
        "LoadScriptContent":  [
                                  "$tab Community Product Tiers",
                                  "ProductTiers:",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    ProductTier",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Marketing/Atria Product Tier Mapping.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "",
                                  "TestProductTiers:",
                                  "LOAD %CommunityKey,",
                                  "\tCount(ProductTier) as CountTiers",
                                  "Resident ProductTiers",
                                  "Group By [%CommunityKey];",
                                  "",
                                  "TestProductTiers2:",
                                  "Load [%CommunityKey]",
                                  "Resident TestProductTiers",
                                  "Where CountTiers \u003e 1;",
                                  "Drop Table TestProductTiers;",
                                  "",
                                  "Let vTestRows=NoOfRows(\u0027TestProductTiers2\u0027);",
                                  "",
                                  "IF $(vTestRows)=0 then ",
                                  "",
                                  "store [ProductTiers] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ProductTierMapping.qvd](qvd);",
                                  "end if",
                                  "",
                                  "Drop Tables ProductTiers, TestProductTiers2;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Review Detail",
        "LoadScriptContent":  [
                                  "$tab Community Review Detail",
                                  "/Only loading question details for reviews included in the Community Review load.",
                                  "[factCommunityReviewDetail]:",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber)",
                                  "and Exists(IncludeReviewID, ReviewID);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Quality.factCommunityReviewDetail;",
                                  "",
                                  "store [factCommunityReviewDetail] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReviewDetail.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityReviewDetail];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Review POC",
        "LoadScriptContent":  [
                                  "$tab Community Review POC",
                                  "/Only loading scores for PTC included in the Community Review load.",
                                  "",
                                  "factCommunityReviewPOC:",
                                  "LOAD *",
                                  "where Exists(IncludePTCID, PlanOfCorrectionId);",
                                  "SQL SELECT tblPlanOfCorrectionResponse.PlanOfCorrectionResponseId,",
                                  "\tPlanOfCorrectionId,",
                                  "\tCustomFlg,",
                                  "\tCommunityReviewResponseId,",
                                  "\tPlanOfCorrectionResponseStatusId,",
                                  "\tOwner,",
                                  "\tDueDt,",
                                  "    Goal.Goal,",
                                  "    Result.Result",
                                  "",
                                  "FROM BusinessData.QE.tblPlanOfCorrectionResponse",
                                  "Left Join (Select \tPlanOfCorrectionResponseId,",
                                  "\t\t\t\t\tComments as Goal",
                                  "\t\t\tFROM \tBusinessData.QE.lnkPlanOfCorrectionResponseToComments",
                                  "            WHERE \tCommentTypeID = 2) Goal",
                                  "ON Goal.PlanOfCorrectionResponseId = tblPlanOfCorrectionResponse.PlanOfCorrectionResponseId",
                                  "Left Join (Select \tPlanOfCorrectionResponseId,",
                                  "\t\t\t\t\tComments as Result",
                                  "\t\t\tFROM \tBusinessData.QE.lnkPlanOfCorrectionResponseToComments",
                                  "            WHERE \tCommentTypeID = 3) Result",
                                  "ON Result.PlanOfCorrectionResponseId = tblPlanOfCorrectionResponse.PlanOfCorrectionResponseId",
                                  "Where ActiveFlg=1;",
                                  "",
                                  "store [factCommunityReviewPOC] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReviewPOC.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityReviewPOC];",
                                  "Drop Table [factCommunityReview]; /Now we can drop the table because we no longer need ReviewID and PTCID to include."
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Review Score",
        "LoadScriptContent":  [
                                  "$tab Community Review Score",
                                  "/Only loading scores for reviews included in the Community Review load.",
                                  "[factCommunityReviewScore]:",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber)",
                                  "and Exists(IncludeReviewID, ReviewID);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Quality.factCommunityReviewScore ;",
                                  "",
                                  "store [factCommunityReviewScore] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReviewScore.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityReviewScore];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Review",
        "LoadScriptContent":  [
                                  "$tab Community Review",
                                  "Step 1: Determine the most effective, non-Round 3 review for each community (so you can filter by most recent in the app).",
                                  "MaxReview:",
                                  "LOAD DISTINCT MAX(ReviewID) as MaxReviewID,",
                                  " CommunityNumber",
                                  "Group By CommunityNumber;",
                                  "",
                                  "Select",
                                  "ReviewID,",
                                  "CommunityNumber,",
                                  "DocumentYear,",
                                  "DocumentPeriod,",
                                  "ReviewStatus",
                                  "FROM AtriaDW.Quality.factCommunityReview",
                                  "Where ReviewStatus=\u0027Close\u0027 and DocumentPeriod\u003c\u003e\u00273\u0027;",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "/Step 2: determine which review IDs (and PTC IDs) should be included. Will use to limit the rest of the data loads without having to join in each load to get year, community, etc.",
                                  "/\t\tAlso loading all of the high level details for each review.",
                                  "[factCommunityReview]:",
                                  "",
                                  "LOAD ReviewID as IncludeReviewID,",
                                  "POCID as IncludePTCID,",
                                  " *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber)",
                                  "and WildMatch(DocumentYear, Year(YearStart(Today())), Year(YearStart(Today(),-1)), Year(YearStart(Today(),-2)));",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Quality.factCommunityReview;",
                                  "",
                                  "LEFT JOIN (factCommunityReview)",
                                  "LOAD CommunityReviewID as ReviewID,",
                                  "    IF(RptExecutiveDirectorNewHireFlg=0, \u0027No\u0027, IF(RptExecutiveDirectorNewHireFlg=1, \u0027Yes\u0027, \u0027Unknown\u0027)) as RptExecutiveDirectorNewHireFlg,",
                                  "    IF(LEN(rptExecutiveDirectorUserName)=0 or Match(rptExecutiveDirectorUserName, \u0027Select One...\u0027), \u0027No ED\u0027, \u0027ED\u0027) as ExecutiveDirectorFlg;",
                                  "SQL SELECT CommunityReviewID,",
                                  "    RptExecutiveDirectorNewHireFlg,",
                                  "    rptExecutiveDirectorUserName",
                                  "FROM BusinessData.QE.tblCommunityReviewResponseHeader;",
                                  "",
                                  "LEFT JOIN (factCommunityReview)",
                                  "LOAD MaxReviewID, CommunityNumber",
                                  "Resident MaxReview;",
                                  "Drop Table MaxReview;",
                                  "",
                                  "store [factCommunityReview] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReview.qvd](qvd);"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Trip Report Detail",
        "LoadScriptContent":  [
                                  "$tab Community Trip Report Detail",
                                  "[factCommunityTripReportDetail]:",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Quality.factCommunityTripReportDetail",
                                  "where CreateDT\u003e=\u0027$(vmindate3)\u0027;",
                                  "",
                                  "store [factCommunityTripReportDetail] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReportDetail.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityTripReportDetail];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Trip Report POC",
        "LoadScriptContent":  [
                                  "$tab Community Trip Report POC",
                                  "[factCommunityTripReportPOC]:",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Quality.factCommunityTripReportPOC",
                                  "where ReviewtDT\u003e=\u0027$(vmindate3)\u0027;",
                                  "",
                                  "store [factCommunityTripReportPOC] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReportPOC.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityTripReportPOC];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Community Trip Report",
        "LoadScriptContent":  [
                                  "$tab Community Trip Report",
                                  "[factCommunityTripReport]:",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Quality.factCommunityTripReport",
                                  "where CreateDT\u003e=\u0027$(vmindate3)\u0027 and TripReportID\u003c\u003e\u002711\u0027; //excluding Community Sales Promoter Update. This was briefly used in 2017 and then inactivated.",
                                  "",
                                  "store [factCommunityTripReport] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReport.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityTripReport];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "CommunityToCorporation",
        "LoadScriptContent":  [
                                  "$tab CommunityToCorporation",
                                  "mstrCommunityToCorporation:",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber)",
                                  "and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Sales.mstrCommunityToCorporation;",
                                  "",
                                  "store [mstrCommunityToCorporation] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunityToCorporation.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrCommunityToCorporation];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "CSS Response Rate",
        "LoadScriptContent":  [
                                  "$tab CSS Response Rate",
                                  "CSS_Response:",
                                  "LOAD",
                                  "    *",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Customer \u0026 Employee Satisfaction\\Combined CSS Response Rate.xlsx]",
                                  "(ooxml, embedded labels, table is Combined);",
                                  "",
                                  "store [CSS_Response] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_CSS_Response.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [CSS_Response];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "CSS",
        "LoadScriptContent":  [
                                  "$tab CSS",
                                  "CSS:",
                                  "LOAD",
                                  "    *",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Customer \u0026 Employee Satisfaction\\Combined ALL CSS.xlsx]",
                                  "(ooxml, embedded labels, table is Combined);",
                                  "",
                                  "store [CSS] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_CSS.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [CSS];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "dimDate",
        "LoadScriptContent":  [
                                  "$tab dimDate",
                                  "[dimDate]:",
                                  "    LOAD",
                                  "    date(floor(EffectiveDT)) as EffectiveDT, ",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  "    Week(EffectiveDT) as WeekStartMonday,",
                                  "\tFullDateUSA, ",
                                  "\tNUM#(DayOfMonth) as DayOfMonth, ",
                                  "    MonthDayCount,",
                                  "\tDaySuffix, ",
                                  "\tDayName, ",
                                  "\tDayOfWeekUSA, ",
                                  "\tDayOfWeekInMonth, ",
                                  "\tDayOfWeekInYear, ",
                                  "\tDayOfQuarter, ",
                                  "\tDayOfYear, ",
                                  "\tWeekOfMonth, ",
                                  "\tWeekOfQuarter, ",
                                  "\tWeekOfYear, ",
                                  "\tMonth, ",
                                  "\tMonthName, ",
                                  "\tMonthOfQuarter, ",
                                  "\tQuarter, ",
                                  "\tQuarterName, ",
                                  "\tYear, ",
                                  "\tYearName, ",
                                  "\tMonthYear, ",
                                  "\tMMYYYY,",
                                  "    SundayStartDT,",
                                  "\tFirstDayOfMonth, ",
                                  "\tLastDayOfMonth, ",
                                  "\tFirstDayOfQuarter, ",
                                  "\tLastDayOfQuarter, ",
                                  "\tFirstDayOfYear, ",
                                  "\tLastDayOfYear, ",
                                  "\tIsHolidayUSA, ",
                                  "\tIsWeekday, ",
                                  "\tHolidayUSA,",
                                  "    IF(Date(Floor(LastDayOfMonth)) = Date(Floor(EffectiveDT)), 1, 0) as LastDayOfMonthFlg",
                                  "// \tFiscalDayOfYear, ",
                                  "// \tFiscalWeekOfYear, ",
                                  "// \tFiscalMonth, ",
                                  "// \tFiscalQuarter, ",
                                  "// \tFiscalQuarterName, ",
                                  "// \tFiscalYear, ",
                                  "// \tFiscalYearName, ",
                                  "// \tFiscalMonthYear, ",
                                  "// \tFiscalMMYYYY, ",
                                  "// \tFiscalFirstDayOfMonth, ",
                                  "// \tFiscalLastDayOfMonth, ",
                                  "// \tFiscalFirstDayOfQuarter, ",
                                  "// \tFiscalLastDayOfQuarter, ",
                                  "// \tFiscalFirstDayOfYear, ",
                                  "// \tFiscalLastDayOfYear;",
                                  "where EffectiveDT \u003e=\u0027$(vmindate2)\u0027 and EffectiveDT \u003c=\u0027$(vmaxdate2)\u0027;",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Dimension.dimDate",
                                  ";",
                                  "",
                                  "store [dimDate] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_dimDate.qvd](qvd);",
                                  "",
                                  "Drop Table [dimDate];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Drop mstrCommunity",
        "LoadScriptContent":  [
                                  "$tab Drop mstrCommunity",
                                  "Drop Table [mstrCommunity];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Employees",
        "LoadScriptContent":  [
                                  "$tab Employees",
                                  "[mstrEmployee]:",
                                  "LOAD DISTINCT",
                                  "\tEMPLID,",
                                  "    COMPANY,",
                                  "    IF(Match(LOCATION, \u002728681\u0027), \u002710681\u0027, LOCATION) as %CommunityKey,",
                                  "    Employee,",
                                  "    \"FIRST_NAME\",",
                                  "    \"MIDDLE_NAME\",",
                                  "    \"LAST_NAME\",",
                                  "    ADDRESS1,",
                                  "    ADDRESS2,",
                                  "    CITY,",
                                  "    STATE,",
                                  "    POSTAL,",
                                  "    EMAIL,",
                                  "    PHONE,",
                                  "    \"SERVICE_DT\",",
                                  "    DeptID,",
                                  "    DEPTNAME,",
                                  "    \"DEPTNAME_ABBRV\",",
                                  "    JOBCODE,",
                                  "    JOBTITLE,",
                                  "    \"JOBTITLE_ABBRV\",",
                                  "    \"REG_TEMP\",",
                                  "    \"REG_TEMP_NAME\",",
                                  "    \"FULL_PART_TIME\",",
                                  "    \"FULL_PART_TIME_NAME\",",
                                  "    \"FLSA_STATUS\",",
                                  "    \"FLSA_STATUS_NAME\",",
                                  "    \"EMPL_TYPE\",",
                                  "    \"EMPL_TYPE_NAME\",",
                                  "    \"EMPL_CLASS\",",
                                  "    \"EMPL_CLASS_NAME\",",
                                  "    \"EMPL_STATUS\",",
                                  "    \"EMPL_STATUS_NAME\",",
                                  "    \"HR_STATUS\",",
                                  "    \"HR_STATUS_NAME\",",
                                  "    EFFDT,",
                                  "    \"HIRE_DT\",",
                                  "    \"LAST_HIRE_DT\",",
                                  "    \"TERMINATION_DT\",",
                                  "//     \"HOURLY_RT\",",
                                  "    \"ACTION_DT\",",
                                  "    LASTUPDDTTM,",
                                  "    \"JOB_ENTRY_DT\",",
                                  "    \"DEPT_ENTRY_DT\",",
                                  "    \"POSITION_ENTRY_DT\",",
                                  "    \"REPORTS_TO\",",
                                  "    \"POSITION_NBR\",",
                                  "    ReplicaDT,",
                                  "    Date(Floor(Today()))-IF(SERVICE_DT\u003eDate(Floor(Today())), HIRE_DT, SERVICE_DT) as Tenure,",
                                  "    IF((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))\u003c=7, \u00270-7 days\u0027,",
                                  "    IF((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))\u003c=30, \u00278-30 days\u0027,",
                                  "    IF((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))\u003c=90, \u00271-3 months\u0027,",
                                  "    IF((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))\u003c=180, \u00273-6 months\u0027,",
                                  "    IF((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))\u003c=365, \u00276-12 months\u0027,",
                                  "    IF(((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))/365)\u003c=2, \u00271-2 years\u0027,",
                                  "    IF(((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))/365)\u003c=3, \u00272-3 years\u0027,",
                                  "    IF(((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))/365)\u003c=4, \u00273-4 years\u0027,",
                                  "    IF(((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))/365)\u003c=5, \u00274-5 years\u0027,",
                                  "    IF(((Date(Floor(Today()))-IF(SERVICE_DT\u003e Date(Floor(Today())), HIRE_DT, SERVICE_DT))/365)\u003e5, \u0027\u003e5 years\u0027)))))))))) as TenureCategory;",
                                  "//     Where Not Exists(CommunityExclude, LOCATION) NEED SERVICE DATE FOR ALL EMPLOYEES IN THE TURNOVER APP, IF MOVED TO 10121 etc. OR EXCLUDING THEIR NEW COMMUNITY, THEN WE COULD NOT SEE",
                                  "//     and Exists(CommunityInclude, LOCATION);",
                                  "SELECT *",
                                  "FROM AtriaDW.HumanResource.mstrEmployee;",
                                  "",
                                  "/Normally would add this to transformation, but do not have transformation for this table. Wanted Report To fields.",
                                  "Left Join (mstrEmployee)",
                                  "LOAD DISTINCT \"ADP_EmployeeID\" as EMPLID,",
                                  "    ReportToUsername;",
                                  "SQL SELECT \"ADP_EmployeeID\",",
                                  "    ReportToUsername",
                                  "FROM BusinessData.dbo.tblEmployees;",
                                  "",
                                  "/Getting Leave Reason",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "Left Join (mstrEmployee)",
                                  "LOAD EMPLID,",
                                  "\t\u0027P\u0027 as EMPL_STATUS,",
                                  "    ACTION_REASON_DESCRIPTION as LeaveReason",
                                  "Where SegmentRank=1 and SegmentEffRank=1;",
                                  "SQL SELECT EMPLID,",
                                  "    ACTION,",
                                  "    ACTION_REASON_DESCRIPTION,",
                                  "    ACTION_DT,",
                                  "    EFFDT,",
                                  "    Rank() OVER(Partition By EMPLID Order By EFFDT DESC) as SegmentRank,",
                                  "    Rank() OVER(Partition By EMPLID, EFFDT Order By ACTION_DT DESC) as SegmentEffRank",
                                  "FROM AtriaDW.HumanResource.vwPSJobHistory",
                                  "where ACTION IN (\u0027PLA\u0027, \u0027LOA\u0027);",
                                  "",
                                  "/Getting Most Recent Termination Date (for rehires where the Term Dt is null)",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "Left Join (mstrEmployee)",
                                  "LOAD EMPLID,",
                                  "// \t\u0027P\u0027 as EMPL_STATUS,",
                                  "    Date(Floor(EFFDT)) as LastTermDT,",
                                  "    ACTION_REASON_DESCRIPTION as LastTermReason",
                                  "Where SegmentRank=1 and SegmentEffRank=1;",
                                  "SQL SELECT EMPLID,",
                                  "    ACTION,",
                                  "    ACTION_REASON_DESCRIPTION,",
                                  "    ACTION_DT,",
                                  "    EFFDT,",
                                  "    Rank() OVER(Partition By EMPLID Order By EFFDT DESC) as SegmentRank,",
                                  "    Rank() OVER(Partition By EMPLID, EFFDT Order By ACTION_DT DESC) as SegmentEffRank",
                                  "FROM AtriaDW.HumanResource.vwPSJobHistory",
                                  "where ACTION IN (\u0027TER\u0027) and EFFDT \u003c= GetDate();",
                                  "",
                                  "store [mstrEmployee] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrEmployee.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrEmployee];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "ESS",
        "LoadScriptContent":  [
                                  "$tab ESS",
                                  "ESS:",
                                  "LOAD",
                                  "    *",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Customer \u0026 Employee Satisfaction\\Combined ESS.xlsx]",
                                  "(ooxml, embedded labels, table is Combined);",
                                  "",
                                  "store [ESS] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ESS.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [ESS];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Exclusions",
        "LoadScriptContent":  [
                                  "$tab Exclusions",
                                  "/List of communities that should be excluded from our QVDs (due to disposition, new development, or other reasons as decided by Sales, Bus Ops, or senior leadership).",
                                  "Exclusions:",
                                  "LOAD",
                                  "    CommunityExcludeHC,",
                                  "    CommunityExclude,",
                                  "    CommunityExcludeDispositions,",
                                  "    CommunityIDExclude,",
                                  "    CommunityExcludeNote",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Community Exclusions.xlsx]",
                                  "(ooxml, embedded labels, table is Exclusions);",
                                  "",
                                  "store [Exclusions] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ExclusionsMstrCommunity.qvd](qvd);"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "factCompetitorToPriceByCareByRoomTypeStyle",
        "LoadScriptContent":  [
                                  "$tab factCompetitorToPriceByCareByRoomTypeStyle",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "factCompetitorToPrice:",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Pricing.factCompetitorToPriceByCareByRoomTypeStyle;",
                                  "",
                                  "store [factCompetitorToPrice] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCompetitorToPrice.qvd](qvd);",
                                  "",
                                  "Drop Table [factCompetitorToPrice];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "factCompetitorToRating",
        "LoadScriptContent":  [
                                  "$tab factCompetitorToRating",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "lnkCompetitorToRating:",
                                  "LOAD CompetitorToRatingID,",
                                  "    CommunityID,",
                                  "    CompetitorID,",
                                  "    CareTypeID,",
                                  "    Rating,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    EffectiveDT",
                                  "//     StatusID,",
                                  "//     ApplicationID",
                                  "    Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID) ;",
                                  "SQL SELECT *",
                                  "FROM BusinessData.PricingManagement.lnkCompetitorToRating",
                                  "Where StatusID=1;",
                                  "",
                                  "/Table does not have CommunityID, which is needed in Transformation (other tables use those fields instead of ID)",
                                  "Left Join (lnkCompetitorToRating)",
                                  "LOAD CommunityID,",
                                  "    CommunityNumber;",
                                  "SQL SELECT CommunityID,",
                                  "    CommunityNumber",
                                  "FROM AtriaDW.Master.mstrCommunity;",
                                  "",
                                  "/Table does not have CareType or CareTypeCode, which is needed in Transformation (other tables use those fields instead of ID)",
                                  "Left Join (lnkCompetitorToRating)",
                                  "LOAD CareTypeID,",
                                  "    CareType,",
                                  "//     ImageURL,",
                                  "//     CreateDate,",
                                  "//     ActiveFlg,",
                                  "//     CreateBy,",
                                  "    Code as CareTypeCode;",
                                  "SQL SELECT *",
                                  "FROM BusinessData.ARM.luCareType;",
                                  "",
                                  "drop field CommunityID from lnkCompetitorToRating;",
                                  "",
                                  "store [lnkCompetitorToRating] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCompetitorToRating.qvd](qvd);",
                                  "",
                                  "Drop Table [lnkCompetitorToRating];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "factCompetitorToRatingByWeek",
        "LoadScriptContent":  [
                                  "$tab factCompetitorToRatingByWeek",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "factCompetitorToRatingByWeek:",
                                  "LOAD factCompetitorToRatingByWeekID,",
                                  "    CommunityNumber,",
                                  "    CompetitorID,",
                                  "    CareTypeID,",
                                  "    CareType,",
                                  "    CareTypeCode,",
                                  "    Rating,",
                                  "    EffectiveDT,",
                                  "    CreateDT,",
                                  "    CreateBy,",
                                  "    ModifyDT,",
                                  "    ModifyBy,",
                                  "    ReplicaDT",
                                  "    Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT factCompetitorToRatingByWeekID,",
                                  "    CommunityNumber,",
                                  "    CompetitorID,",
                                  "    CareTypeID,",
                                  "    CareType,",
                                  "    CareTypeCode,",
                                  "    Rating,",
                                  "    EffectiveDT,",
                                  "    CreateDT,",
                                  "    CreateBy,",
                                  "    ModifyDT,",
                                  "    ModifyBy,",
                                  "    ReplicaDT",
                                  "FROM AtriaDW.Pricing.factCompetitorToRatingByWeek;",
                                  "",
                                  "",
                                  "store [factCompetitorToRatingByWeek] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCompetitorToRatingByWeek.qvd](qvd);",
                                  "",
                                  "Drop Table [factCompetitorToRatingByWeek];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "factInquiryByReferral",
        "LoadScriptContent":  [
                                  "$tab factInquiryByReferral",
                                  "factInquiryByReferral:",
                                  "Load distinct",
                                  "// \tInquiryByReferralID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    InquiryDT,",
                                  "    Date(Floor(InquiryDT)) as %DateKey,",
                                  "    Status,",
                                  "    StatusDT,",
                                  "    Inquiry,",
                                  "    Address1,",
                                  "    Address2,",
                                  "    City,",
                                  "    State,",
                                  "    PostalCode,",
                                  "    Country,",
                                  "    Email,",
                                  "    Phone,",
                                  "    PhoneWork,",
                                  "    PhoneCell,",
                                  "    Longitude,",
                                  "    Latitude,",
                                  "    RelationToCustomer,",
                                  "    ReferralCategoryType,",
                                  "    ReferralCategory,",
                                  "    ReferralType,",
                                  "    ReferralSourceID,",
                                  "    ReferralSource,",
                                  "    ReferredByID,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralCategoryType,",
                                  "    SecondaryReferralCategory,",
                                  "    SecondaryReferralType,",
                                  "    SecondaryReferralSourceID,",
                                  "    SecondaryReferralSource,",
                                  "    SecondaryReferredByID,",
                                  "    SecondaryReferredBy,",
                                  "    IsEleadFlg,",
                                  "    TourDT,",
                                  "    TourType,",
                                  "    TourOwner,",
                                  "    TourInitialCount,",
                                  "    TourAdditionalCount,",
                                  "    TourCount,",
                                  "    CallCount,",
                                  "    Coalesce(VisitorSourceReferral, VisitorSource) as VisitorSource,",
                                  "    Coalesce(VisitorCampaignReferral, VisitorCampaign) as VisitorCampaign,",
                                  "    Coalesce(VisitorMediumReferral, VisitorMedium) as VisitorMedium,",
                                  "    ",
                                  "    IF(InquiryDT\u003e=\u00272020-06-25\u0027 and WildMatch(VisitorMedium, \u0027*atriaseniorliving.com*\u0027), SubField(VisitorMedium, \u0027,\u0027, 1), NULL()) as VisitorFormURL,",
                                  "    Coalesce(VisitorFormLocationReferral, IF(InquiryDT\u003e=\u00272020-06-25\u0027 and WildMatch(VisitorMedium, \u0027*atriaseniorliving.com*\u0027) and NOT(WildMatch(VisitorMedium, \u0027*adgroup*\u0027)), SubField(VisitorMedium, \u0027,\u0027, 2), NULL())) as VisitorFormLocation,",
                                  "    IF(InquiryDT\u003e=\u00272020-06-25\u0027 and WildMatch(VisitorMedium, \u0027*atriaseniorliving.com*\u0027) and NOT(WildMatch(VisitorMedium, \u0027*adgroup*\u0027)), SubField(VisitorMedium, \u0027,\u0027, 3), NULL()) as VisitorFormType,",
                                  "    ",
                                  "    IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027), //if logic changes, update in QA app as well",
                                  "    \tLeft(SubField(VisitorCampaign, \u0027,\u0027,1), Len(SubField(VisitorCampaign, \u0027,\u0027,1)))) as VisitorCampaignNameCode,",
                                  "    ",
                                  "    IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027) and WildMatch(VisitorCampaign, \u0027*adgroup:*\u0027),",
                                  "    \tIF(Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027adgroup:\u0027)+7)), \u0027,\u0027)\u003e0, //IF NOT the last item in campaign text",
                                  "    \t\tLeft(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027adgroup:\u0027)+7)), ",
                                  "                Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027adgroup:\u0027)+7)), \u0027,\u0027)-1), //THEN only print text between : and ,",
                                  "            Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027adgroup:\u0027)+7)))) as VisitorCampaignAdGroupID, //ELSE print everything after : ",
                                  "        ",
                                  "    Coalesce(VisitorAdReferral, IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027) and WildMatch(VisitorCampaign, \u0027*ad:*\u0027),",
                                  "    \tIF(Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027ad:\u0027)+2)), \u0027,\u0027)\u003e0, //IF NOT the last item in campaign text",
                                  "    \t\tLeft(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027ad:\u0027)+2)), ",
                                  "                Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027ad:\u0027)+2)), \u0027,\u0027)-1), //THEN only print text between : and ,",
                                  "            Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027ad:\u0027)+2))))) as VisitorCampaignAd, //ELSE print everything after : ",
                                  "            ",
                                  "    Coalesce(VisitorKeywordReferral, IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027) and WildMatch(VisitorCampaign, \u0027*keyword:*\u0027),",
                                  "    \tIF(Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027keyword:\u0027)+7)), \u0027,\u0027)\u003e0, //IF NOT the last item in campaign text",
                                  "    \t\tLeft(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027keyword:\u0027)+7)), ",
                                  "                Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027keyword:\u0027)+7)), \u0027,\u0027)-1), //THEN only print text between : and ,",
                                  "            Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027keyword:\u0027)+7))))) as VisitorCampaignKeyword, //ELSE print everything after :    ",
                                  "            ",
                                  "    IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027) and WildMatch(VisitorCampaign, \u0027*matchtype:*\u0027),",
                                  "    \tIF(Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027matchtype:\u0027)+9)), \u0027,\u0027)\u003e0, //IF NOT the last item in campaign text",
                                  "    \t\tLeft(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027matchtype:\u0027)+9)), ",
                                  "                Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027matchtype:\u0027)+9)), \u0027,\u0027)-1), //THEN only print text between : and ,",
                                  "            Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027matchtype:\u0027)+9)))) as VisitorCampaignMatchTypeCode, //ELSE print everything after :   ",
                                  "            ",
                                  "    IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027) and WildMatch(VisitorCampaign, \u0027*device:*\u0027),",
                                  "    \tIF(Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027device:\u0027)+6)), \u0027,\u0027)\u003e0, //IF NOT the last item in campaign text",
                                  "    \t\tLeft(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027device:\u0027)+6)), ",
                                  "                Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027device:\u0027)+6)), \u0027,\u0027)-1), //THEN only print text between : and ,",
                                  "            Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027device:\u0027)+5)))) as VisitorCampaignDeviceCode, //ELSE print everything after :    ",
                                  "            ",
                                  "    Coalesce(VisitorGclidReferral, IF(Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027) and WildMatch(VisitorCampaign, \u0027*gclid:*\u0027),",
                                  "    \tIF(Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027gclid:\u0027)+5)), \u0027,\u0027)\u003e0, //IF NOT the last item in campaign text",
                                  "    \t\tLeft(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027gclid:\u0027)+5)), ",
                                  "                Index(Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027gclid:\u0027)+5)), \u0027,\u0027)-1), //THEN only print text between : and ,",
                                  "            Right(VisitorCampaign, Len(VisitorCampaign) - (Index(VisitorCampaign, \u0027gclid:\u0027)+5))))) as VisitorCampaignGclid, //ELSE print everything after :",
                                  "\tVisitorAdGroupReferral,",
                                  "\tVisitorTermReferral,",
                                  "\tVisitorContentReferral,",
                                  "    IF(ISNULL(ActiveCampaignInterfaceFlg), 0, ActiveCampaignInterfaceFlg) as ActiveCampaignInterfaceFlg,",
                                  "    ",
                                  "    IsSelfAssessmentFlg,",
                                  "    OutboundCategory,",
                                  "    OutboundLocationID,",
                                  "    OutboundLocation,",
                                  "    OutboundLocationType,",
                                  "    OutboundInfluence,",
                                  "    CompetitorRate,",
                                  "    AllowContactPhoneFlg,",
                                  "    AllowContactMailFlg,",
                                  "    AllowContactEmailFlg,",
                                  "    CustomerID,",
                                  "    BillingID,",
                                  "    LivingSituation,",
                                  "    CareType,",
                                  "    PayorType,",
                                  "    Note,",
                                  "    RoomType,",
                                  "    MoveInDT,",
                                  "    IF(ISNULL(PhysicalMoveInDT), MoveInDT, PhysicalMoveInDT) as PhysicalMoveInDT,",
                                  "    ApplicationURL,",
                                  "    HasBiographyNote,",
                                  "    HasObjectionNote,",
                                  "    HasDiscoveryNote,",
                                  "    HasCurrentLivingSituationNote,",
                                  "    HasWhatPromptedSearchNote,",
                                  "    HasBudgetNote,",
                                  "    HasRoomTypeNote,",
                                  "    HasTimeFrameNote,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    ReplicaDT",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Sales.factInquiryByReferral",
                                  "left join ",
                                  "\t(Select distinct ",
                                  "    \t\t CustomerID as CustomerIDMoveIn",
                                  "            ,MoveInDT as FinancialMoveInDT",
                                  "            ,PhysicalMoveInDT",
                                  "            ,RANK() OVER( Partition By CustomerID, cast(MoveInDT as date) order by CreateDT desc, ResidentMoveInID desc) as Ranking",
                                  "\tfrom BusinessData.ARM.tblResidentMoveIn where ActiveFlg=1) tblResidentMI",
                                  "on \t\ttblResidentMI.CustomerIDMoveIn = factInquiryByReferral.CustomerID ",
                                  "and\t\tcast(tblResidentMI.FinancialMoveInDT as date) = cast(factInquiryByReferral.MoveInDT as date) ",
                                  "and\t\tRanking=1",
                                  "    ",
                                  "left join",
                                  "\t(SELECT tblInquiryReferral.InquiryID as InquiryIDReferral",
                                  "\t\t,tblInquiryReferral.CustomerID as CustomerIDReferral",
                                  "\t\t,tblInquiryReferral.VisitorAdGroup as VisitorAdGroupReferral",
                                  "\t\t,tblInquiryReferral.VisitorAd as VisitorAdReferral",
                                  "\t\t,tblInquiryReferral.VisitorKeyword as VisitorKeywordReferral",
                                  "\t\t,tblInquiryReferral.VisitorGclid as VisitorGclidReferral",
                                  "\t\t,tblInquiryReferral.VisitorTerm as VisitorTermReferral",
                                  "\t\t,tblInquiryReferral.VisitorContent as VisitorContentReferral",
                                  "\t\t,tblInquiryReferral.VisitorFormLocation as VisitorFormLocationReferral",
                                  "\t\t,tblInquiryReferral.VisitorCampaign as VisitorCampaignReferral",
                                  "\t\t,tblInquiryReferral.VisitorMedium as VisitorMediumReferral",
                                  "\t\t,tblInquiryReferral.VisitorSource as VisitorSourceReferral",
                                  "        ,1 as ActiveCampaignInterfaceFlg",
                                  "// \t\t,tblInquiryReferral.CreateDT",
                                  "\t\t,RANK( ) OVER ( partition by InquiryID, CustomerID order by tblInquiryReferral.CreateDT desc, tblInquiryReferral.ModifyDT desc, tblInquiryReferral.InquiryReferralID desc) as Ranking",
                                  "\t\tfrom\tBusinessData.CRM.tblInquiryReferral ",
                                  "\t\twhere  (",
                                  "\t\t\ttblInquiryReferral.VisitorAdGroup is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorAd is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorKeyword is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorGclid is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorTerm is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorContent is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorFormLocation is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorCampaign is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorMedium is not null ",
                                  "\t\t\t OR",
                                  "\t\t\t tblInquiryReferral.VisitorSource is not null ",
                                  "\t\t\t)",
                                  "        and CreateBy = \u0027ActiveCampaignInterface\u0027",
                                  "\t\t) tblInquiryReferral",
                                  "on\t\ttblInquiryReferral.InquiryIDReferral = factInquiryByReferral.InquiryID",
                                  "and\t\ttblInquiryReferral.CustomerIDReferral = factInquiryByReferral.CustomerID",
                                  "and\t\ttblInquiryReferral.Ranking = 1",
                                  "",
                                  "where \tInquiryDT \u003e= \u0027$(vmindate2)\u0027 ",
                                  "or \t\tStatus in (Select distinct ResidentStatus FROM BusinessData.ARM.luResidentStatus",
                                  "\t\t\t\t\tInner Join (Select ResidentStatusID from BusinessData.Core.lnkResidentStatusToCategory where ResidentStatusCategoryID = 3 and ActiveFlg = 1) lnkResidentStatusToCategory",
                                  "                    ON\t\t\tlnkResidentStatusToCategory.ResidentStatusID = luResidentStatus.ResidentStatusID)",
                                  "or\t\tMoveInDT \u003e= \u0027$(vmindate2)\u0027",
                                  ";",
                                  "//where statement, only include if inquired or moved in in the last 3 years or if they are in an active selling status currently. So not too much data that would cause issues with loads, but have all of the recently relevant information.",
                                  "",
                                  "/Step 2: Get the Google Campaign values from mapping for old google campaign data extraction process",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD ",
                                  "\t0 as ActiveCampaignInterfaceFlg,",
                                  "    VisitorCampaignNameCode,",
                                  "    Replace(VisitorCampaignName, \u00271 Master - \u0027, \u0027\u0027) as VisitorCampaignName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Marketing/Google Campaign Mapping.xlsx]",
                                  "(ooxml, embedded labels, table is CampaignName);",
                                  "",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "\t0 as ActiveCampaignInterfaceFlg,",
                                  "    VisitorCampaignAdGroupID,",
                                  "    VisitorCampaignAdGroup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Marketing/Google Campaign Mapping.xlsx]",
                                  "(ooxml, embedded labels, table is AdGroup);",
                                  "",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "\t0 as ActiveCampaignInterfaceFlg,",
                                  "    VisitorCampaignMatchTypeCode,",
                                  "    VisitorCampaignMatchType",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Marketing/Google Campaign Mapping.xlsx]",
                                  "(ooxml, embedded labels, table is MatchType);",
                                  "",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "\t0 as ActiveCampaignInterfaceFlg,",
                                  "    VisitorCampaignDeviceCode,",
                                  "    VisitorCampaignDevice",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Marketing/Google Campaign Mapping.xlsx]",
                                  "(ooxml, embedded labels, table is Device);",
                                  "",
                                  "",
                                  "store [factInquiryByReferral] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd](qvd);",
                                  "",
                                  "Drop Table [factInquiryByReferral];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Forecast by Operator",
        "LoadScriptContent":  [
                                  "$tab Forecast by Operator",
                                  "factUnitOccupancyForecastByOperator:",
                                  "",
                                  "LOAD ",
                                  "    *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Sales.factUnitOccupancyForecastByOperator",
                                  "where effectivedt\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "store [factUnitOccupancyForecastByOperator] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factUnitOccupancyForecastByOperator.qvd](qvd);",
                                  "",
                                  "Drop Table [factUnitOccupancyForecastByOperator];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Generator List",
        "LoadScriptContent":  [
                                  "$tab Generator List",
                                  "/This is the generator list updated by Maintenance / Legal as needed. It is then loaded into the Risk Management Stream\u0027s Emergency Information app.",
                                  "/If there are issues loading, check that users updating the app did not change any column titles, etc.",
                                  "GeneratorList:",
                                  "LOAD",
                                  "*",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Maintenance \u0026 Risk Management/Generator List.xlsx]",
                                  "(ooxml, embedded labels, table is [Generator List])",
                                  "Where Not Exists(CommunityExclude, \"Location #\");",
                                  "",
                                  "store [GeneratorList] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_GeneratorList.qvd](qvd);",
                                  "",
                                  "Drop Table [GeneratorList];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Incident",
        "LoadScriptContent":  [
                                  "$tab Incident",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "mstrIncident:",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "",
                                  "SELECT DISTINCT ",
                                  " \u00272.0\u0027 AS IncidentVersion",
                                  ",tblCommunity.CommunityNumber",
                                  ",tblCustomer.CustomerID",
                                  ",tblIncident.IncidentID",
                                  ",CAST(tblIncident.IncidentDT AS Date) AS IncidentDT",
                                  ",CAST(tblIncident.IncidentTM AS Time) AS IncidentTM",
                                  ",tblIncident.ReportDT as IncidentReportDateTime",
                                  ",\u0027Resident\u0027 AS IncidentCategory",
                                  ",luIncidentType.IncidentType",
                                  ",CASE WHEN tblIncident.StatusID = 1 AND tblIncident.ActiveFlg=1 AND tblResidentNote.ResidentNoteId IS NULL AND wrkResidentNote.ProcessStatusID = 1 //Pending - Not Submitted",
                                  "\tTHEN \u0027Not Submitted\u0027 ",
                                  "    ELSE CASE WHEN tblIncident.StatusID = 1 //Pending - Pending Approval",
                                  "    \tTHEN \u0027Pending Approval\u0027 ",
                                  "        ELSE luStatus.Status ",
                                  "\tEND ",
                                  " END AS IncidentStatus",
                                  ",CASE WHEN lnkIncidentToAttachment.AttachmentID IS NULL THEN 0 ELSE 1 END AS HasAttachmentFlg",
                                  ",isFallFlg AS FallFlg",
                                  ",isMedicationErrorFlg AS MedicationErrorFlg",
                                  ",isAbuseFlg AS AbuseFlg",
                                  ",isPropertyFlg AS PropertyFlg",
                                  ",isExposureFlg AS ExposureFlg",
                                  ",isBehaviorSymptomFlg AS BehaviorFlg",
                                  ",isElopementFlg AS ElopementFlg",
                                  ",isAccidentFlg AS AccidentFlg",
                                  ",isInjuryFlg AS InjuryFlg",
                                  ",isIllnessFlg AS IllnessFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeDeath.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeDeathFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeHospital.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeHospitalFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeUnconscious.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeUnconsciousFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseDrugFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeNoMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFirstAid.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFirstAidFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseFamilyReactionFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeResidentRefused.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeResidentRefusedTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeOther.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeOtherFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMS.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMSFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMT.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMTTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFamilyTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomePending.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomePendingFlg",
                                  ",CASE WHEN  tblIncident.isFallFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isMedicationErrorFlg\t!= 1",
                                  "\t\tAND\ttblIncident.isAbuseFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isPropertyFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isExposureFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isBehaviorSymptomFlg\t!= 1",
                                  "\t\tAND\ttblIncident.isElopementFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isAccidentFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isInjuryFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isIllnessFlg\t\t\t!= 1 THEN 1",
                                  "\t\tELSE 0",
                                  "\t\tEND AS UntypedFlg",
                                  "FROM BusinessData.IncidentReport.tblIncident tblIncident",
                                  "INNER JOIN BusinessData.ARM.tblCommunity tblCommunity",
                                  "\t\tON tblCommunity.CommunityID = tblIncident.CommunityID",
                                  "INNER JOIN BusinessData.ARM.tblCustomer tblCustomer",
                                  "\t\tON tblCustomer.CustomerID = tblIncident.CustomerID",
                                  "INNER JOIN BusinessData.IncidentReport.luIncidentType luIncidentType",
                                  "\t\tON luIncidentType.IncidentTypeID = tblIncident.IncidentTypeID",
                                  "INNER JOIN BusinessData.IncidentReport.luStatus luStatus",
                                  "\t\tON luStatus.StatusID = tblIncident.StatusID",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToAttachment lnkIncidentToAttachment",
                                  "\t\tON lnkIncidentToAttachment.IncidentID = tblIncident.IncidentID AND lnkIncidentToAttachment.ActiveFlg = 1",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeDeath",
                                  "\t\tON lnkIncident_OutcomeDeath.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeDeath.OutcomeSeverityID = 1",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeHospital",
                                  "\t\tON lnkIncident_OutcomeHospital.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeHospital.OutcomeSeverityID = 2",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeUnconscious",
                                  "\t\tON lnkIncident_OutcomeUnconscious.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeUnconscious.OutcomeSeverityID = 3",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeAdverseDrug",
                                  "\t\tON lnkIncident_OutcomeAdverseDrug.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID = 4",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeNoMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeNoMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID = 5",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID = 6",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeFallWithInjury",
                                  "\t\tON lnkIncident_OutcomeFallWithInjury.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFallWithInjury.OutcomeSeverityID = 7",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeFirstAid",
                                  "\t\tON lnkIncident_OutcomeFirstAid.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFirstAid.OutcomeSeverityID = 8",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeAdverseFamily",
                                  "\t\tON lnkIncident_OutcomeAdverseFamily.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID = 9",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeResidentRefused",
                                  "\t\tON lnkIncident_OutcomeResidentRefused.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeResidentRefused.OutcomeSeverityID = 10",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeOther",
                                  "\t\tON lnkIncident_OutcomeOther.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeOther.OutcomeSeverityID = 11",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeEMS",
                                  "\t\tON lnkIncident_OutcomeEMS.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMS.OutcomeSeverityID = 16",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeEMT",
                                  "\t\tON lnkIncident_OutcomeEMT.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMT.OutcomeSeverityID = 17",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeFamilyTransport",
                                  "\t\tON lnkIncident_OutcomeFamilyTransport.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID = 18",
                                  "LEFT JOIN  BusinessData.IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomePending",
                                  "\t\tON lnkIncident_OutcomePending.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomePending.OutcomeSeverityID = 19",
                                  "LEFT JOIN  BusinessData.ACM.tblResidentNote tblResidentNote",
                                  "\t\tON tblResidentNote.IncidentID = tblIncident.IncidentID",
                                  "LEFT JOIN  BusinessData.IncidentReport.wrkResidentNote",
                                  "\t\tON wrkResidentNote.IncidentID = tblIncident.IncidentID",
                                  "WHERE\ttblIncident.ActiveFlg = 1",
                                  "AND\t\tDATEDIFF(DD, tblIncident.IncidentDT, GETDATE()) \u003c= 365",
                                  "UNION",
                                  "SELECT DISTINCT ",
                                  " \u00271.0\u0027 AS IncidentVersion",
                                  ",tblCommunity.CommunityNumber",
                                  ",tblCustomer.CustomerID",
                                  ",tblIncident.IncidentID",
                                  ",CAST(IncidentDate AS Date) AS IncidentDT",
                                  ",CAST(IncidentTime AS Time) AS IncidentTM",
                                  ",tblIncident.DateCommitted as IncidentReportDateTime",
                                  ",\u0027Resident\u0027 AS IncidentCategory",
                                  ",luIncidentType.Incident_Type",
                                  ",CASE WHEN luStatus.Incident_Status = \u0027Pending\u0027 THEN \u0027Pending Approval\u0027 ELSE luStatus.Incident_Status END AS IncidentStatus",
                                  ",CASE WHEN lnkIncidentDocument.DocumentID IS NULL THEN 0 ELSE 1 END AS HasAttachmentFlg",
                                  ",FallFlg AS FallFlg",
                                  ",MedicationErrorFlg AS MedicationErrorFlg",
                                  ",AbuseFlg AS AbuseFlg",
                                  ",PropertyFlg AS PropertyFlg",
                                  ",ExposureFlg AS ExposureFlg",
                                  ",BehaviorFlg AS BehaviorFlg",
                                  ",ElopementFlg AS ElopementFlg",
                                  ",AccidentFlg AS AccidentFlg",
                                  ",InjuryFlg AS InjuryFlg",
                                  ",IllnessFlg AS IllnessFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeDeath.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeDeathFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeHospital.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeHospitalFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeUnconscious.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeUnconsciousFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseDrugFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeNoMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFirstAid.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFirstAidFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseFamilyReactionFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeResidentRefused.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeResidentRefusedTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeOther.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeOtherFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMS.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMSFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMT.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMTTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFamilyTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomePending.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomePendingFlg",
                                  ",CASE WHEN  tblIncident.FallFlg\t\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.MedicationErrorFlg\t\t!= 1",
                                  "\t\tAND\ttblIncident.AbuseFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.PropertyFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.ExposureFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.BehaviorFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.ElopementFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.AccidentFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.InjuryFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.IllnessFlg\t\t\t\t!= 1 THEN 1",
                                  "\t\tELSE 0",
                                  "\t\tEND AS UntypedFlg",
                                  "FROM BusinessData.Incident.tblIncident tblIncident",
                                  "INNER JOIN BusinessData.ARM.tblCommunity tblCommunity",
                                  "\t\tON tblCommunity.CommunityNumber = tblIncident.CommunityNumber",
                                  "INNER JOIN BusinessData.ARM.tblCustomer tblCustomer",
                                  "\t\tON tblCustomer.CustomerID = tblIncident.CustomerID",
                                  "INNER JOIN BusinessData.Incident.lu_IncidentType luIncidentType",
                                  "\t\tON luIncidentType.Incident_TypeID = tblIncident.Incident_TypeID",
                                  "INNER JOIN BusinessData.Incident.lu_IncidentStatus luStatus",
                                  "\t\tON luStatus.Incident_StatusID = tblIncident.Incident_StatusID",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncidentDocument lnkIncidentDocument",
                                  "\t\tON lnkIncidentDocument.IncidentID = tblIncident.IncidentID",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeDeath",
                                  "\t\tON lnkIncident_OutcomeDeath.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeDeath.OutcomeSeverityID = 1",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeHospital",
                                  "\t\tON lnkIncident_OutcomeHospital.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeHospital.OutcomeSeverityID = 2",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeUnconscious",
                                  "\t\tON lnkIncident_OutcomeUnconscious.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeUnconscious.OutcomeSeverityID = 3",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeAdverseDrug",
                                  "\t\tON lnkIncident_OutcomeAdverseDrug.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID = 4",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeNoMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeNoMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID = 5",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID = 6",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeFallWithInjury",
                                  "\t\tON lnkIncident_OutcomeFallWithInjury.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFallWithInjury.OutcomeSeverityID = 7",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeFirstAid",
                                  "\t\tON lnkIncident_OutcomeFirstAid.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFirstAid.OutcomeSeverityID = 8",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeAdverseFamily",
                                  "\t\tON lnkIncident_OutcomeAdverseFamily.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID = 9",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeResidentRefused",
                                  "\t\tON lnkIncident_OutcomeResidentRefused.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeResidentRefused.OutcomeSeverityID = 10",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeOther",
                                  "\t\tON lnkIncident_OutcomeOther.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeOther.OutcomeSeverityID = 11",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeEMS",
                                  "\t\tON lnkIncident_OutcomeEMS.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMS.OutcomeSeverityID = 16",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeEMT",
                                  "\t\tON lnkIncident_OutcomeEMT.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMT.OutcomeSeverityID = 17",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomeFamilyTransport",
                                  "\t\tON lnkIncident_OutcomeFamilyTransport.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID = 18",
                                  "LEFT JOIN  BusinessData.Incident.lnkIncident_Outcome lnkIncident_OutcomePending",
                                  "\t\tON lnkIncident_OutcomePending.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomePending.OutcomeSeverityID = 19",
                                  "WHERE\ttblIncident.ActiveFlg = 1",
                                  "AND\t\tDATEDIFF(DD, IncidentDate, GETDATE()) \u003c= 365",
                                  "ORDER BY IncidentVersion",
                                  "\t\t,IncidentID ASC",
                                  "",
                                  ";",
                                  "store [mstrIncident] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrIncident.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [mstrIncident];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "iPod Descriptive Tables",
        "LoadScriptContent":  [
                                  "$tab iPod Descriptive Tables",
                                  "//All of the descriptive tables for the iPod data in Transformation.",
                                  "tblCommunityResourceRole:",
                                  "LOAD CommunityResourceRoleID,",
                                  "// \tResourceRole,",
                                  "\tResourceRoleID;",
                                  "",
                                  "SQL SELECT",
                                  "CommunityResourceRoleID,",
                                  "ResourceRole,",
                                  "ResourceRoleID",
                                  "FROM BusinessData.ACM.tblCommunityResourceRole;",
                                  "store [tblCommunityResourceRole] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblCommunityResourceRole.qvd](qvd);",
                                  "Drop Table [tblCommunityResourceRole];",
                                  "",
                                  "luADLStatus:",
                                  "LOAD ADLStatusID,",
                                  "ADLStatus",
                                  ";",
                                  "",
                                  "SQL SELECT",
                                  "\tADLStatusID,",
                                  "\tADLStatus",
                                  "FROM BusinessData.ACM.luADLStatus",
                                  "WHERE ActiveFlg = 1;",
                                  "store [luADLStatus] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luADLStatus.qvd](qvd);",
                                  "Drop Table [luADLStatus];",
                                  "",
                                  "luResourceRole:",
                                  "LOAD ResourceRoleID,",
                                  "\tResourceRole;",
                                  "SELECT",
                                  "\tResourceRoleID,",
                                  "\tResourceRole",
                                  "FROM BusinessData.ACM.luResourceRole",
                                  "WHERE ActiveFlg = 1;",
                                  "store [luResourceRole] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luResourceRole.qvd](qvd);",
                                  "Drop Table [luResourceRole];",
                                  "",
                                  "luServiceCode:",
                                  "LOAD ServiceCodeID,",
                                  "\tDescription;",
                                  "SELECT",
                                  "\tServiceCodeID,",
                                  "\tDescription",
                                  "FROM BusinessData.ACM.luServiceCode",
                                  "WHERE ActiveFlg = 1;",
                                  "store [luServiceCode] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luServiceCode.qvd](qvd);",
                                  "Drop Table [luServiceCode];",
                                  "",
                                  "luADLType:",
                                  "LOAD ADLTypeID,",
                                  "\tADLType;",
                                  "SELECT",
                                  "\tADLTypeID,",
                                  "\tADLType",
                                  "FROM BusinessData.ACM.luADLType",
                                  "WHERE ActiveFlg = 1;",
                                  "store [luADLType] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luADLType.qvd](qvd);",
                                  "Drop Table [luADLType];",
                                  "",
                                  "luResidentADLProcessReason:",
                                  "LOAD ResidentADLProcessReasonID,",
                                  "\tResidentADLProcessReason;",
                                  "SQL SELECT",
                                  "\tResidentADLProcessReasonID,",
                                  "\tResidentADLProcessReason",
                                  "FROM BusinessData.CareManagement.luResidentADLProcessReason",
                                  "WHERE ActiveFlg = 1;",
                                  "store [luResidentADLProcessReason] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luResidentADLProcessReason.qvd](qvd);",
                                  "Drop Table [luResidentADLProcessReason];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "iPod Tasks Addressed",
        "LoadScriptContent":  [
                                  "$tab iPod Tasks Addressed",
                                  "/Addressed Tasks Only (in the trn table). Including Resident Assessed Tasks, Resident Additional Tasks, Community Tasks (as of 7.26.19 this was all ADL Type IDs) ",
                                  "/\t\t\twhere ActiveFlg=1.",
                                  "iPodTasksAddressed:",
                                  "LOAD ",
                                  "trnResidentADLID,",
                                  "CustomerID,",
                                  "Description,",
                                  "ADLDT,",
                                  "CreateBy,",
                                  "ModifyBy,",
                                  "ModifyDT,",
                                  "EmplUserName,",
                                  "ApplicationID,",
                                  "ADLTime,",
                                  "ADLTimeComplete,",
                                  "ResidentADLProcessReasonID,",
                                  "ADLTypeID,",
                                  "ADLStatusID,",
                                  "ServiceCodeID,",
                                  "TimeIntervalID,",
                                  "CommunityResourceRoleID,",
                                  "CommunityResourceRole,",
                                  "CustomScheduleADLID",
                                  ";",
                                  "",
                                  "SQL SELECT DISTINCT ",
                                  "ISNULL(ResidentADLID, trnResidentADL.trnResidentADLID) trnResidentADLID,",
                                  "trnResidentADL.CustomerID,",
                                  "trnResidentADL.CommunityID,",
                                  "trnResidentADL.Description,",
                                  "ADLDT,",
                                  "trnResidentADL.CreateBy,",
                                  "trnResidentADL.ModifyBy,",
                                  "trnResidentADL.ModifyDT,",
                                  "EmplUserName,",
                                  "ApplicationID,",
                                  "trnResidentADL.ADLTime,",
                                  "ADLTimeComplete,",
                                  "ApplicationID,",
                                  "ResidentADLProcessReasonID,",
                                  "ADLTypeID,",
                                  "ADLStatusID,",
                                  "trnResidentScheduleADL.ServiceCodeID,",
                                  "CASE\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002707:00:00.0000000\u0027 AND \u002714:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentADL.CommunityResourceRoleID IS NOT NULL AND trnResidentScheduleADL.ResourceRole IS NOT NULL THEN trnResidentScheduleADL.ResourceRole + \u0027 Days\u0027",
                                  "\t\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002715:00:00.0000000\u0027 AND \u002722:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentADL.CommunityResourceRoleID IS NOT NULL AND trnResidentScheduleADL.ResourceRole IS NOT NULL THEN trnResidentScheduleADL.ResourceRole + \u0027 Evenings\u0027",
                                  "\t\tWHEN (CAST(ADLDT AS TIME) BETWEEN \u002723:00:00.0000000\u0027 AND \u002723:45:00.0000000\u0027 OR CAST(ADLDT AS TIME) BETWEEN \u002700:00:00.0000000\u0027 AND \u002706:45:00.0000000\u0027) AND tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentADL.CommunityResourceRoleID IS NOT NULL AND trnResidentScheduleADL.ResourceRole IS NOT NULL THEN trnResidentScheduleADL.ResourceRole + \u0027 Nights\u0027",
                                  "\t\tWHEN tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentScheduleADL.ResourceRole IS NULL THEN \u0027Unassigned\u0027",
                                  "\t\tELSE tblCommunityResourceRole.ResourceRole END AS CommunityResourceRole,",
                                  "ISNULL(trnResidentADL.CommunityResourceRoleID, 0) CommunityResourceRoleID,",
                                  "TimeIntervalID,",
                                  "CustomScheduleADLID",
                                  "FROM BusinessData.ACM.trnResidentADL trnResidentADL",
                                  "LEFT JOIN\tBusinessData.ACM.tblCommunityResourceRole tblCommunityResourceRole",
                                  "ON\t\t\ttblCommunityResourceRole.CommunityResourceRoleID = trnResidentADL.CommunityResourceRoleID",
                                  "LEFT JOIN\tBusinessData.ACM.trnResidentScheduleADL trnResidentScheduleADL",
                                  "ON\t\t\ttrnResidentScheduleADL.ResidentScheduleID = trnResidentADL.ResidentScheduleID AND trnResidentScheduleADL.ModelQuestionID = trnResidentADL.ModelQuestionID AND trnResidentScheduleADL.ModelAnswerID = trnResidentADL.ModelAnswerID",
                                  "WHERE ",
                                  "ADLDT \u003e=\u0027$(vmindatetasks)\u0027 and ADLDT \u003c=\u0027$(vmaxdatetasks)\u0027",
                                  "AND trnResidentADL.ActiveFlg = 1",
                                  "AND ADLTypeID IN (1, 2, 3)",
                                  "ORDER BY [CommunityResourceRole]",
                                  ";",
                                  "",
                                  "store [iPodTasksAddressed] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_iPodTasksAddressed.qvd](qvd);",
                                  "Drop Table [iPodTasksAddressed];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "iPod Tasks Open",
        "LoadScriptContent":  [
                                  "$tab iPod Tasks Open",
                                  "/Open Tasks Only (in the tbl table). Including Resident Assessed Tasks, Resident Additional Tasks, Community Tasks (as of 7.26.19 this was all ADL Type IDs) ",
                                  "/\t\t\twhere ActiveFlg=1.",
                                  "iPodTasksOpen:",
                                  "",
                                  "LOAD ",
                                  "ResidentADLID, ",
                                  "CustomerID ,",
                                  "Description,",
                                  "ADLDT,",
                                  "CreateBy,",
                                  "ADLTime,",
                                  "ADLTypeID,",
                                  "ADLStatusID,",
                                  "ServiceCodeID,",
                                  "TimeIntervalID,",
                                  "CommunityResourceRoleID,",
                                  "CommunityResourceRole,",
                                  "CustomScheduleADLID",
                                  "",
                                  ";",
                                  "",
                                  "SQL ",
                                  "SELECT DISTINCT ",
                                  "tblResidentADL.ResidentADLID,",
                                  "tblResidentADL.CustomerID,",
                                  "tblResidentADL.CommunityID,",
                                  "tblResidentADL.Description,",
                                  "ADLDT,",
                                  "tblResidentADL.CreateBy,",
                                  "tblResidentADL.ModifyBy,",
                                  "tblResidentADL.ModifyDT,",
                                  "EmplUserName,",
                                  "ApplicationID,",
                                  "tblResidentADL.ADLTime,",
                                  "ADLTimeComplete,",
                                  "ApplicationID,",
                                  "ResidentADLProcessReasonID,",
                                  "ADLTypeID,",
                                  "ADLStatusID,",
                                  "trnResidentScheduleADL.ServiceCodeID,",
                                  "CASE\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002707:00:00.0000000\u0027 AND \u002714:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentADL.CommunityResourceRoleID IS NOT NULL AND trnResidentScheduleADL.ResourceRole IS NOT NULL THEN trnResidentScheduleADL.ResourceRole + \u0027 Days\u0027",
                                  "\t\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002715:00:00.0000000\u0027 AND \u002722:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentADL.CommunityResourceRoleID IS NOT NULL AND trnResidentScheduleADL.ResourceRole IS NOT NULL THEN trnResidentScheduleADL.ResourceRole + \u0027 Evenings\u0027",
                                  "\t\tWHEN (CAST(ADLDT AS TIME) BETWEEN \u002723:00:00.0000000\u0027 AND \u002723:45:00.0000000\u0027 OR CAST(ADLDT AS TIME) BETWEEN \u002700:00:00.0000000\u0027 AND \u002706:45:00.0000000\u0027) AND tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentADL.CommunityResourceRoleID IS NOT NULL AND trnResidentScheduleADL.ResourceRole IS NOT NULL THEN trnResidentScheduleADL.ResourceRole + \u0027 Nights\u0027",
                                  "\t\tWHEN tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentScheduleADL.ResourceRole IS NULL THEN \u0027Unassigned\u0027",
                                  "\t\tELSE tblCommunityResourceRole.ResourceRole END AS CommunityResourceRole,",
                                  "ISNULL(tblResidentADL.CommunityResourceRoleID, 0) CommunityResourceRoleID,",
                                  "TimeIntervalID,",
                                  "CustomScheduleADLID",
                                  "FROM BusinessData.ACM.tblResidentADL tblResidentADL",
                                  "LEFT JOIN\tBusinessData.ACM.tblCommunityResourceRole tblCommunityResourceRole",
                                  "ON\t\t\ttblCommunityResourceRole.CommunityResourceRoleID = tblResidentADL.CommunityResourceRoleID",
                                  "LEFT JOIN\tBusinessData.ACM.trnResidentScheduleADL trnResidentScheduleADL",
                                  "ON\t\t\ttrnResidentScheduleADL.ResidentScheduleID = tblResidentADL.ResidentScheduleID AND trnResidentScheduleADL.ModelQuestionID = tblResidentADL.ModelQuestionID AND trnResidentScheduleADL.ModelAnswerID = tblResidentADL.ModelAnswerID",
                                  "WHERE ",
                                  "ADLDT \u003e=\u0027$(vmindatetasks)\u0027 and ADLDT \u003c=\u0027$(vmaxdatetasks)\u0027",
                                  "AND tblResidentADL.ActiveFlg = 1",
                                  "AND ADLTypeID IN (1, 2, 3)",
                                  ";",
                                  "",
                                  "store [iPodTasksOpen] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_iPodTasksOpen.qvd](qvd);",
                                  "Drop Table [iPodTasksOpen];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Lease Segment",
        "LoadScriptContent":  [
                                  "$tab Lease Segment",
                                  "LeaseSegment:",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.\"Resident\".factResidentLeaseSegment;",
                                  "",
                                  "store [LeaseSegment] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factLeaseSegment.qvd](qvd);",
                                  "",
                                  "Drop Table [LeaseSegment];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Main",
        "LoadScriptContent":  [
                                  "$tab Main",
                                  "SET ThousandSep=\u0027,\u0027;",
                                  "SET DecimalSep=\u0027.\u0027;",
                                  "SET MoneyThousandSep=\u0027,\u0027;",
                                  "SET MoneyDecimalSep=\u0027.\u0027;",
                                  "SET MoneyFormat=\u0027$#,##0.00;($#,##0.00)\u0027;",
                                  "SET TimeFormat=\u0027hh:mm:ss.mmm\u0027;",
                                  "SET DateFormat=\u0027M/D/YYYY\u0027;",
                                  "SET TimestampFormat=\u0027M/D/YYYY h:mm:ss[.fff] TT\u0027;",
                                  "SET FirstWeekDay=0;",
                                  "SET BrokenWeeks=1;",
                                  "SET ReferenceDay=0;",
                                  "SET FirstMonthOfYear=1;",
                                  "SET CollationLocale=\u0027en-US\u0027;",
                                  "SET CreateSearchIndexOnReload=0;",
                                  "SET MonthNames=\u0027Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec\u0027;",
                                  "SET LongMonthNames=\u0027January;February;March;April;May;June;July;August;September;October;November;December\u0027;",
                                  "SET DayNames=\u0027Mon;Tue;Wed;Thu;Fri;Sat;Sun\u0027;",
                                  "SET LongDayNames=\u0027Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday\u0027;",
                                  "",
                                  "// This is our data warehouse connection",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "// set vmindate=\u00271/1/2015\u0027;",
                                  "let vmindate=date(Yearstart(Today(),-2));",
                                  "let vmindate2=date(YearStart(Today(),-3)); //FOR INQUIRIES",
                                  "let vmindate3=date(YearStart(Today(),-1));",
                                  "let vmaxdate=date(today()+90);",
                                  "let vmaxdate2=Date(YearEnd(Today())+365);",
                                  "let vmindatetasks = date(Floor(Today()-30));",
                                  "let vmaxdatetasks = date(floor(today()-1));",
                                  "let vT12monthstart = date(floor(MonthStart(today(),-12)));",
                                  "let vnext4monthend = Date(Floor(MonthStart(Today(),5)));",
                                  "let vToday = Date(Floor(Today()));",
                                  "let vnext60day = Date(Floor(Today()+60));",
                                  "let vCurrentYear = Year(Today()-1);",
                                  "let vPriorYear = Year(YearStart(Today()-1,-1));",
                                  "",
                                  "",
                                  "//This is a QlikView extract script created by Chris Reynolds and Sanela Graziose on 4/27/2017",
                                  "",
                                  "// FROM [[lib://DataShare (atria_sanela.graziose)/Test.xlsx]",
                                  "// (ooxml, embedded labels, table is Sheet1);"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstr Customer",
        "LoadScriptContent":  [
                                  "$tab mstr Customer",
                                  "[mstrCustomerWithAdditional]:",
                                  "",
                                  "LOAD",
                                  "\t*",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT KeyID,",
                                  "\tmstrCustomer.CustomerID,",
                                  "    mstrCustomer.CommunityID,",
                                  "    CommunityNumber,",
                                  "    mstrCustomer.InquiryID,",
                                  "    BillingID,",
                                  "    CustomerAccountTypeID,",
                                  "    CustomerType,",
                                  "    \"Resident\",",
                                  "    Address1,",
                                  "    Address2,",
                                  "    City,",
                                  "    State,",
                                  "    PostalCode,",
                                  "    Country,",
                                  "    Longitude,",
                                  "    Latitude,",
                                  "    StatusID,",
                                  "    Gender,",
                                  "    BirthDT,",
                                  "    CreateDT,",
                                  "    ApplicationURL,",
                                  "    ReplicaDT",
                                  "FROM AtriaDW.Master.mstrCustomer",
                                  "Left Join \t(Select CommunityID, InquiryID, CustomerID, CustomerAccountTypeID FROM BusinessData.ARM.tblCustomer) tblCustomer",
                                  "ON\t\t\ttblCustomer.CommunityID = mstrCustomer.CommunityID",
                                  "AND\t\t\ttblCustomer.InquiryID = mstrCustomer.InquiryID",
                                  "AND\t\t\ttblCustomer.CustomerID = mstrCustomer.CustomerID",
                                  "// WHERE\t\ttblCustomer.CustomerAccountTypeID=1",
                                  ";",
                                  "",
                                  "store [mstrCustomerWithAdditional] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomerWithAdditionalRmAcct.qvd](qvd);",
                                  "",
                                  "mstrCustomer:",
                                  "NoConcatenate",
                                  "LOAD *",
                                  "Resident mstrCustomerWithAdditional",
                                  "Where CustomerAccountTypeID = 1;",
                                  "",
                                  "store [mstrCustomer] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd](qvd);",
                                  "",
                                  "Drop Tables [mstrCustomer], mstrCustomerWithAdditional;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstrB2B",
        "LoadScriptContent":  [
                                  "$tab mstrB2B",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "LOAD *;",
                                  "",
                                  "[mstrCorporation]:",
                                  "SELECT ",
                                  "*",
                                  "FROM AtriaDW.Sales.mstrCorporation;",
                                  "",
                                  "store [mstrCorporation] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCorporation.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrCorporation];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstrCompetitor",
        "LoadScriptContent":  [
                                  "$tab mstrCompetitor",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "mstrCompetitor:",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Pricing.mstrCompetitor;",
                                  "",
                                  "store [mstrCompetitor] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCompetitor.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrCompetitor];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstrCompetitorToCommunity",
        "LoadScriptContent":  [
                                  "$tab mstrCompetitorToCommunity",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "mstrCompetitorToCommunity:",
                                  "LOAD CommunityToCompetitorID,",
                                  "    CommunityID,",
                                  "    CompetitorID,",
                                  "    CareTypeID",
                                  "//     ActiveFlg,",
                                  "//     CreateBy,",
                                  "//     CreateDT,",
                                  "//     ModifyBy,",
                                  "//     ModifyDT,",
                                  "//     EffectiveDT,",
                                  "//     StatusID,",
                                  "//     ApplicationID",
                                  "    Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT *",
                                  "FROM BusinessData.PricingManagement.lnkCommunityToCompetitor",
                                  "Where ActiveFlg=1 and StatusID=1;",
                                  "",
                                  "/Table does not have CommunityID, which is needed in Transformation (other tables use those fields instead of ID)",
                                  "Left Join (mstrCompetitorToCommunity)",
                                  "LOAD CommunityID,",
                                  "    CommunityNumber;",
                                  "SQL SELECT CommunityID,",
                                  "    CommunityNumber",
                                  "FROM AtriaDW.Master.mstrCommunity;",
                                  "",
                                  "/Table does not have CareType or CareTypeCode, which is needed in Transformation (other tables use those fields instead of ID)",
                                  "Left Join (mstrCompetitorToCommunity)",
                                  "LOAD CareTypeID,",
                                  "    CareType,",
                                  "//     ImageURL,",
                                  "//     CreateDate,",
                                  "//     ActiveFlg,",
                                  "//     CreateBy,",
                                  "    Code as CareTypeCode;",
                                  "SQL SELECT *",
                                  "FROM BusinessData.ARM.luCareType;",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "store [mstrCompetitorToCommunity] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCompetitorToCommunity.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrCompetitorToCommunity];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstrContact",
        "LoadScriptContent":  [
                                  "$tab mstrContact",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "[mstrContact]:",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Sales.mstrContact;",
                                  "",
                                  "store [mstrContact] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrContact.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrContact];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstrInquiry",
        "LoadScriptContent":  [
                                  "$tab mstrInquiry",
                                  "mstrInquiry:",
                                  "LOAD",
                                  "\t*",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT ",
                                  "*",
                                  "FROM AtriaDW.Sales.mstrInquiry;",
                                  "",
                                  "store [mstrInquiry] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrInquiry.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrInquiry];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "mstrJobCategory",
        "LoadScriptContent":  [
                                  "$tab mstrJobCategory",
                                  "mstrJobCategory:",
                                  "LOAD",
                                  "// mstrJobCategoryID,",
                                  "//     JobCategoryID,",
                                  "    JobCategory,",
                                  "    JobCode,",
                                  "    JobTitle,",
                                  "    isCommunityDepartmentHeadFLG;",
                                  "//     Sort,",
                                  "//     PropertyTypeID,",
                                  "//     PropertyType,",
                                  "//     ReplicaDT;",
                                  "SQL SELECT ",
                                  "// mstrJobCategoryID,",
                                  "//     JobCategoryID,",
                                  "    JobCategory,",
                                  "    JobCode,",
                                  "    JobTitle,",
                                  "    isCommunityDepartmentHeadFLG",
                                  "//     Sort,",
                                  "//     PropertyTypeID,",
                                  "//     PropertyType,",
                                  "//     ReplicaDT",
                                  "FROM AtriaDW.Master.mstrJobCategory;",
                                  "// where isCommunityDepartmentHeadFLG=1",
                                  "// and JobCategory\u003c\u003e\u0027Senior Engage Life Director\u0027;",
                                  "",
                                  "store [mstrJobCategory] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrJobCategory.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrJobCategory];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "One Stream",
        "LoadScriptContent":  [
                                  "$tab One Stream",
                                  "temp_Communities:",
                                  "LOAD",
                                  "    Left(CommunityNumber,5) as [%CommunityKey],",
                                  "    CommunityNumber as CommCode",
                                  "; SQL SELECT ",
                                  "    CommunityNumber,",
                                  "    Year,",
                                  "    Account",
                                  "FROM AtriaDW.OneStream.factDataRecordByYear",
                                  "Where Left(CommunityNumber,2) = \u002710\u0027 and (Year=\u0027$(vCurrentYear)\u0027 or Year=\u0027$(vPriorYear)\u0027) and Account in (\u0027400100\u0027);",
                                  "",
                                  "Concatenate(temp_Communities)",
                                  "LOAD",
                                  "    Left(CommunityNumber,5) as [%CommunityKey],",
                                  "    CommunityNumber as CommCode",
                                  "; SQL SELECT ",
                                  "    CommunityNumber,",
                                  "    Year,",
                                  "    Account",
                                  "FROM AtriaDW.OneStream.factDataRecordByYear",
                                  "Where CommunityNumber in (\u002728681\u0027, \u002710174\u0027, \u002710184\u0027, \u002710121\u0027, \u002710163\u0027) and Year=\u0027$(vCurrentYear)\u0027; //and Account in (\u0027600100\u0027);",
                                  "",
                                  "[temp_OS]:",
                                  "LOAD",
                                  "    CommunityNumber as %CommunityCode,",
                                  "    NUM(Left(CommunityNumber,5)) as %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "//     Flow,",
                                  "//     FlowDescription,",
                                  "    Year,",
                                  "    Sum(M1Value) as M1Value,",
                                  "    Sum(M2Value) as M2Value,",
                                  "    Sum(M3Value) as M3Value,",
                                  "    Sum(M4Value) as M4Value,",
                                  "    Sum(M5Value) as M5Value,",
                                  "    Sum(M6Value) as M6Value,",
                                  "    Sum(M7Value) as M7Value,",
                                  "    Sum(M8Value) as M8Value,",
                                  "    Sum(M9Value) as M9Value,",
                                  "    Sum(M10Value) as M10Value,",
                                  "    Sum(M11Value) as M11Value,",
                                  "    Sum(M12Value) as M12Value",
                                  "Where\t(",
                                  "\t\t\t((Not Exists(CommunityExclude, Left(CommunityNumber,5))) and Exists(CommunityInclude, Left(CommunityNumber,5)))",
                                  "\t\t\tor (CommunityNumber=\u002728681\u0027 or CommunityNumber=\u002710174\u0027 or CommunityNumber=\u002710184\u0027 or CommunityNumber=\u002710121\u0027 or CommunityNumber=\u002710163\u0027)",
                                  "\t\t)",
                                  "and ((NOT(ISNUM(Account)) and NOT(WildMatch(Account,\u0027AVEOCCUNITS\u0027, \u0027AVEUNITS\u0027, \u0027FTENEN\u0027, \u0027FTENET\u0027, \u0027FTECALC\u0027,\u0027FTEEX\u0027,\u0027FTEHOT\u0027,\u0027FTENER\u0027, \u0027FTEOT\u0027)))",
                                  "or( ISNUM(Account) and Account\u003e=400000))",
                                  "Group By ",
                                  "    CommunityNumber,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "//     Flow,",
                                  "//     FlowDescription,",
                                  "    Year",
                                  "; SQL SELECT ",
                                  "    CommunityNumber,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Flow,",
                                  "//     FlowDescription,",
                                  "\t\"Year\",",
                                  "    M1Value,",
                                  "    M2Value,",
                                  "    M3Value,",
                                  "    M4Value,",
                                  "    M5Value,",
                                  "    M6Value,",
                                  "    M7Value,",
                                  "    M8Value,",
                                  "    M9Value,",
                                  "    M10Value,",
                                  "    M11Value,",
                                  "    M12Value",
                                  "FROM AtriaDW.OneStream.factDataRecordByYear",
                                  "Where",
                                  "    (Left(CommunityNumber,2) = \u002710\u0027 OR CommunityNumber = \u002728681\u0027)",
                                  "    and (Len(CommunityNumber)=5 or (Len(CommunityNumber)=7 and CommunityNumber like \u0027%CB\u0027) or CommunityNumber like \u0027%WH\u0027 or CommunityNumber like \u0027%CAWH\u0027 ",
                                  "    \tor CommunityNumber like \u002710309ALL\u0027 or CommunityNumber like \u002710323ALL\u0027 or CommunityNumber like \u002710358ALL\u0027 or CommunityNumber like \u002710467ALL\u0027 or CommunityNumber like \u002710059ALL\u0027 or CommunityNumber like \u002710763ALL\u0027)",
                                  "    and Account not in (\u0027AVEOCCUNITS\u0027, \u0027AVEUNITS\u0027, \u0027FTENEN\u0027, \u0027FTENET\u0027, \u0027FTECALC\u0027,\u0027FTEEX\u0027,\u0027FTEHOT\u0027,\u0027FTENER\u0027, \u0027FTEOT\u0027)",
                                  "    and CurrencyIDMember in (\u0027USD\u0027, \u0027CAD\u0027)",
                                  "    and Flow = \u0027EndBal_Load\u0027",
                                  ";",
                                  "",
                                  "INNER JOIN (temp_OS)",
                                  "LOAD distinct ",
                                  "%CommunityKey,",
                                  "\t\tIf(Match([%CommunityKey], \u002710309\u0027, \u002710308\u0027), \u002710309ALL\u0027, ",
                                  "       \tIf(Match([%CommunityKey], \u002710467\u0027, \u002710476\u0027), \u002710467ALL\u0027, ",
                                  "       \tIf(Match([%CommunityKey], \u002710323\u0027, \u002710324\u0027), \u002710323ALL\u0027, ",
                                  "       \tIf(Match([%CommunityKey], \u002710358\u0027, \u002710377\u0027), \u002710358ALL\u0027, ",
                                  "        If(Match([%CommunityKey], \u002710058\u0027, \u002710059\u0027), \u002710059ALL\u0027, ",
                                  "       \tIf(Match([%CommunityKey], \u002710763\u0027, \u002710764\u0027), \u002710763ALL\u0027,",
                                  "       \tIf(Exists(CommCode,[%CommunityKey]\u0026\u0027CAWH\u0027),[%CommunityKey]\u0026\u0027CAWH\u0027,",
                                  "    \tIf(Exists(CommCode,[%CommunityKey]\u0026\u0027WH\u0027),[%CommunityKey]\u0026\u0027WH\u0027,",
                                  "        If(Exists(CommCode,[%CommunityKey]\u0026\u0027CB\u0027),[%CommunityKey]\u0026\u0027CB\u0027,",
                                  "        [%CommunityKey]))))))))) as %CommunityCode",
                                  "       ",
                                  "Resident temp_Communities",
                                  "Where ((Not Exists(CommunityExclude, %CommunityKey) and Exists(CommunityInclude, %CommunityKey))",
                                  "\t\tor %CommunityKey=\u002728681\u0027 or %CommunityKey= \u002710174\u0027 or %CommunityKey= \u002710184\u0027 or %CommunityKey=\u002710121\u0027 or [%CommunityKey]=\u002710163\u0027);",
                                  "",
                                  "Drop Table temp_Communities;",
                                  "",
                                  "store [temp_OS] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd](qvd);",
                                  "Drop Table [temp_OS];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Product Inventory",
        "LoadScriptContent":  [
                                  "$tab Product Inventory",
                                  "[mstrProductInventory]:",
                                  "    LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Pricing.mstrProductInventory",
                                  "Left Join (Select ProductInventoryID as ProductInventoryID2, DailyRate, SemiPrivateRate, isModelRoomFlg FROM BusinessData.ARM.\"vwProductInventory_1\") vwProductInventory",
                                  "ON vwProductInventory.ProductInventoryID2 = mstrProductInventory.ProductInventoryID;",
                                  "",
                                  "Drop Field ProductInventoryID2 from mstrProductInventory;",
                                  "",
                                  "store [mstrProductInventory] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrProductInventory.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrProductInventory];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "PSFINAUX Culinary Spend",
        "LoadScriptContent":  [
                                  "$tab PSFINAUX Culinary Spend",
                                  "mstrCommunity:",
                                  "LOAD",
                                  "    CommunityInclude",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "LIB CONNECT TO \u0027PSFINAUX\u0027;",
                                  "PSFINCulinarySpend:",
                                  "LOAD  DrillBackJournalDetailID,",
                                  "     \"BUSINESS_UNIT\",",
                                  "     \"JOURNAL_ID\",",
                                  "     \"JOURNAL_DATE\",",
                                  "//     \"UNPOST_SEQ\",",
                                  "//     \"JOURNAL_LINE\",",
                                  "//     \"LEDGER_GROUP\",",
                                  "//     LEDGER,",
                                  "//     \"DISTRIB_LINE_NUM\",",
                                  "//     \"BUSINESS_UNIT_IU\",",
                                  "//     SOURCE,",
                                  "     \"LINE_DESCR\",",
                                  "//     \"JRNL_LN_REF\",",
                                  "//     OPRID,",
                                  "//     SETID,",
                                  "//     \"VENDOR_ID\",",
                                  "//     \"INVOICE_ID\",",
                                  "//     \"INVOICE_DT\",",
                                  "//     \"GRP_AP_ID\",",
                                  "     DESCR,",
                                  "//     \"ENTERED_BY\",",
                                  "//     \"ENTERED_DT\",",
                                  "//     \"BUSINESS_UNIT_BI\",",
                                  "//     INVOICE,",
                                  "//     \"LINE_SEQ_NUM\",",
                                  "//     \"BILL_TO_CUST_ID\",",
                                  "//     \"BILL_OF_LADING\",",
                                  "     ACCOUNT,",
                                  "     DEPTID,",
                                  "//     CHARTFIELD1,",
                                  "//     CHARTFIELD2,",
                                  "//     AFFILIATE,",
                                  "//     \"PROJECT_ID\",",
                                  "//     \"ACTIVITY_ID\",",
                                  "//     \"RESOURCE_TYPE\",",
                                  "     \"MONETARY_AMOUNT\",",
                                  "//     \"CURRENCY_CD\",",
                                  "//     \"FOREIGN_AMOUNT\",",
                                  "//     \"FOREIGN_CURRENCY\",",
                                  "//     \"FISCAL_YEAR\",",
                                  "//     \"ACCOUNTING_PERIOD\",",
                                  "//     \"JRNL_HDR_STATUS\",",
                                  "//     \"STATISTIC_AMOUNT\",",
                                  "//     \"CUSTOMER_NAME\",",
                                  "     \"VENDOR_NAME\"",
                                  "    Where Exists(CommunityInclude, BUSINESS_UNIT) or Match(BUSINESS_UNIT,\u002710184\u0027,\u002710174\u0027,\u002728681\u0027);",
                                  "SQL SELECT DrillBackJournalDetailID,",
                                  "     \"BUSINESS_UNIT\",",
                                  "     \"JOURNAL_ID\",",
                                  "     \"JOURNAL_DATE\",",
                                  "//     \"UNPOST_SEQ\",",
                                  "//     \"JOURNAL_LINE\",",
                                  "//     \"LEDGER_GROUP\",",
                                  "//     LEDGER,",
                                  "//     \"DISTRIB_LINE_NUM\",",
                                  "//     \"BUSINESS_UNIT_IU\",",
                                  "//     SOURCE,",
                                  "     \"LINE_DESCR\",",
                                  "//     \"JRNL_LN_REF\",",
                                  "//     OPRID,",
                                  "//     SETID,",
                                  "//     \"VENDOR_ID\",",
                                  "//     \"INVOICE_ID\",",
                                  "//     \"INVOICE_DT\",",
                                  "//     \"GRP_AP_ID\",",
                                  "     DESCR,",
                                  "//     \"ENTERED_BY\",",
                                  "//     \"ENTERED_DT\",",
                                  "//     \"BUSINESS_UNIT_BI\",",
                                  "//     INVOICE,",
                                  "//     \"LINE_SEQ_NUM\",",
                                  "//     \"BILL_TO_CUST_ID\",",
                                  "//     \"BILL_OF_LADING\",",
                                  "     ACCOUNT,",
                                  "     DEPTID,",
                                  "//     CHARTFIELD1,",
                                  "//     CHARTFIELD2,",
                                  "//     AFFILIATE,",
                                  "//     \"PROJECT_ID\",",
                                  "//     \"ACTIVITY_ID\",",
                                  "//     \"RESOURCE_TYPE\",",
                                  "     \"MONETARY_AMOUNT\",",
                                  "//     \"CURRENCY_CD\",",
                                  "//     \"FOREIGN_AMOUNT\",",
                                  "//     \"FOREIGN_CURRENCY\",",
                                  "//     \"FISCAL_YEAR\",",
                                  "//     \"ACCOUNTING_PERIOD\",",
                                  "//     \"JRNL_HDR_STATUS\",",
                                  "//     \"STATISTIC_AMOUNT\",",
                                  "//     \"CUSTOMER_NAME\",",
                                  "     \"VENDOR_NAME\"",
                                  "FROM PSFINAUX.OneStream.DrillBackJournalDetail",
                                  "",
                                  "WHERE",
                                  "",
                                  "ACCOUNT IN (\u0027500100\u0027, \u0027500110\u0027, \u0027500120\u0027, \u0027500130\u0027, \u0027500140\u0027, \u0027500141\u0027, \u0027500150\u0027, \u0027510100\u0027, \u0027510110\u0027, \u0027511100\u0027, ",
                                  "\u0027511110\u0027, \u0027511120\u0027, \u0027512100\u0027, \u0027512110\u0027, \u0027512130\u0027, \u0027513100\u0027, \u0027513110\u0027, \u0027513120\u0027, \u0027513130\u0027, \u0027513140\u0027, \u0027513888\u0027, \u0027513903\u0027, ",
                                  "\u0027513904\u0027, \u0027600100\u0027, \u0027600105\u0027, \u0027600110\u0027, \u0027600115\u0027, \u0027600120\u0027, \u0027600125\u0027, \u0027600130\u0027, \u0027600140\u0027, \u0027600141\u0027, \u0027600142\u0027, \u0027600143\u0027, ",
                                  "\u0027600144\u0027, \u0027600145\u0027, \u0027600146\u0027, \u0027600147\u0027, \u0027600148\u0027, \u0027600149\u0027, \u0027600150\u0027, \u0027610100\u0027, \u0027610110\u0027, \u0027610120\u0027, \u0027610130\u0027, \u0027610140\u0027, ",
                                  "\u0027610160\u0027, \u0027610170\u0027, \u0027610180\u0027, \u0027610184\u0027, \u0027610190\u0027, \u0027611100\u0027, \u0027611115\u0027, \u0027621150\u0027, \u0027621900\u0027, \u0027621901\u0027, \u0027621903\u0027, \u0027622900\u0027, ",
                                  "\u0027631100\u0027, \u0027760100\u0027, \u0027760104\u0027, \u0027760105\u0027) AND",
                                  "JOURNAL_DATE \u003e= \u0027$(vmindate3)\u0027 AND",
                                  "LEDGER = \u0027ACTUAL\u0027",
                                  "",
                                  "",
                                  ";",
                                  "",
                                  "Store [PSFINCulinarySpend] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd](qvd);",
                                  "drop table [PSFINCulinarySpend];",
                                  "drop table mstrCommunity;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "QE Descriptive Tables",
        "LoadScriptContent":  [
                                  "$tab QE Descriptive Tables",
                                  "/All of the Descriptive QE tables that will be used for POC and to grab the current Question Text",
                                  "QEtblQuestion:",
                                  "LOAD QuestionID,",
                                  "    Question;",
                                  "SQL SELECT QuestionID,",
                                  "    Question",
                                  "FROM BusinessData.QMS.tblQuestion;",
                                  "store [QEtblQuestion] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_QEtblQuestion.qvd](qvd);",
                                  "Drop Table [QEtblQuestion];",
                                  "",
                                  "",
                                  "",
                                  "QElnkQuestionToChoiceType:",
                                  "LOAD QuestionID,",
                                  "    ChoiceTypeID;",
                                  "SQL SELECT tblQuestionExtension.QuestionExtensionID,",
                                  "    QuestionID,",
                                  "    SurveyID,",
                                  "    ChoiceTypeID",
                                  "FROM BusinessData.QMS.tblQuestionExtension",
                                  "left join (",
                                  "\tSelect \tQuestionExtensionID,",
                                  "    \t\tChoiceTypeID ",
                                  "\tFROM BusinessData.QMS.lnkChoiceTypeToQuestion) lnkChoiceTypeToQuestion",
                                  "ON lnkChoiceTypeToQuestion.QuestionExtensionID = tblQuestionExtension.QuestionExtensionID",
                                  ";",
                                  "store [QElnkQuestionToChoiceType] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_QElnkQuestionToChoiceType.qvd](qvd);",
                                  "Drop Table [QElnkQuestionToChoiceType];",
                                  "",
                                  "",
                                  "",
                                  "QEluPlanOfCorrectionResponseStatus:",
                                  "LOAD ",
                                  "PlanOfCorrectionResponseStatusID,",
                                  "    Status;",
                                  "//     CreateDT,",
                                  "//     CreateBy,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     ActiveFlg;",
                                  "SQL SELECT PlanOfCorrectionResponseStatusID,",
                                  "    Status",
                                  "//     CreateDT,",
                                  "//     CreateBy,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     ActiveFlg",
                                  "FROM BusinessData.QE.luPlanOfCorrectionResponseStatus;",
                                  "store [QEluPlanOfCorrectionResponseStatus] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_QEluPlanOfCorrectionResponseStatus.qvd](qvd);",
                                  "Drop Table [QEluPlanOfCorrectionResponseStatus];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "RAM Tables",
        "LoadScriptContent":  [
                                  "$tab RAM Tables",
                                  "// RAM assignments for positions with HasCommunityResponsibilityFlg = 1. SQL taken from store proc RAM.AssignmentGet",
                                  "RAMTEMP:",
                                  "LOAD NetworkID,",
                                  "\tNetwork,",
                                  "    ChannelID,",
                                  "    Channel,",
                                  "    PositionID,",
                                  "    RoleId as RoleID,",
                                  "    Role,",
                                  "    Description,",
                                  "    ParentRoleID,",
                                  "    AssignmentID,",
                                  "    EmployeeID,",
                                  "    Coalesce(Trim(Employee), \u0027Unassigned\u0027) as Employee,",
                                  "    Coalesce(Trim(Capitalize(Username)), \u0027Unassigned\u0027) as UserName,",
                                  "    CommunityNumber,",
                                  "    EditedBy,",
                                  "    HasCommunityResponsibilityFlg",
                                  ";",
                                  "SQL SELECT\t\t\t ",
                                  "\t\t\t\t tblPosition.NetworkID",
                                  "\t\t\t\t,isNull(luNetwork.Network, \u0027--\u0027) as Network",
                                  "\t\t\t\t,luNetwork.Sort as NetworkSort",
                                  "\t\t\t\t,tblPosition.ChannelID",
                                  "\t\t\t\t,isNull(luChannel.Channel, \u0027--\u0027) as Channel",
                                  "\t\t\t\t,luChannel.Sort as ChannelSort",
                                  "\t\t\t\t--,tblPosition.TierID",
                                  "\t\t\t\t--,isNull(luTier.Tier, \u0027--\u0027) as Tier",
                                  "\t\t\t\t--,luTier.Sort as TierSort",
                                  "\t\t\t\t,tblPosition.PositionID",
                                  "\t\t\t\t,tblPosition.RoleId",
                                  "\t\t\t\t,isNull(luRole.Role, \u0027--\u0027) as Role",
                                  "\t\t\t\t,tblPosition.Description",
                                  "\t\t\t\t,luRole.Sort as RoleSort",
                                  "\t\t\t\t,tblPosition.ParentRoleID",
                                  "\t\t\t\t,isNull(luParentRole.Role, \u0027--\u0027) as ParentRole",
                                  "\t\t\t\t,tblAssignment.AssignmentID",
                                  "\t\t\t\t,tblAssignment.EmployeeID",
                                  "\t\t\t\t,ISNULL(tblEmployees.NickName, tblEmployees.FirstName) + \u0027 \u0027 + tblEmployees.LastName as Employee",
                                  "\t\t\t\t--,tblEmployees.JobTitle",
                                  "\t\t\t\t--,tblEmployees.JobCode",
                                  "\t\t\t\t,tblEmployees.Username",
                                  "\t\t\t\t--,isNull(RSPositionCommunityCount.CommunityCount, 0 ) as CommunityCount",
                                  "\t\t\t\t,tblCommunity.CommunityID",
                                  "\t\t\t\t,tblCommunity.CommunityNumber",
                                  "\t\t\t\t,tblCommunity.CommunityName",
                                  "\t\t\t\t,ISNULL(lnkCommunityToAssignment.ModifyBy, lnkCommunityToAssignment.CreateBy) as EditedBy",
                                  "\t\t\t\t,tblPosition.HasCommunityResponsibilityFlg -- 01/31/2018 Fritz Kern - Added HasCommunityResponsibilityFlg",
                                  "FROM\t\t\tBusinessData.RAM.tblPosition",
                                  "INNER JOIN\t\tBusinessData.RAM.luNetwork",
                                  "ON\t\t\t\ttblPosition.NetworkID = luNetwork.NetworkID",
                                  "INNER JOIN\t\tBusinessData.RAM.luChannel",
                                  "ON\t\t\t\ttblPosition.ChannelID = luChannel.ChannelID",
                                  "LEFT JOIN\t\tBusinessData.RAM.luTier",
                                  "ON\t\t\t\ttblPosition.TierID = luTier.TierID",
                                  "LEFT JOIN\t\tBusinessData.RAM.luRole",
                                  "ON\t\t\t\ttblPosition.RoleID = luRole.RoleID",
                                  "-- 01/19/2018 Fritz Kern - Removing as we are no longer linking position and community.",
                                  "--LEFT JOIN\t\tRAM.lnkCommunityToPosition lnkCommunityToPosition ",
                                  "--ON\t\t\t\ttblPosition.PositionID = lnkCommunityToPosition.PositionID",
                                  "LEFT JOIN\t\tBusinessData.RAM.luRole luParentRole",
                                  "ON\t\t\t\ttblPosition.ParentRoleID = luParentRole.RoleID",
                                  "LEFT JOIN\t\t(",
                                  "\t\t\t\t\tselect\t tblAssignment.AssignmentID",
                                  "\t\t\t\t\t\t\t,tblAssignment.PositionID",
                                  "\t\t\t\t\t\t\t,tblAssignment.EmployeeID",
                                  "\t\t\t\t\t\t\t,tblAssignment.StartDT",
                                  "\t\t\t\t\t\t\t,tblAssignment.EndDT",
                                  "\t\t\t\t\t\t\t,RANK() OVER (\tPARTITION BY\t tblAssignment.PositionID",
                                  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,tblAssignment.EmployeeID \t\t\t",
                                  "\t\t\t\t\t\t\t\t\t\t\tORDER BY\t\t tblAssignment.PositionID",
                                  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,tblAssignment.EmployeeID \t\t\t\t\t\t\t",
                                  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,StartDT desc\t\t",
                                  "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,AssignmentID desc\t",
                                  "\t\t\t\t\t\t\t\t\t\t\t)\t \t\t\t\t\t\t\t\t\t",
                                  "\t\t\t\t\t\t\t\t\t\t\tAS [RANK]\t",
                                  "\t\t\t\t\tfrom\tBusinessData.RAM.tblAssignment ",
                                  "\t\t\t\t) tblAssignment ",
                                  "ON\t\t\t\ttblPosition.PositionID = tblAssignment.PositionID",
                                  "AND\t\t\t\ttblAssignment.[RANK] = 1",
                                  "",
                                  "LEFT JOIN\t\tBusinessData.RAM.lnkCommunityToAssignment",
                                  "ON\t\t\t\ttblAssignment.AssignmentID = lnkCommunityToAssignment.AssignmentID",
                                  "AND\t\t\t\ttblPosition.HasCommunityResponsibilityFlg = 1",
                                  "LEFT JOIN\t\t(",
                                  "\t\t\t\t\tSelect\t tblCommunity.CommunityID",
                                  "\t\t\t\t\t\t\t,tblCommunity.CommunityNumber",
                                  "\t\t\t\t\t\t\t,tblCommunity.CommunityName",
                                  "\t\t\t\t\t\t\t,tblCommunity.CommunityName + \u0027 (\u0027 + tblCommunity.CommunityNumber + \u0027)\u0027 as Community",
                                  "\t\t\t\t\tfrom\tBusinessData.ARM.tblCommunity tblCommunity ",
                                  "\t\t\t\t\twhere\tactiveFlg = 1",
                                  "\t\t\t\t\tand\t\tPropertyTypeID = 1",
                                  "\t\t\t\t\t) tblCommunity ",
                                  "ON\t\t\t\tlnkCommunityToAssignment.CommunityID = tblCommunity.CommunityID",
                                  "LEFT JOIN\t\t(",
                                  "\t\t\t\t\tselect\t\t lnkCommunityToAssignment.AssignmentID ",
                                  "\t\t\t\t\t\t\t\t,Count(lnkCommunityToAssignment.AssignmentID) as CommunityCount -- 01/19/2018 Fritz Kern - Removed distinct so we could get a real count.",
                                  "\t\t\t\t\tfrom\t\tBusinessData.RAM.lnkCommunityToAssignment ",
                                  "\t\t\t\t\tgroup by\tlnkCommunityToAssignment.AssignmentID",
                                  "\t\t\t\t) RSPositionCommunityCount",
                                  "ON\t\t\t\ttblAssignment.AssignmentID = RSPositionCommunityCount.AssignmentID",
                                  "LEFT JOIN\t\tBusinessData.dbo.tblEmployees tblEmployees ",
                                  "ON\t\t\t\ttblAssignment.EmployeeID = tblEmployees.EmployeeID",
                                  "WHERE\t\t\ttblPosition.activeflg = 1",
                                  "AND\t\t\t\tluChannel.ActiveFlg = 1",
                                  "AND\t\t\t\tluNetwork.ActiveFlg = 1",
                                  "AND\t\t\t\t(lnkCommunityToAssignment.ActiveFlg is null OR lnkCommunityToAssignment.ActiveFlg = 1)",
                                  "AND\t\t\t\t(\t\t",
                                  "\t\t\t\t\t\t(DATEDIFF(d, tblAssignment.StartDT, GETDATE()) \u003e= 0 AND DATEDIFF(d, GETDATE(), ISNULL(tblAssignment.EndDT, GETDATE())) \u003e= 0)",
                                  "\t\t\t\t\tOR\ttblPosition.HasCommunityResponsibilityFlg = 0 ",
                                  "\t\t\t\t)",
                                  "ORDER BY\t\tluNetwork.Sort",
                                  "\t\t\t\t,luNetwork.Network",
                                  "\t\t\t\t,luChannel.Sort",
                                  "\t\t\t\t,luChannel.Channel",
                                  "\t\t\t\t,luTier.Sort",
                                  "\t\t\t\t,luTier.Tier",
                                  "\t\t\t\t,luRole.Sort",
                                  "\t\t\t\t,luRole.Role",
                                  "\t\t\t\t,UserName",
                                  "\t\t\t\t,CommunityName",
                                  ";",
                                  "",
                                  "",
                                  "// Inherited RAM assignments from child roles. First step, loading only positions without community responsibility and commenting out any fields associated with community assignment.",
                                  "InheritedRAM:",
                                  "NoConcatenate",
                                  "LOAD distinct NetworkID,",
                                  "\tNetwork,",
                                  "    ChannelID,",
                                  "    Channel,",
                                  "    PositionID,",
                                  "    RoleID,",
                                  "    Role,",
                                  "    Description,",
                                  "    HasCommunityResponsibilityFlg,",
                                  "    ParentRoleID,",
                                  "//     AssignmentID,",
                                  "    EmployeeID,",
                                  "    Employee,",
                                  "    UserName",
                                  "//     CommunityNumber,",
                                  "//     EditedBy",
                                  "Resident RAMTEMP",
                                  "Where HasCommunityResponsibilityFlg = 0;",
                                  "",
                                  "",
                                  "// second, joining with the ParentRoleID to grab all of the community assignments from the child position",
                                  "Left Join (InheritedRAM)",
                                  "LOAD NetworkID,",
                                  "    ChannelID,",
                                  "    ParentRoleID as RoleID,",
                                  "    AssignmentID,",
                                  "//     EmployeeID,",
                                  "//     Employee,",
                                  "//     UserName,",
                                  "    CommunityNumber,",
                                  "    EditedBy",
                                  "Resident RAMTEMP",
                                  "Where HasCommunityResponsibilityFlg = 1;",
                                  "",
                                  "// Grabbing the positions with community assignments first. Then concatenating with the inherited community assignments to get the full picture.",
                                  "RAM:",
                                  "NoConcatenate",
                                  "LOAD *",
                                  "Resident RAMTEMP",
                                  "Where Not Exists(CommunityExcludeHC, CommunityNumber) and Exists(CommunityIncludeHomeCare, CommunityNumber)",
                                  "AND HasCommunityResponsibilityFlg = 1;",
                                  "",
                                  "Concatenate(RAM)",
                                  "LOAD * Resident InheritedRAM",
                                  "Where Not Exists(CommunityExcludeHC, CommunityNumber) and Exists(CommunityIncludeHomeCare, CommunityNumber)",
                                  "AND HasCommunityResponsibilityFlg = 0;",
                                  "",
                                  "Drop Tables RAMTEMP, InheritedRAM;",
                                  "",
                                  "store [RAM] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd](qvd);",
                                  "Drop Table [RAM];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Reservation",
        "LoadScriptContent":  [
                                  "$tab Reservation",
                                  "[mstrReservation]:",
                                  "    LOAD",
                                  "    *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Sales.factReservation;",
                                  "",
                                  "store [mstrReservation] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrReservation.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrReservation];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Resident Care Ancillary",
        "LoadScriptContent":  [
                                  "$tab Resident Care Ancillary",
                                  "factResidentCareAncillary:",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Care.factResidentCareAncillary;",
                                  "",
                                  "store [factResidentCareAncillary] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentCareAncillary.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [factResidentCareAncillary];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Resident Care Primary",
        "LoadScriptContent":  [
                                  "$tab Resident Care Primary",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "factResidentCarePrimary:",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Care.factResidentCarePrimary;",
                                  "",
                                  "store [factResidentCarePrimary] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentCarePrimary.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [factResidentCarePrimary];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Resident Discovery",
        "LoadScriptContent":  [
                                  "$tab Resident Discovery",
                                  "map_gtky: \t   MAPPING LOAD * FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Resident Engagement/Discovery QIDs.xlsx] (ooxml, embedded labels, table is [GTKY]);",
                                  "map_discovery: MAPPING LOAD * FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Resident Engagement/Discovery QIDs.xlsx] (ooxml, embedded labels, table is [DISCOVERY]);",
                                  "",
                                  "GTKY_IDS: LOAD distinct Trim(Concat(distinct GTKYQuestionID \u0026 \u0027,\u0027)) as GTKY_IDS",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Resident Engagement/Discovery QIDs.xlsx] (ooxml, embedded labels, table is [GTKY])",
                                  "where not isNull(EmptyIsNull(GTKYQuestionID)) ;",
                                  "",
                                  "LET vGTKY_IDS = Left(PEEK(\u0027GTKY_IDS\u0027), LEN(PEEK(\u0027GTKY_IDS\u0027)) -1);",
                                  "",
                                  "fact_temp: ",
                                  "LOAD \u0027New\u0027 as FactType,",
                                  "\t%CustomerIDKey,",
                                  "\t %CommunityKey,",
                                  "\t Answer,",
                                  "     ResidentPreferenceID,",
                                  "\t ApplyMap(\u0027map_discovery\u0027, PreferenceQuestionID) as Question;",
                                  "SQL SELECT CustomerID as \"%CustomerIDKey\", ",
                                  "\t\t   CommunityNumber  as \"%CommunityKey\" ,",
                                  "\t\t   PreferenceAnswerTitle as Answer, ",
                                  "           PreferenceQuestionID ,",
                                  "           tblResidentPreference.ResidentPreferenceID",
                                  "    FROM BusinessData.ACM.tblResidentPreference",
                                  "\tLEFT JOIN BusinessData.ACM.tblResidentPreferenceResponse on tblResidentPreferenceResponse.ResidentPreferenceID = tblResidentPreference.ResidentPreferenceID",
                                  "    LEFT JOIN BusinessData.ARM.tblCommunity on tblResidentPreference.CommunityID = tblCommunity.CommunityID",
                                  "\tWHERE tblResidentPreferenceResponse.PreferenceID IN (6) AND tblResidentPreferenceResponse.ActiveFlg = 1;",
                                  "",
                                  "Concatenate (fact_temp) ",
                                  "LOAD  \t  %CustomerIDKey, ",
                                  " \t\t  %CommunityKey,",
                                  " \t\t  Answer,",
                                  "  \t      ResidentGTKYID,",
                                  " \t\t  ApplyMap(\u0027map_gtky\u0027,GTKYQuestionID) as Question",
                                  "WHERE NOT Exists([%CustomerIDKey]) AND Exists(GTKYQuestionID);",
                                  "SQL SELECT CustomerID \t\tas \"%CustomerIDKey\", ",
                                  "\t\t   CommunityNumber  as \"%CommunityKey\" ,",
                                  "\t\t   GTKYQuestionID, ",
                                  "           GTKYAnswerTitle as Answer,",
                                  "           tblResidentGTKY.ResidentGTKYID",
                                  "\tFROM BusinessData.ELM.tblResidentGTKY",
                                  "\tLEFT JOIN BusinessData.ELM.tblResidentGTKYResponse ON tblResidentGTKYResponse.ResidentGTKYID = tblResidentGTKY.ResidentGTKYID",
                                  "    LEFT JOIN BusinessData.ARM.tblCommunity ON tblResidentGTKY.CommunityID = tblCommunity.CommunityID",
                                  "    WHERE GTKYQuestionID in ($(vGTKY_IDS)) AND tblResidentGTKYResponse.ActiveFlg = 1;",
                                  "    ",
                                  "final_fact:  NoConcatenate LOAD DISTINCT * resident fact_temp;",
                                  "store final_fact into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ResidentDiscovery.qvd] (qvd);",
                                  "drop tables fact_temp, final_fact, GTKY_IDS;"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Resident Emergency Contact",
        "LoadScriptContent":  [
                                  "$tab Resident Emergency Contact",
                                  "// vwResidentEmergencyContact:",
                                  "// LOAD *",
                                  "// Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "// SQL SELECT *",
                                  "// FROM BusinessData.ResidentManagement.vwResidentEmergencyContact;",
                                  "",
                                  "// store [vwResidentEmergencyContact] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_vwResidentEmergencyContact.qvd](qvd);",
                                  "",
                                  "// Drop Table [vwResidentEmergencyContact];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Resident Move Out",
        "LoadScriptContent":  [
                                  "$tab Resident Move Out",
                                  "[factResidentMoveOut]:",
                                  "",
                                  "LOAD",
                                  "\t*",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "    select",
                                  "    *",
                                  "FROM AtriaDW.Resident.factResidentMoveOut;",
                                  "",
                                  "store [factResidentMoveOut] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOut.qvd](qvd);",
                                  "",
                                  "Drop Table [factResidentMoveOut];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "ResidentRoom",
        "LoadScriptContent":  [
                                  "$tab ResidentRoom",
                                  "[factResidentRoom]:",
                                  "LOAD ",
                                  "ResidentRoomID, ",
                                  "\tCommunityNumber, ",
                                  "\tProductInventoryID, ",
                                  "\tEffectiveDt, ",
                                  "\tCustomerID, ",
                                  "\tRoomNumber, ",
                                  "\tPayorID, ",
                                  "\tPayor, ",
                                  "\tRate, ",
                                  "\tEventType, ",
                                  "\tIsPhysicalPresentFlg,",
                                  "\tReplicaDT,",
                                  "    factResidentRoomRank",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "SELECT *,",
                                  "CASE WHEN EffectiveDT\u003c= GetDate() THEN RANK() OVER (PARTITION BY CommunityNumber, CustomerID, CASE WHEN EffectiveDT\u003c= GetDate() THEN 1 ELSE 0 END",
                                  "\t\t\t\tORDER BY EffectiveDT Desc) ELSE 0 END as factResidentRoomRank",
                                  "FROM AtriaDW.Resident.factResidentRoom;",
                                  "",
                                  "store [factResidentRoom] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentRoom.qvd](qvd);",
                                  "",
                                  "Drop Table [factResidentRoom];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Responsible Party",
        "LoadScriptContent":  [
                                  "$tab Responsible Party",
                                  "mstrResponsibleParty:",
                                  "",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Master.mstrResponsibleParty;",
                                  "",
                                  "store [mstrResponsibleParty] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrResponsibleParty.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrResponsibleParty];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Revenue",
        "LoadScriptContent":  [
                                  "$tab Revenue",
                                  "factRevenueByMoveIn:",
                                  "",
                                  "LOAD ",
                                  "*",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM AtriaDW.Revenue.factBonusRevenue",
                                  "left join ",
                                  "\t(Select distinct ",
                                  "    \t\t CustomerID as CustomerIDMoveIn",
                                  "            ,MoveInDT as FinancialMoveInDT",
                                  "            ,PhysicalMoveInDT",
                                  "            ,RANK() OVER( Partition By CustomerID, cast(MoveInDT as date) order by CreateDT desc, ResidentMoveInID desc) as Ranking",
                                  "\tfrom BusinessData.ARM.tblResidentMoveIn where ActiveFlg=1) tblResidentMI",
                                  "on \t\ttblResidentMI.CustomerIDMoveIn = factBonusRevenue.CustomerID ",
                                  "\tand cast(tblResidentMI.FinancialMoveInDT as date) = cast(factBonusRevenue.MoveInDt as date) ",
                                  "    and Ranking=1",
                                  "",
                                  "where factBonusRevenue.moveindt\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "Drop Fields CustomerIDMoveIn, FinancialMoveInDT, Ranking from factRevenueByMoveIn;",
                                  "",
                                  "store [factRevenueByMoveIn] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd](qvd);",
                                  "",
                                  "Drop Table [factRevenueByMoveIn];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Scheduled Move Out",
        "LoadScriptContent":  [
                                  "$tab Scheduled Move Out",
                                  "factResidentMoveOutSchedule:",
                                  "",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber)",
                                  ";",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Resident.factResidentMoveOutSchedule",
                                  "where MoveOutDT\u003e=\u0027$(vToday)\u0027 and MoveOutDT\u003c=\u0027$(vnext60day)\u0027;",
                                  "",
                                  "store [factResidentMoveOutSchedule] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd](qvd);",
                                  "",
                                  "Drop Table [factResidentMoveOutSchedule];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Score Card",
        "LoadScriptContent":  [
                                  "$tab Score Card",
                                  "factScoreCard:",
                                  "",
                                  "LOAD ",
                                  "*",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "SQL SELECT ",
                                  "*",
                                  "FROM AtriaDW.Sales.mstrScoreCard;",
                                  "",
                                  "store [factScoreCard] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factScoreCard.qvd](qvd);",
                                  "",
                                  "Drop Table [factScoreCard];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "STL",
        "LoadScriptContent":  [
                                  "$tab STL",
                                  "Where ReturnDT is null because we only want current outstanding STL.",
                                  "mstrSTL:",
                                  "LOAD *",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.\"Resident\".factShortTermLeave",
                                  "Where ReturnDT is null;",
                                  "",
                                  "store [mstrSTL] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrSTL.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [mstrSTL];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "tab_order.txt",
        "LoadScriptContent":  [
                                  "Main%tab_file_order_divider%dimDate%tab_file_order_divider%Exclusions%tab_file_order_divider%Communities%tab_file_order_divider%ALZ 1%tab_file_order_divider%Community Product Tiers%tab_file_order_divider%factCompetitorToRatingByWeek%tab_file_order_divider%factCompetitorToRating%tab_file_order_divider%mstrCompetitorToCommunity%tab_file_order_divider%mstrCompetitor%tab_file_order_divider%factCompetitorToPriceByCareByRoomTypeStyle%tab_file_order_divider%ResidentRoom%tab_file_order_divider%Resident Discovery%tab_file_order_divider%  NICMAP_Portfolios%tab_file_order_divider%  NICMAP_CBSA_Trends%tab_file_order_divider%RAM Tables%tab_file_order_divider%QE Descriptive Tables%tab_file_order_divider%Generator List%tab_file_order_divider%Scheduled Move Out%tab_file_order_divider%iPod Descriptive Tables%tab_file_order_divider%iPod Tasks Addressed%tab_file_order_divider%iPod Tasks Open%tab_file_order_divider%Care Concierge%tab_file_order_divider%Product Inventory%tab_file_order_divider%  Product Inventory Business Data%tab_file_order_divider%mstrJobCategory%tab_file_order_divider%tblEventHistory - Respite Activity%tab_file_order_divider%factInquiryByReferral%tab_file_order_divider%Tour Activity%tab_file_order_divider%mstrInquiry%tab_file_order_divider%1.1 eLead Creation Journal Activity%tab_file_order_divider%1.2 Journal Activity%tab_file_order_divider%User%tab_file_order_divider%Employees%tab_file_order_divider%  1st of Month   Occupancy%tab_file_order_divider%Forecast by Operator%tab_file_order_divider%Revenue%tab_file_order_divider%mstrB2B%tab_file_order_divider%mstrContact%tab_file_order_divider%B2B Activity%tab_file_order_divider%CommunityToCorporation%tab_file_order_divider%Reservation%tab_file_order_divider%Business Data tblReservation%tab_file_order_divider%Auto Apply Move Ins%tab_file_order_divider%Community Trip Report%tab_file_order_divider%Community Trip Report Detail%tab_file_order_divider%Community Trip Report POC%tab_file_order_divider%Community Review%tab_file_order_divider%Community Review Score%tab_file_order_divider%Community Review Detail%tab_file_order_divider%Community Review POC%tab_file_order_divider%mstr Customer%tab_file_order_divider%Resident Move Out%tab_file_order_divider%Lease Segment%tab_file_order_divider%CSS%tab_file_order_divider%CSS Response Rate%tab_file_order_divider%ESS%tab_file_order_divider%Resident Care Primary%tab_file_order_divider%Resident Care Ancillary%tab_file_order_divider%Incident%tab_file_order_divider%STL%tab_file_order_divider%Responsible Party%tab_file_order_divider%Resident Emergency Contact%tab_file_order_divider%tblResidentAssessment%tab_file_order_divider%Score Card%tab_file_order_divider%One Stream%tab_file_order_divider%Drop mstrCommunity%tab_file_order_divider%PSFINAUX Culinary Spend%tab_file_order_divider%  Rate Increase Room%tab_file_order_divider%  Rate Increase Care Services"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "tblEventHistory - Respite Activity",
        "LoadScriptContent":  [
                                  "$tab tblEventHistory - Respite Activity",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/Step 1: Identify Customers with any events that list their payor as \"Respite\" at the time of the event.",
                                  "PastRespiteResidents:",
                                  "LOAD distinct \"comm_no\",",
                                  "    CustomerID",
                                  "Where Not Exists(CommunityExclude, comm_no) and Exists(CommunityInclude, comm_no);",
                                  "SQL SELECT \"comm_no\",",
                                  "    CustomerID,",
                                  "    PayorID,",
                                  "    eventTypeID",
                                  "FROM BusinessData.ARM.tblEventHistory",
                                  "where PayorID=19 and CustomerID is not null;",
                                  "",
                                  "store [PastRespiteResidents] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PastRespiteResidentEvents.qvd](qvd);",
                                  "",
                                  "Drop Table [PastRespiteResidents];",
                                  "",
                                  "",
                                  "/Step 2: Identify Customers with any events that list their payor as non-Respite at the time of the event. Eventually, we want to identify who was a respite and never",
                                  "/converted to a permanent resident.",
                                  "PastNonRespiteResidents:",
                                  "LOAD distinct \"comm_no\",",
                                  "    CustomerID",
                                  "Where Not Exists(CommunityExclude, comm_no) and Exists(CommunityInclude, comm_no);",
                                  "SQL SELECT \"comm_no\",",
                                  "    CustomerID,",
                                  "    PayorID,",
                                  "    eventTypeID",
                                  "FROM BusinessData.ARM.tblEventHistory",
                                  "where PayorID\u003c\u003e19 and CustomerID is not null;",
                                  "",
                                  "",
                                  "store [PastNonRespiteResidents] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PastNonRespiteResidentEvents.qvd](qvd);",
                                  "",
                                  "Drop Table [PastNonRespiteResidents];",
                                  "/ Conversion is not what we want to use because in many cases communities will incorrectly move someone out and then move back in as a resident.",
                                  "/ Additionally, a respite could move out and move back in later as a permanent resident.",
                                  "// RespiteToResidentConversionEvents:",
                                  "// LOAD distinct \"comm_no\",",
                                  "//     CustomerID",
                                  "// Where Not Exists(CommunityExclude, comm_no) and Exists(CommunityInclude, comm_no);",
                                  "// SQL SELECT \"comm_no\",",
                                  "//     CustomerID,",
                                  "//     PayorID,",
                                  "//     eventTypeID",
                                  "// FROM BusinessData.ARM.tblEventHistory",
                                  "// where eventTypeID=26 and CustomerID is not null;",
                                  "",
                                  "",
                                  "// store [RespiteToResidentConversionEvents] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RespiteToResidentConversionEvents.qvd](qvd);",
                                  "",
                                  "// Drop Table [RespiteToResidentConversionEvents];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "tblResidentAssessment",
        "LoadScriptContent":  [
                                  "$tab tblResidentAssessment",
                                  "tblResidentAssessment:",
                                  "LOAD CustomerID,",
                                  "\tCommunityID,",
                                  "    Date(Floor(LastAssessedDate)) as LastAssessedDate,",
                                  "    ResidentAssessmentCount,",
                                  "    RecentAssessmentID",
                                  "Where Not Exists(CommunityIDExclude, CommunityID) and Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT CustomerID",
                                  "\t\t,CommunityID",
                                  "        ,Max(AssessmentDT) as LastAssessedDate",
                                  "        ,Count(Distinct ResidentAssessmentID) as ResidentAssessmentCount",
                                  "        ,Max(ResidentAssessmentID) as RecentAssessmentID",
                                  "FROM BusinessData.ACM.tblResidentAssessment",
                                  "Where ActiveFlg=1",
                                  "Group by CustomerID, CommunityID;",
                                  "",
                                  "/Joining to get Community Number because we join on that in most of our transformation tables.",
                                  "Left Join (tblResidentAssessment)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "store [tblResidentAssessment] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ResidentAssessmentByCustomerCommunity.qvd](qvd);",
                                  "",
                                  "Drop Table [tblResidentAssessment];",
                                  "",
                                  "tblResidentAssessment:",
                                  "LOAD CustomerID,",
                                  "    Date(Floor(LastAssessedDate)) as LastAssessedDate,",
                                  "    ResidentAssessmentCount,",
                                  "    RecentAssessmentID",
                                  ";",
                                  "SQL SELECT CustomerID",
                                  "        ,Max(AssessmentDT) as LastAssessedDate",
                                  "        ,Count(Distinct ResidentAssessmentID) as ResidentAssessmentCount",
                                  "        ,Max(ResidentAssessmentID) as RecentAssessmentID",
                                  "FROM BusinessData.ACM.tblResidentAssessment",
                                  "Where ActiveFlg=1",
                                  "Group by CustomerID;",
                                  "",
                                  "",
                                  "store [tblResidentAssessment] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ResidentAssessmentByCustomer.qvd](qvd);",
                                  "",
                                  "Drop Table [tblResidentAssessment];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "Tour Activity",
        "LoadScriptContent":  [
                                  "$tab Tour Activity",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "factInquiryTourActivity:",
                                  "LOAD*",
                                  "Where Not Exists(CommunityExclude, CommunityNumber) and Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM AtriaDW.Sales.factInquiryTourActivity;",
                                  "",
                                  "store [factInquiryTourActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryTourActivity.qvd](qvd);",
                                  "",
                                  "Drop Table [factInquiryTourActivity];"
                              ]
    },
    {
        "App":  "Atria-Extract",
        "Section":  "User",
        "LoadScriptContent":  [
                                  "$tab User",
                                  "[mstrUser]:",
                                  "",
                                  "LOAD *",
                                  "// Where Not Exists(CommunityExclude, CommunityNumber)",
                                  "// and Exists(CommunityInclude, CommunityNumber)",
                                  ";",
                                  "",
                                  "SELECT *",
                                  "FROM AtriaDW.Master.mstrUser;",
                                  "",
                                  "/Normally would add this to transformation, but do not have transformation for this table. Wanted Report To fields.",
                                  "Left Join (mstrUser)",
                                  "LOAD DISTINCT \"ADP_EmployeeID\" as EMPLID,",
                                  "    ReportToUsername,",
                                  "    ReportToPosition;",
                                  "SQL SELECT \"ADP_EmployeeID\",",
                                  "    ReportToUsername,",
                                  "    ReportToPosition",
                                  "FROM BusinessData.dbo.tblEmployees;",
                                  "",
                                  "store [mstrUser] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrUser];",
                                  "// USING FOR JOBCODE IN COMMUNITYREVIEW TRANSFORMATION TABLES AND IN THE VP SALES INCENTIVIZER TO DETERMINE WHICH COMM THEY HAVE. REMOVED COMM RESTRICTIONS FOR THIS REASON."
                              ]
    },
    {
        "App":  "Atria-OpsCall",
        "Section":  "Communities",
        "LoadScriptContent":  [
                                  "$tab Communities",
                                  "[mstrCommunity]:",
                                  "LOAD",
                                  "*,",
                                  "IF(WildMatch(%CommunityKey, 10847) or WildMatch(Brand, \u0027Coterie\u0027), 1, 0) as ExcludeBonusFlg,",
                                  "IF(WildMatch(Division, \u0027HOL*\u0027), 1, 0) as ExcludeOtherMetricsFlg,",
                                  "IF(WildMatch(Division, \u0027HOL*\u0027) or Wildmatch(CommunityCountry,\u0027CAN\u0027), 1, 0) as HolidayBonusPictureFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "Atria-OpsCall",
        "Section":  "dimDate",
        "LoadScriptContent":  [
                                  "$tab dimDate",
                                  "//\tload only the date field from our fact table. name it to a new field",
                                  "temp:",
                                  "load [%DateKey] as RangeDate\t//\tsource field should be the m/d/yyyy field from your fact table.",
                                  "resident  FactTable;",
                                  "",
                                  "//\tMinMaxDate finds the lowest and highest dates from the dates.",
                                  "//\tThis has been proven to work much faster than a typical group by on your transaction table.",
                                  "MinMaxDate:  ",
                                  "load min(RangeDate) as MinDate,  ",
                                  "\tmax(RangeDate) as MaxDate;  ",
                                  "load fieldvalue(\u0027RangeDate\u0027,iterno()) as RangeDate ",
                                  "autogenerate(1) while not isnull(fieldvalue(\u0027RangeDate\u0027,iterno()));  ",
                                  " ",
                                  "drop table temp;\t//\tno need to retain",
                                  "",
                                  "let varMinDate=date(peek(\u0027MinDate\u0027,0,\u0027MinMaxDate\u0027));",
                                  "let varMaxDate=date(peek(\u0027MaxDate\u0027,0,\u0027MinMaxDate\u0027));",
                                  "",
                                  "drop table MinMaxDate;\t//\tno need to retain",
                                  "",
                                  "dimDate:",
                                  "LOAD",
                                  "   MonthName\u0026\u0027 \u0027\u0026Year\u0026\u0027 #\u0027\u0026if(DayOfMonth \u003c 15, 1 ,  2) as ReviewPeriod, //from RNR app",
                                  "   IF(Match(DayOfWeekInMonth, 1, 3) and WildMatch(DayName, \u0027Thursday\u0027), 1, 0) as ReviewDateFlg, //from RNR app",
                                  "   ",
                                  "   IF(QuarterStart(Today()) = QuarterStart(%DateKey) and %DateKey \u003c= Today(), 1, 0) as CurrentQuarterSelect, //from RNR app",
                                  "    EffectiveDT,",
                                  "    %DateKey,",
                                  "    WeekStartMonday,",
                                  "    FullDateUSA,",
                                  "    DayOfMonth,",
                                  "    MonthDayCount,",
                                  "    DaySuffix,",
                                  "    \"DayName\",",
                                  "    DayOfWeekUSA,",
                                  "    DayOfWeekInMonth,",
                                  "    DayOfWeekInYear,",
                                  "    DayOfQuarter,",
                                  "    DayOfYear,",
                                  "    WeekOfMonth,",
                                  "    WeekOfQuarter,",
                                  "    WeekOfYear,",
                                  "    \"Month\",",
                                  "    \"MonthName\",",
                                  "    MonthOfQuarter,",
                                  "    Quarter,",
                                  "    \"QuarterName\",",
                                  "    IF(Quarter=1, \u0027Q1\u0027, IF(Quarter=2, \u0027Q2\u0027, IF(Quarter=3,\u0027Q3\u0027, IF(Quarter=4, \u0027Q4\u0027)))) AS QuarterPeriod,",
                                  "    \"Year\",",
                                  "    \"YearName\",",
                                  "    MonthYear,",
                                  "    MMYYYY,",
                                  "    FirstDayOfMonth,",
                                  "    LastDayOfMonth,",
                                  "    FirstDayOfQuarter,",
                                  "    LastDayOfQuarter,",
                                  "    FirstDayOfYear,",
                                  "    LastDayOfYear,",
                                  "    IsHolidayUSA,",
                                  "    IsWeekday,",
                                  "    HolidayUSA",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_dimDate.qvd]",
                                  "(qvd) where EffectiveDT \u003e=\u0027$(varMinDate)\u0027 and EffectiveDT \u003c=\u0027$(varMaxDate)\u0027;"
                              ]
    },
    {
        "App":  "Atria-OpsCall",
        "Section":  "FactTable",
        "LoadScriptContent":  [
                                  "$tab FactTable",
                                  "BPRAccounts:",
                                  "LOAD",
                                  "    AccountGroup,",
                                  "    Account as AccountInclude",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Onestream/BPR Accounts.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "FactTable:",
                                  "LOAD \u0027OneStream\u0027 as FactType,",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    %DateKey,",
                                  "    Amount,",
                                  "    AlternativeRevenueEntity",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_OneStream.qvd]",
                                  "(qvd)",
                                  "Where \tWildMatch(Scenario, \u0027Actual\u0027, \u0027OP_Current\u0027) and ",
                                  "\t\tExists(AccountInclude, Account) AND",
                                  "        [%DateKey] \u003e= Date(YearStart(Today(),-1));",
                                  "        ",
                                  "Left Join (FactTable)",
                                  "LOAD",
                                  "    if(Wildmatch(AccountGroup, \u0027440210\u0027,\u0027400160\u0027,\u0027400180\u0027),\u0027MI Incentives\u0027, AccountGroup) as AccountGroup,",
                                  "    Account",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Onestream/BPR Accounts.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "Drop Table BPRAccounts;",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD \u0027Inquiries\u0027 as FactType,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    %InquiryID,",
                                  "    LastStatusEffectiveDT,",
                                  "    Status,",
                                  "    ContactID,",
                                  "    \"Inquirer Dashboard\",",
                                  "    %DateKey,",
                                  "    DateOfInquiry,",
                                  "    ActiveCRMStatus,",
                                  "    StatusCategory,",
                                  "    InquiryStatusDate,",
                                  "    InquiryName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd)",
                                  "Where [%DateKey] \u003e= Date(YearStart(Today(),-1));",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD \u0027Occupancy\u0027 as FactType,",
                                  "%CommunityKey,",
                                  "%DateKey,",
                                  "M_UnitMoveIns",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factUnitOccupancyByMonth.qvd]",
                                  "(qvd)",
                                  "Where [%DateKey] \u003e= Date(YearStart(Today(),-1));",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD IF(ISNULL(FactType), \u0027RNR\u0027, \u0027NoResidents\u0027) as FactType,",
                                  "    %CustomerIDKey,",
                                  "\tSTLDeparture,",
                                  "\tSTLActualReturn,",
                                  "\tSTLExpectedReturn,",
                                  "    EmployeeID,",
                                  "    ResidentReviewNeedID,",
                                  "    ResidentReviewID,",
                                  "    %DateKey,",
                                  "    DaysBetween,",
                                  "    ReviewCreateDT,",
                                  "    CustomerID,",
                                  "    NeedCreateDT,",
                                  "    NeedModifyDT,",
                                  "    Need,",
                                  "    ResidentStatus,",
                                  "    ResidentStatusID,",
                                  "    CareType,",
                                  "    CareTypeFinal,",
                                  "    BillingID,",
                                  "    ResidentName,",
                                  "    %CommunityKey,",
                                  "    ResidentReviewTaskID,",
                                  "    FollowUpStatusID,",
                                  "    FollowUpStatus,",
                                  "    FollowUpStatusDT,",
                                  "    FollowUpDueDT,",
                                  "    Outcome,",
                                  "    FollowUpCreateDT,",
                                  "    FollowUpModifyDT,",
                                  "    FollowUp,",
                                  "    JobTitle,",
                                  "    UserName,",
                                  "    NoCustomers,",
                                  "    NoCustomersPresent",
                                  "//     currentLocation",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_RNR.qvd]",
                                  "(qvd)",
                                  ";",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD \u0027MoveIns\u0027 as FactType,",
                                  "*",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_factRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD \u0027ProductInventory\u0027 as FactType,",
                                  "    ProductInventoryID,",
                                  "    %CommunityKey,",
                                  "    [%CommunityKey] as IncludeCommunity,",
                                  "    RoomNumber,",
                                  "    RoomType,",
                                  "    RoomTypeStyleCode,",
                                  "    CareType,",
                                  "//     GrossUnitArea,",
                                  "    IsOccupiedFlg,",
                                  "    IsReservedFlg,",
                                  "    If (IsReservedFlg=1,\u0027Reserved\u0027,\u0027Not Reserved\u0027) as ReservedStatus,",
                                  "   ",
                                  "//     IsVacancyScheduledFlg,",
                                  "//     IsSemiPrivateResidentFlg,",
                                  "    VacancyScheduledDT,",
                                  "    M_DaysVacant,",
                                  "    IsRoomReadyFlg,",
                                  "    If (IsRoomReadyFlg=1,\u0027Rent Ready\u0027,\u0027Not Rent Ready\u0027) as RentReadyStatus,",
                                  "    Grade,",
                                  "    StreetRate",
                                  "//     SpecialRate,",
                                  "//     IsOfflineFlg,",
                                  "//     OfflineDT,",
                                  "//     OfflineReason,",
                                  "//     OfflineNote,",
                                  "//     OnlineDT,",
                                  "//     OnlineDTEstimate,",
                                  "//     OnlineReason,",
                                  "//     RoomNote,",
                                  "//     SemiRate,",
                                  "//     RespiteRate,",
                                  "//     IsModelRoomFlg,",
                                  "//     Gender",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrProductInventory.qvd]",
                                  "(qvd)",
                                  "Where IsOfflineFlg = 0; //exclude offline and Newport Terrace",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD \u0027Hires\u0027 as FactType,",
                                  "    EMPLID,",
                                  "    Employee,",
                                  "    %CommunityKey,",
                                  "    DeptID,",
                                  "    JobCode,",
                                  "    JobTitle,",
                                  "    FullPartTime,",
                                  "    EmployeeExempt,",
                                  "    EmployeeType,",
                                  "    EmployeeClass,",
                                  "    %DateKey,",
                                  "    SegmentStartAction,",
                                  "    SegmentEndDT,",
                                  "    SegmentEndAction,",
                                  "    SegmentEndActionReason,",
                                  "    SegmentEndActionReasonDescription,",
                                  "    TerminationVoluntary,",
                                  "    IncludeHireFlg,",
                                  "    EmployeeSegment,",
                                  "    ServiceDT,",
                                  "    HireDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factEmployeeSegmentHires.qvd]",
                                  "(qvd)",
                                  "Where IncludeHireFlg=1 and %DateKey\u003e=Date(Floor(MonthStart(Today(),-12))) and %DateKey\u003c=Date(Floor(weekend(Today())));",
                                  "",
                                  "// Concatenate(FactTable)",
                                  "// LOAD \u0027Terms\u0027 as FactType,",
                                  "//     EMPLID,",
                                  "//     Employee,",
                                  "//     %CommunityKey,",
                                  "//     DeptID,",
                                  "//     JobCode,",
                                  "//     JobTitle,",
                                  "//     FullPartTime,",
                                  "//     EmployeeExempt,",
                                  "//     EmployeeType,",
                                  "//     EmployeeClass,",
                                  "//     SegmentStartDT,",
                                  "//     SegmentStartAction,",
                                  "//     %DateKey,",
                                  "//     SegmentEndAction,",
                                  "//     SegmentEndActionReason,",
                                  "//     SegmentEndActionReasonDescription,",
                                  "//     TerminationVoluntary,",
                                  "//     IncludeTermFlg,",
                                  "//     EmployeeSegment,",
                                  "//     ServiceDT,",
                                  "//     HireDT,",
                                  "//     Tenure,",
                                  "//     TenureCategory",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factEmployeeSegment.qvd]",
                                  "// (qvd)",
                                  "// Where IncludeTermFlg=1 and %DateKey\u003e=Date(Floor(MonthStart(Today(),-12))) and %DateKey\u003c=Date(Floor(weekend(Today())));",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD",
                                  "    \u0027OpenPositions\u0027 as FactType,",
                                  "    %DateKey,",
                                  "    CommunityAndDeptName,",
                                  "    DDOpenFlg,",
                                  "    DeptID,",
                                  "    %CommunityKey,",
                                  "    JobTitle,",
                                  "    PositionID,",
                                  "    EmployeeClass,",
                                  "    EmployeeName,",
                                  "    \"Non-Volatile/Volatile\",",
                                  "    \"Stnd Hrs/Wk\",",
                                  "    OPWeekFlg,",
                                  "    OPMonthFlg,",
                                  "    OPTodayFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_OpenPositions.qvd]",
                                  "(qvd)",
                                  "Where OPMonthFlg = 1;",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD",
                                  "\t\u0027QE\u0027 as FactType,",
                                  "    ReviewDashboard,",
                                  "    %ReviewIDKey,",
                                  "    %CommunityKey,",
                                  "    ReviewStatus,",
                                  "    %DateKey,",
                                  "    ReviewYear,",
                                  "    ReviewRound,",
                                  "    ReviewYearAndRound,",
                                  "    \"Net Score\",",
                                  "    MostEffectiveFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_factCommunityReview.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(MostEffectiveFlg, \u0027Yes\u0027);",
                                  "",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD",
                                  "\t\u0027RateIncrease\u0027 as FactType,",
                                  "\t*",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NewRateIncrease.qvd]",
                                  "(qvd)",
                                  "Where [%DateKey] \u003e= Date(Floor(MonthStart(Today(), 1))) and [%DateKey] \u003c Date(Floor(MonthStart(Today(), 2)));",
                                  "",
                                  "Concatenate(FactTable)",
                                  "LOAD \u0027Lifeline\u0027 as FactType,",
                                  "    \"Age\",",
                                  "    UniqueCode,",
                                  "    CommunityDeviceLocation,",
                                  "    T7,",
                                  "    DATAResDevWithoutName,",
                                  "    DATAMissingAlertCategory,",
                                  "    DATAPHBLogOnly,",
                                  "    DATAMissingDeviceInfo,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    ResidentID,",
                                  "    DeviceID,",
                                  "    LowBatteryFlg,",
                                  "    isDeviceMissingFlg,",
                                  "    DeviceType,",
                                  "    AlertType,",
                                  "    DeviceGroup,",
                                  "    \"Resident Device\",",
                                  "    LogID,",
                                  "    SubCategory,",
                                  "    DeviceLocation,",
                                  "    ResponseRequired,",
                                  "    Display,",
                                  "    NoSupervisoryFlg,",
                                  "    SourceInstance,",
                                  "    %DateKey,",
                                  "    LogTime,",
                                  "    \"Hour\",",
                                  "    EventFlg,",
                                  "    AlertCategory,",
                                  "    DisplayType,",
                                  "    ResponseTime,",
                                  "    AttemptCount,",
                                  "    Response,",
                                  "    RequiredAndNoResponse,",
                                  "    ResidentNamePhilips,",
                                  "    ResidentLocationID,",
                                  "    ResidentLocation,",
                                  "    ResidentLocationClean,",
                                  "    MinLowBatDate,",
                                  "    MaxLowBatDate,",
                                  "    ARCResidentDashboard,",
                                  "    ARMLeaseManagement,",
                                  "    \"Resident\",",
                                  "    ResidentRMS,",
                                  "    RoomNumber,",
                                  "    PayorType,",
                                  "    AssessedCareType,",
                                  "    AssessedCareLevel,",
                                  "    AssessedMedLevel,",
                                  "    Status,",
                                  "    MoveInDt,",
                                  "    ScheduledMoveOutDT,",
                                  "    BilledCareType,",
                                  "    BilledCareLevel",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_vwLifeline.qvd]",
                                  "(qvd)",
                                  "Where [Resident Device]=\u0027Resident Device\u0027 and ResponseRequired=\u0027Response Required\u0027 and EventFlg=\u0027Event\u0027 and Response=\u0027Responded\u0027 and T7 = \u0027Yes\u0027;"
                              ]
    },
    {
        "App":  "Atria-OpsCall",
        "Section":  "Main",
        "LoadScriptContent":  [
                                  "$tab Main",
                                  "SET ThousandSep=\u0027,\u0027;",
                                  "SET DecimalSep=\u0027.\u0027;",
                                  "SET MoneyThousandSep=\u0027,\u0027;",
                                  "SET MoneyDecimalSep=\u0027.\u0027;",
                                  "SET MoneyFormat=\u0027$#,##0.00;($#,##0.00)\u0027;",
                                  "SET TimeFormat=\u0027hh:mm:ss.mmm\u0027;",
                                  "SET DateFormat=\u0027M/D/YYYY\u0027;",
                                  "SET TimestampFormat=\u0027M/D/YYYY h:mm:ss[.fff] TT\u0027;",
                                  "SET FirstWeekDay=0;",
                                  "SET BrokenWeeks=1;",
                                  "SET ReferenceDay=0;",
                                  "SET DISABLE_INSIGHTS=1;",
                                  "SET FirstMonthOfYear=1;",
                                  "SET CollationLocale=\u0027en-US\u0027;",
                                  "SET CreateSearchIndexOnReload=0;",
                                  "SET MonthNames=\u0027Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec\u0027;",
                                  "SET LongMonthNames=\u0027January;February;March;April;May;June;July;August;September;October;November;December\u0027;",
                                  "SET DayNames=\u0027Mon;Tue;Wed;Thu;Fri;Sat;Sun\u0027;",
                                  "SET LongDayNames=\u0027Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday\u0027;",
                                  "",
                                  "let vmindate=monthstart(Today(),-11);",
                                  "let vNOIStartARUS = IF(Year(MonthStart(Today(),-1)) = \u00272021\u0027, ",
                                  "\t\t\t\t\t\t\u00277/1/2021\u0027, ",
                                  "                        YearStart(MonthStart(Today(),-1)));",
                                  "let vRoomReady=\u0027Count\u0027;"
                              ]
    },
    {
        "App":  "Atria-OpsCall",
        "Section":  "Section Access",
        "LoadScriptContent":  [
                                  "$tab Section Access",
                                  "SecurityTEMP:",
                                  "LOAD",
                                  "\"ACCESS\",",
                                  "\"USERID\",",
                                  "COMMUNITYNUMBER",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_SectionAccess.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Section Access;",
                                  "",
                                  "",
                                  "Security:",
                                  "NoConcatenate",
                                  "LOAD",
                                  "\"ACCESS\",",
                                  "\"USERID\",",
                                  "COMMUNITYNUMBER",
                                  "Resident SecurityTEMP;",
                                  "",
                                  "",
                                  "Section Application;",
                                  "",
                                  "",
                                  "Drop Table SecurityTEMP;"
                              ]
    },
    {
        "App":  "Atria-OpsCall",
        "Section":  "tab_order.txt",
        "LoadScriptContent":  [
                                  "Section Access%tab_file_order_divider%Main%tab_file_order_divider%Communities%tab_file_order_divider%FactTable%tab_file_order_divider%dimDate"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "    1st of Month   NICMAP Portfolios",
        "LoadScriptContent":  [
                                  "$tab //**1st of Month** NICMAP Portfolios",
                                  "/AGH: Commented out on 12.20.2021 because it is not currently in use. We can permanently delete this one we confirm it is definitely not needed (no loads fail, etc.)",
                                  "",
                                  "// /Step 1: getting marketshare for that date.",
                                  "// [TEMPMarketShare]:",
                                  "// LOAD",
                                  "// //     PortfolioID,",
                                  "// //     PropertyID as NICPropertyID,",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "// //     PropertyName,",
                                  "//     Metro,",
                                  "// //     PropertyTypeDesc,",
                                  "// //     CampusTypeDesc,",
                                  "// //     CompProperties,",
                                  "//     Date(Floor(EffectiveDT)) as [%DateKey],",
                                  "// //     PropertySeniorHousingOccupancy,",
                                  "//     PropertySeniorHousingUnitRent as [Prop_UnitRent],",
                                  "//     PropertySeniorHousingNumberOfUnits as [Prop_Units],",
                                  "//     Round(PropertySeniorHousingOccupancy * PropertySeniorHousingNumberOfUnits,1) as [Prop_OccUnits],",
                                  "//     PropertySeniorHousingOccupancy * PropertySeniorHousingNumberOfUnits * PropertySeniorHousingUnitRent as Prop_NetStreet,",
                                  "//     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingNumberOfUnits] as [Prop_GrossStreet],",
                                  "    ",
                                  "//     PropertyIndependentLivingUnitRent as [Prop_UnitRent_IL],",
                                  "//     PropertyIndependentLivingNumberOfUnits as [Prop_Units_IL],",
                                  "//     Round(PropertyIndependentLivingOccupancy * PropertyIndependentLivingNumberOfUnits,1) as [Prop_OccUnits_IL],",
                                  "// //     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingOccupancy]*[PropertySeniorHousingNumberOfUnits] as [Prop_NetStreet],",
                                  "//     [PropertyIndependentLivingUnitRent]*[PropertyIndependentLivingNumberOfUnits] as [Prop_GrossStreet_IL],",
                                  "    ",
                                  "//     PropertyAssistedLivingUnitRent as [Prop_UnitRent_AL],",
                                  "//     PropertyAssistedLivingNumberOfUnits as [Prop_Units_AL],",
                                  "//     Round(PropertyAssistedLivingOccupancy * PropertyAssistedLivingNumberOfUnits,1) as [Prop_OccUnits_AL],",
                                  "// //     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingOccupancy]*[PropertySeniorHousingNumberOfUnits] as [Prop_NetStreet],",
                                  "//     [PropertyAssistedLivingUnitRent]*[PropertyAssistedLivingNumberOfUnits] as [Prop_GrossStreet_AL],",
                                  "    ",
                                  "//     PropertyMemoryCareUnitRent as [Prop_UnitRent_MC],",
                                  "//     PropertyMemoryCareNumberOfUnits as [Prop_Units_MC],",
                                  "//     Round(PropertyMemoryCareOccupancy * PropertyMemoryCareNumberOfUnits,1) as [Prop_OccUnits_MC],",
                                  "// //     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingOccupancy]*[PropertySeniorHousingNumberOfUnits] as [Prop_NetStreet],",
                                  "//     [PropertyMemoryCareUnitRent]*[PropertyMemoryCareNumberOfUnits] as [Prop_GrossStreet_MC],",
                                  "    ",
                                  "// //     PropertyIndependentLivingOccupancy,",
                                  "// //     PropertyIndependentLivingUnitRent,",
                                  "// //     PropertyIndependentLivingNumberOfUnits,",
                                  "// //     PropertyAssistedLivingOccupancy,",
                                  "// //     PropertyAssistedLivingUnitRent,",
                                  "// //     PropertyAssistedLivingNumberOfUnits,",
                                  "// //     PropertyMemoryCareOccupancy,",
                                  "// //     PropertyMemoryCareUnitRent,",
                                  "// //     PropertyMemoryCareNumberOfUnits,",
                                  "// //     PropertyNursingCareOccupancy,",
                                  "// //     PropertyNursingCareBedRent,",
                                  "// //     PropertyNursingCareNumberOfBeds,",
                                  "// //     CompSetSeniorHousingOccupancy,",
                                  "//     CompSetSeniorHousingUnitRent as [Comp_UnitRent],",
                                  "//     CompSetSeniorHousingNumberOfUnits as [Comp_Units],",
                                  "//     IF(IsNum(CompSetSeniorHousingOccupancy),(CompSetSeniorHousingOccupancy * CompSetSeniorHousingNumberOfUnits), NULL()) as [Comp_OccUnits],",
                                  "//     if(IsNum([CompSetSeniorHousingOccupancy]),[CompSetSeniorHousingNumberOfUnits],0) as [Comp_UnitsWithOcc],",
                                  "//     [CompSetSeniorHousingUnitRent]*IF(IsNum(CompSetSeniorHousingOccupancy),(CompSetSeniorHousingOccupancy * CompSetSeniorHousingNumberOfUnits), NULL()) as [Comp_NetStreet],",
                                  "//     IF(IsNUM([CompSetSeniorHousingUnitRent]), [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingNumberOfUnits],0) as [Comp_GrossStreet],",
                                  "    ",
                                  "//     CompSetIndependentLivingUnitRent as [Comp_UnitRent_IL],",
                                  "//     CompSetIndependentLivingNumberOfUnits as [Comp_Units_IL],",
                                  "//     IF(IsNum(CompSetIndependentLivingOccupancy),(CompSetIndependentLivingOccupancy * CompSetIndependentLivingNumberOfUnits), NULL()) as [Comp_OccUnits_IL],",
                                  "//     if(IsNum([CompSetIndependentLivingOccupancy]),[CompSetIndependentLivingNumberOfUnits],0) as [Comp_UnitsWithOcc_IL],",
                                  "// //     [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingOccupancy]*[CompSetSeniorHousingNumberOfUnits] as [Comp_NetStreet],",
                                  "//     IF(IsNUM([CompSetIndependentLivingUnitRent]), [CompSetIndependentLivingUnitRent]*[CompSetIndependentLivingNumberOfUnits],0) as [Comp_GrossStreet_IL],",
                                  "    ",
                                  "//     CompSetAssistedLivingUnitRent as [Comp_UnitRent_AL],",
                                  "//     CompSetAssistedLivingNumberOfUnits as [Comp_Units_AL],",
                                  "//     IF(IsNum(CompSetAssistedLivingOccupancy),(CompSetAssistedLivingOccupancy * CompSetAssistedLivingNumberOfUnits), NULL()) as [Comp_OccUnits_AL],",
                                  "//     if(IsNum([CompSetAssistedLivingOccupancy]),[CompSetAssistedLivingNumberOfUnits],0) as [Comp_UnitsWithOcc_AL],",
                                  "// //     [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingOccupancy]*[CompSetSeniorHousingNumberOfUnits] as [Comp_NetStreet],",
                                  "//     IF(IsNUM([CompSetAssistedLivingUnitRent]), [CompSetAssistedLivingUnitRent]*[CompSetAssistedLivingNumberOfUnits],0) as [Comp_GrossStreet_AL],",
                                  "    ",
                                  "//     CompSetMemoryCareUnitRent as [Comp_UnitRent_MC],",
                                  "//     CompSetMemoryCareNumberOfUnits as [Comp_Units_MC],",
                                  "//     IF(IsNum(CompSetMemoryCareOccupancy),(CompSetMemoryCareOccupancy * CompSetMemoryCareNumberOfUnits), NULL()) as [Comp_OccUnits_MC],",
                                  "//     if(IsNum([CompSetMemoryCareOccupancy]),[CompSetMemoryCareNumberOfUnits],0) as [Comp_UnitsWithOcc_MC],",
                                  "// //     [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingOccupancy]*[CompSetSeniorHousingNumberOfUnits] as [Comp_NetStreet],",
                                  "//     IF(IsNUM([CompSetMemoryCareUnitRent]), [CompSetMemoryCareUnitRent]*[CompSetMemoryCareNumberOfUnits],0) as [Comp_GrossStreet_MC]",
                                  "    ",
                                  "// //     CompSetIndependentLivingOccupancy,",
                                  "// //     CompSetIndependentLivingUnitRent,",
                                  "// //     CompSetIndependentLivingNumberOfUnits,",
                                  "// //     CompSetAssistedLivingOccupancy,",
                                  "// //     CompSetAssistedLivingUnitRent,",
                                  "// //     CompSetAssistedLivingNumberOfUnits,",
                                  "// //     CompSetMemoryCareOccupancy,",
                                  "// //     CompSetMemoryCareUnitRent,",
                                  "// //     CompSetMemoryCareNumberOfUnits,",
                                  "// //     CompSetNursingCareOccupancy,",
                                  "// //     CompSetNursingCareBedRent,",
                                  "// //     CompSetNursingCareNumberOfBeds",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMAP_Portfolios.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// /Step 2: getting market share from the Prior Quarter but giving it date of the following quarter.",
                                  "// TEMPMarketSharePQ:",
                                  "// LOAD",
                                  "// //     PortfolioID,",
                                  "// //     PropertyID,",
                                  "//     CommunityNumber as %CommunityKey,",
                                  "// //     PropertyName,",
                                  "// //     Metro,",
                                  "// //     PropertyTypeDesc,",
                                  "// //     CampusTypeDesc,",
                                  "// //     CompProperties,",
                                  "//     Date(Floor(QuarterEnd(Date(Floor(EffectiveDT)),1)), \u0027M/D/YYYY\u0027) as [%DateKey],",
                                  "// //     PropertySeniorHousingOccupancy,",
                                  "//     PropertySeniorHousingUnitRent as [Prop_UnitRent_PQ],",
                                  "//     PropertySeniorHousingNumberOfUnits as [Prop_Units_PQ],",
                                  "//     Round(PropertySeniorHousingOccupancy * PropertySeniorHousingNumberOfUnits,1) as [Prop_OccUnits_PQ],",
                                  "// //     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingOccupancy]*[PropertySeniorHousingNumberOfUnits] as [Prop_NetStreet_PQ],",
                                  "//     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingNumberOfUnits] as [Prop_GrossStreet_PQ],",
                                  "// //     PropertyIndependentLivingOccupancy,",
                                  "// //     PropertyIndependentLivingUnitRent,",
                                  "// //     PropertyIndependentLivingNumberOfUnits,",
                                  "// //     PropertyAssistedLivingOccupancy,",
                                  "// //     PropertyAssistedLivingUnitRent,",
                                  "// //     PropertyAssistedLivingNumberOfUnits,",
                                  "// //     PropertyMemoryCareOccupancy,",
                                  "// //     PropertyMemoryCareUnitRent,",
                                  "// //     PropertyMemoryCareNumberOfUnits,",
                                  "// //     PropertyNursingCareOccupancy,",
                                  "// //     PropertyNursingCareBedRent,",
                                  "// //     PropertyNursingCareNumberOfBeds,",
                                  "// //     CompSetSeniorHousingOccupancy,",
                                  "//     CompSetSeniorHousingUnitRent as [Comp_UnitRent_PQ],",
                                  "//     CompSetSeniorHousingNumberOfUnits as [Comp_Units_PQ],",
                                  "//     IF(IsNum(CompSetSeniorHousingOccupancy),(CompSetSeniorHousingOccupancy * CompSetSeniorHousingNumberOfUnits), NULL()) as [Comp_OccUnits_PQ],",
                                  "//     if(IsNum([CompSetSeniorHousingOccupancy]),[CompSetSeniorHousingNumberOfUnits],0) as [Comp_UnitsWithOcc_PQ],",
                                  "// //     [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingOccupancy]*[CompSetSeniorHousingNumberOfUnits] as [Comp_NetStreet_PQ],",
                                  "//     IF(IsNum([CompSetSeniorHousingUnitRent]), [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingNumberOfUnits],0) as [Comp_GrossStreet_PQ]",
                                  "// //     CompSetIndependentLivingOccupancy,",
                                  "// //     CompSetIndependentLivingUnitRent,",
                                  "// //     CompSetIndependentLivingNumberOfUnits,",
                                  "// //     CompSetAssistedLivingOccupancy,",
                                  "// //     CompSetAssistedLivingUnitRent,",
                                  "// //     CompSetAssistedLivingNumberOfUnits,",
                                  "// //     CompSetMemoryCareOccupancy,",
                                  "// //     CompSetMemoryCareUnitRent,",
                                  "// //     CompSetMemoryCareNumberOfUnits,",
                                  "// //     CompSetNursingCareOccupancy,",
                                  "// //     CompSetNursingCareBedRent,",
                                  "// //     CompSetNursingCareNumberOfBeds",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMAP_Portfolios.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// Store [TEMPMarketSharePQ] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketSharePQ.qvd]",
                                  "// (qvd);",
                                  "// Drop Table TEMPMarketSharePQ;",
                                  "",
                                  "// /Step 3: getting market share from the Prior Year but giving it date of the following year (4 Quarters Later).",
                                  "// TEMPMarketSharePY:",
                                  "// LOAD",
                                  "// //     PortfolioID,",
                                  "// //     PropertyID,",
                                  "//     CommunityNumber as %CommunityKey,",
                                  "// //     PropertyName,",
                                  "// //     Metro,",
                                  "// //     PropertyTypeDesc,",
                                  "// //     CampusTypeDesc,",
                                  "// //     CompProperties,",
                                  "//     Date(Floor(QuarterEnd(Date(Floor(EffectiveDT)),4)), \u0027M/D/YYYY\u0027) as [%DateKey],",
                                  "// //     PropertySeniorHousingOccupancy,",
                                  "//     PropertySeniorHousingUnitRent as [Prop_UnitRent_PY],",
                                  "//     PropertySeniorHousingNumberOfUnits as [Prop_Units_PY],",
                                  "//     Round(PropertySeniorHousingOccupancy * PropertySeniorHousingNumberOfUnits,1) as [Prop_OccUnits_PY],",
                                  "// //     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingOccupancy]*[PropertySeniorHousingNumberOfUnits] as [Prop_NetStreet_PY],",
                                  "//     [PropertySeniorHousingUnitRent]*[PropertySeniorHousingNumberOfUnits] as [Prop_GrossStreet_PY],",
                                  "// //     PropertyIndependentLivingOccupancy,",
                                  "// //     PropertyIndependentLivingUnitRent,",
                                  "// //     PropertyIndependentLivingNumberOfUnits,",
                                  "// //     PropertyAssistedLivingOccupancy,",
                                  "// //     PropertyAssistedLivingUnitRent,",
                                  "// //     PropertyAssistedLivingNumberOfUnits,",
                                  "// //     PropertyMemoryCareOccupancy,",
                                  "// //     PropertyMemoryCareUnitRent,",
                                  "// //     PropertyMemoryCareNumberOfUnits,",
                                  "// //     PropertyNursingCareOccupancy,",
                                  "// //     PropertyNursingCareBedRent,",
                                  "// //     PropertyNursingCareNumberOfBeds,",
                                  "// //     CompSetSeniorHousingOccupancy,",
                                  "//     CompSetSeniorHousingUnitRent as [Comp_UnitRent_PY],",
                                  "//     CompSetSeniorHousingNumberOfUnits as [Comp_Units_PY],",
                                  "//     IF(IsNum(CompSetSeniorHousingOccupancy),(CompSetSeniorHousingOccupancy * CompSetSeniorHousingNumberOfUnits), NULL()) as [Comp_OccUnits_PY],",
                                  "//     if(IsNum([CompSetSeniorHousingOccupancy]),[CompSetSeniorHousingNumberOfUnits],0) as [Comp_UnitsWithOcc_PY],",
                                  "// //     [CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingOccupancy]*[CompSetSeniorHousingNumberOfUnits] as [Comp_NetStreet_PY],",
                                  "//     If(IsNum([CompSetSeniorHousingUnitRent]),[CompSetSeniorHousingUnitRent]*[CompSetSeniorHousingNumberOfUnits],0) as [Comp_GrossStreet_PY]",
                                  "// //     CompSetIndependentLivingOccupancy,",
                                  "// //     CompSetIndependentLivingUnitRent,",
                                  "// //     CompSetIndependentLivingNumberOfUnits,",
                                  "// //     CompSetAssistedLivingOccupancy,",
                                  "// //     CompSetAssistedLivingUnitRent,",
                                  "// //     CompSetAssistedLivingNumberOfUnits,",
                                  "// //     CompSetMemoryCareOccupancy,",
                                  "// //     CompSetMemoryCareUnitRent,",
                                  "// //     CompSetMemoryCareNumberOfUnits,",
                                  "// //     CompSetNursingCareOccupancy,",
                                  "// //     CompSetNursingCareBedRent,",
                                  "// //     CompSetNursingCareNumberOfBeds",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMAP_Portfolios.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// Store [TEMPMarketSharePY] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketSharePY.qvd]",
                                  "// (qvd);",
                                  "// Drop Table TEMPMarketSharePY;",
                                  "",
                                  "// /Step 3: Join PQ and PY to the market share table. Then store.",
                                  "// Left Join (TEMPMarketShare)",
                                  "// LOAD *",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketSharePQ.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// Left Join (TEMPMarketShare)",
                                  "// LOAD *",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketSharePY.qvd]",
                                  "// (qvd);",
                                  "// Store [TEMPMarketShare] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketShare.qvd]",
                                  "// (qvd);",
                                  "// Drop Table TEMPMarketShare;",
                                  "",
                                  "",
                                  "// TEMPMarketShare2:",
                                  "// LOAD *,",
                                  "// [Comp_OccUnits]-[Comp_OccUnits_PQ] as [Comp_Absorption],",
                                  "// [Comp_OccUnits]-[Comp_OccUnits_PY] as [Comp_Absorption_YTD],",
                                  "// If([Comp_Units_PQ]\u003e1,[Comp_Units]-[Comp_Units_PQ],Null()) as [Comp_UnitGrowth]",
                                  "// From [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketShare.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// Left Join (TEMPMarketShare2)",
                                  "",
                                  "// LOAD",
                                  "//     %CommunityKey,",
                                  "//     %DateKey,",
                                  "// //     QuarterBonusDate,",
                                  "// //     MonthBonusDate,",
                                  "// //     M_EOMActual,",
                                  "//     Comm_OccUnits,",
                                  "// //     M_Respite,",
                                  "// //     M_ScheduledOut,",
                                  "// //     M_Reservation,",
                                  "// //     M_EOMCapacity,",
                                  "//     Comm_Units,",
                                  "// //     M_EOMOccPercent,",
                                  "// //     M_UnitMoveIns,",
                                  "// //     M_UnitMoveOuts,",
                                  "// //     M_Adjustments,",
                                  "// //     MExcludeRSM,",
                                  "// //     MExcludeRVP,",
                                  "// //     QExcludeRSM,",
                                  "// //     QExcludeRVP,",
                                  "//     Comm_OccUnits_PQ,",
                                  "//     Comm_Units_PQ,",
                                  "//     Comm_OccUnits_PY,",
                                  "//     Comm_Units_PY,",
                                  "//     Comm_Absorption,",
                                  "//     Comm_Absorption_YTD,",
                                  "//     Comm_UnitGrowth",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factUnitOccupancyByMonth.qvd]",
                                  "// (qvd)",
                                  "// WHERE [%DateKey] = Date(Floor(QuarterEnd([%DateKey],0)));",
                                  "",
                                  "// Store [TEMPMarketShare2] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketShare2.qvd]",
                                  "// (qvd);",
                                  "// Drop Table TEMPMarketShare2;",
                                  "",
                                  "",
                                  "// MarketShare:",
                                  "// LOAD *,",
                                  "//     IF(IsNum([Comp_OccUnits]), [Comm_OccUnits]+[Comp_OccUnits], NULL()) as [Market_OccUnits],",
                                  "//     IF(IsNum([Comp_OccUnits_PQ]), [Comm_OccUnits_PQ]+[Comp_OccUnits_PQ], NULL()) as [Market_OccUnits_PQ],",
                                  "//     IF(IsNum([Comp_OccUnits_PY]), [Comm_OccUnits_PY]+[Comp_OccUnits_PY], NULL()) as [Market_OccUnits_PY],",
                                  "//     IF(IsNum([Comp_OccUnits]),[Comm_Units]+[Comp_Units], NULL()) as [Market_Units],",
                                  "//     IF(IsNum([Comp_OccUnits_PQ]),[Comm_Units_PQ]+[Comp_Units_PQ], NULL()) as [Market_Units_PQ],",
                                  "//     IF(IsNum([Comp_OccUnits_PY]), [Comm_Units_PY]+[Comp_Units_PY], NULL()) as [Market_Units_PY],",
                                  "//     [Comm_Units]+[Comp_UnitsWithOcc] as [Market_UnitsWithOcc],",
                                  "//     ([Comm_OccUnits]+[Comp_OccUnits])-([Comm_OccUnits_PQ]+[Comp_OccUnits_PQ]) as [Market_Absorption], //[Market_OccUnits]-[Market_OccUnits_PQ] as [Market_Absorption],",
                                  "//     ([Comm_OccUnits]+[Comp_OccUnits])-([Comm_OccUnits_PY]+[Comp_OccUnits_PY]) as [Market_Absorption_YTD], //[Market_OccUnits]-[Market_OccUnits_PY] as [Market_Absorption_YTD],",
                                  "//     ([Comm_Units]+[Comp_Units])-([Comm_Units_PQ]+[Comp_Units_PQ]) as [Market_UnitGrowth], //[Market_Units]-[Market_Units_PQ] as [Market_UnitGrowth],",
                                  "//     ([Comm_Units]+[Comp_Units])-([Comm_Units_PY]+[Comp_Units_PY]) as [Market_UnitGrowth_YTD] //[Market_Units]-[Market_Units_PY] as [Market_UnitGrowth_YTD]  ",
                                  "// From [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPMarketShare2.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// Left Join (MarketShare)",
                                  "// LOAD",
                                  "// \tMAX(Date(Floor(EffectiveDT))) as %DateKey,",
                                  "// \t1 as MaxDateFlg",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMAP_Portfolios.qvd]",
                                  "// (qvd);",
                                  "",
                                  "",
                                  "// Drop Field Metro from MarketShare;",
                                  "",
                                  "// Store [MarketShare] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NICMAP_Portfolios.qvd]",
                                  "// (qvd);",
                                  "// drop Table [MarketShare];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "  1st of Month   Unit Occupancy By Month",
        "LoadScriptContent":  [
                                  "$tab **1st of Month** Unit Occupancy By Month",
                                  "/ Step 1: Rename Fields, create Comm_OccuUnits and Comm_Units for Jonathan\u0027s apps.",
                                  "factUnitOccupancyByMonth:",
                                  "LOAD",
                                  "//  UnitOccupancyByMonthID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tdate(floor(EffectiveDT)) as %DateKey, ",
                                  "    date(floor(monthstart(EffectiveDT))) as MonthBonusDate,",
                                  "    date(floor(quarterstart(EffectiveDT))) as QuarterBonusDate,",
                                  "\tActual as M_EOMActual, ",
                                  "    IF(Date(Floor(EffectiveDT))= Date(Floor(QuarterEnd(EffectiveDT,0))), Actual, NULL()) as Comm_OccUnits,",
                                  "    Respite as M_Respite,",
                                  "    ScheduledOut as M_ScheduledOut,",
                                  "    Reservation as M_Reservation,",
                                  "\tCapacity as M_EOMCapacity, ",
                                  "    IF(Date(Floor(EffectiveDT))= Date(Floor(QuarterEnd(EffectiveDT,0))),Capacity, NULL()) as Comm_Units,",
                                  "\tActualToCapacityPercentage as M_EOMOccPercent, ",
                                  "\tMoveIn as M_UnitMoveIns, ",
                                  "\tMoveOut as M_UnitMoveOuts, ",
                                  "\tOutOfPeriodAdjustment as M_Adjustments",
                                  "// \tReplicaDT as UnitOccupancyByMonthReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factUnitOccupancyByMonth.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "// /Step 2: Pull in PQ and PY Occupancy data from our Extact files for each quarter.",
                                  "// OccupancyPQ:",
                                  "// LOAD",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "//     Date(Floor(QuarterEnd(date(floor(EffectiveDT)),1))) as [%DateKey],",
                                  "//     Actual as [Comm_OccUnits_PQ],",
                                  "//     Capacity as [Comm_Units_PQ]",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factUnitOccupancyByMonth.qvd]",
                                  "// (qvd)",
                                  "// WHERE Date(Floor(EffectiveDT))= Date(Floor(QuarterEnd(EffectiveDT,0)));",
                                  "",
                                  "",
                                  "// OccupancyPY:",
                                  "// LOAD",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "//     Date(Floor(QuarterEnd(date(floor(EffectiveDT)),4))) as [%DateKey],",
                                  "//     Actual as [Comm_OccUnits_PY],",
                                  "//     Capacity as [Comm_Units_PY]",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factUnitOccupancyByMonth.qvd]",
                                  "// (qvd)",
                                  "// WHERE Date(Floor(EffectiveDT))= Date(Floor(QuarterEnd(EffectiveDT,0)));",
                                  "",
                                  "",
                                  "// Left Join (TEMPfactUnitOccupancyByMonth)",
                                  "// LOAD * Resident OccupancyPQ;",
                                  "// Drop Table OccupancyPQ;",
                                  "",
                                  "// Left Join (TEMPfactUnitOccupancyByMonth)",
                                  "// LOAD * Resident OccupancyPY;",
                                  "// Drop Table OccupancyPY;",
                                  "",
                                  "/Step 3: Calculate Absorption and Unit Growth for Jonathan\u0027s apps.",
                                  "// factUnitOccupancyByMonth:",
                                  "// LOAD *,",
                                  "// \tIf([Comm_OccUnits_PQ]\u003e0,[Comm_OccUnits]-[Comm_OccUnits_PQ],Null()) as [Comm_Absorption],",
                                  "//     If([Comm_OccUnits_PY]\u003e0,[Comm_OccUnits]-[Comm_OccUnits_PY],Null()) as [Comm_Absorption_YTD],",
                                  "//     [Comm_Units]-[Comm_Units_PQ] as [Comm_UnitGrowth]",
                                  "// Resident TEMPfactUnitOccupancyByMonth;",
                                  "// Drop Table TEMPfactUnitOccupancyByMonth;",
                                  "",
                                  "Store [factUnitOccupancyByMonth] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factUnitOccupancyByMonth.qvd]",
                                  "(qvd);",
                                  "drop table [factUnitOccupancyByMonth];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "  NIC CBSA Trends",
        "LoadScriptContent":  [
                                  "$tab //NIC CBSA Trends",
                                  "/AGH: Commented out on 12.20.2021 because it is not currently in use. We can permanently delete this one we confirm it is definitely not needed (no loads fail, etc.)",
                                  "",
                                  "// /",
                                  "// TempNICMarketShare:",
                                  "// LOAD",
                                  "// //     factCBSAPropertyTrendID,",
                                  "// //     CBSACode,",
                                  "//     CBSA as MarketCluster,",
                                  "// //     PropertyType,",
                                  "// //     MAPRegion,",
                                  "//     Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     Round(Occupancy * UnitCount) as MSAOccUnits,",
                                  "// //     PropertyCount,",
                                  "//     UnitCount as MSAUnitsSupply",
                                  "// //     Occupancy,",
                                  "// //     AnnualOccupancyChange,",
                                  "// //     StabilizedOccupancy,",
                                  "// //     AnnualStabilizedOccupancy,",
                                  "// //     MedianOccupancy,",
                                  "// //     Absorption,",
                                  "// //     AnnualAbsorption,",
                                  "// //     InventoryGrowth,",
                                  "// //     AnnualInventoryGrowth,",
                                  "// //     PropertyUnderConstructionCount,",
                                  "// //     UnitUnderConstructionCount,",
                                  "// //     ConstructionVsInventory,",
                                  "// //     AverageRent,",
                                  "// //     AnnualRentGrowth,",
                                  "// //     TypeCategorySEQ,",
                                  "// //     ReplicaDT",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_NICMarketShare.qvd]",
                                  "// (qvd)",
                                  "// Where PropertyType = \u0027Non CCRC/LPC Seniors Housing\u0027;",
                                  "",
                                  "// Left Join to get this data (provided by market share) on a per community basis. Will need to do special calculations in app to make sure not double/triple/etc. - counting.",
                                  "// LEFT JOIN (TempNICMarketShare)",
                                  "// LOAD ",
                                  "",
                                  "// \tMarketCluster, ",
                                  "//     [%CommunityKey]",
                                  "    ",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "// (qvd);",
                                  "",
                                  "// /Only include for communities in our mstrCommunity Transformation.",
                                  "// NICMarketShare:",
                                  "// Load",
                                  "// \t[%CommunityKey],",
                                  "//     [%DateKey],",
                                  "//     MSAOccUnits,",
                                  "//     MSAUnitsSupply",
                                  "// Resident TempNICMarketShare",
                                  "// where Exists(COMMUNITYNUMBER, [%CommunityKey]);",
                                  "// Drop Table TempNICMarketShare;",
                                  "",
                                  "// Store [NICMarketShare] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NICMarketShare.qvd]",
                                  "// (qvd);",
                                  "// drop Table NICMarketShare;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "1.1 TEMPTourConfirmation",
        "LoadScriptContent":  [
                                  "$tab 1.1 TEMPTourConfirmation",
                                  "/We need to be able to determine if there was a confirmation call/text/lm/email day of or day before a tour",
                                  "/Step 1: Count all closed confirmation activities through yesterday and open for the next 7 days by CustomerID. This section gives us Confirm Count day of.",
                                  "TEMPJournal:",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  "    Count(InquiryJournalID) as ConfirmCount",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "where ",
                                  "((Date(Floor(EffectiveDT))\u003e=Date(Floor(Today()-4)) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()-1)) and CloseFlg=1)",
                                  "or",
                                  "(Date(Floor(EffectiveDT))\u003e=Date(Floor(Today())) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()+7)) and CloseFlg=0))",
                                  "and WildMatch(JournalQlikCategory, \u0027Telephone\u0027, \u0027Email\u0027)",
                                  "Group By CustomerID, EffectiveDT;",
                                  "",
                                  "/Step 2: Do the same but this time we are giving the Confirm count to the next day, not day of the activity.",
                                  "Concatenate(TEMPJournal)",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    date(floor(EffectiveDT+1)) as %DateKey,",
                                  "    Count(InquiryJournalID) as ConfirmCount",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "where ",
                                  "((Date(Floor(EffectiveDT))\u003e=Date(Floor(Today()-4)) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()-1)) and CloseFlg=1)",
                                  "or",
                                  "(Date(Floor(EffectiveDT))\u003e=Date(Floor(Today())) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()+6)) and CloseFlg=0))",
                                  "and WildMatch(JournalQlikCategory, \u0027Telephone\u0027, \u0027Email\u0027)",
                                  "Group By CustomerID, EffectiveDT;",
                                  "",
                                  "/Step 3: By Customer, By Day give 1,0 flag if they had an activity that would count as a tour confirmation for that day. ",
                                  "/\t\tCreate Recent Tour Flg so we can join correctly to the Journal Activity table.",
                                  "TEMPJournal2:",
                                  "LOAD",
                                  "1 as RecentTourFlg,",
                                  "%CustomerIDKey,",
                                  "%DateKey,",
                                  "IF(SUM(ConfirmCount)\u003e0, 1, 0) as ConfirmationFlg",
                                  "Resident TEMPJournal",
                                  "Group By %CustomerIDKey, %DateKey;",
                                  "Drop Table TEMPJournal;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "1.2 Journal Activity",
        "LoadScriptContent":  [
                                  "$tab 1.2 Journal Activity",
                                  "/Step 1: Rename fields and do the following:",
                                  "/\t\t1. Create Recent Tour Flag so we can appropriately join to TourConfirmation Table",
                                  "/\t\t2. Create JournalTypeErrorFlg",
                                  "JournalActivity:",
                                  "//factInquiryJournalActivity",
                                  "LOAD",
                                  "\tIF(PlannedTourFlg=1 and Date(Floor(EffectiveDT)) \u003e=Date(Floor(Today()-3)) ",
                                  "    \tand Date(Floor(EffectiveDT)) \u003c=Date(Floor(Today()+7)) and ISNULL(JournalStatusChangeReasonID), 1,0) as RecentTourFlg, //Not Cancelled/No Show",
                                  " \tInquiryJournalID, ",
                                  "// \tCommunityID, ",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "\tInquiryID as %InquiryID, ",
                                  " \tCustomerID as %CustomerIDKey, ",
                                  "// \tTypeID, ",
                                  "\tType as JournalType, ",
                                  "// \tTypeCategoryID, ",
                                  "\tTypeCategory as JournalTypeCategory, ",
                                  "\tTypeCategorySEQ as Sequence,",
                                  "    IF(TypeCategorySEQ=1, \u0027Initial\u0027, \u0027Additional\u0027) as SequenceName,",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  " \tTIME(LEFT(EffectiveTM, 8), \u0027h:mm TT\u0027) as JournalTime, ",
                                  "    Timestamp#(date(floor(EffectiveDT)) \u0026 \u0027 \u0027 \u0026 Time#(time(LEFT(EffectiveTM, 8), \u0027hh:mm:ss tt\u0027), \u0027hh:mm:ss TT\u0027) ,\u0027MM/DD/YYYY hh:mm:ss TT\u0027) as JournalDTandTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Capitalize(Owner) as JournalOwner,",
                                  "// \tAutoNumber(date(floor(EffectiveDT)) \u0026 EffectiveTM) as JournalSequence,",
                                  "    Capitalize(CloseBy) as JournalClosedBy, ",
                                  "\tDate(Floor(CloseDT)) as JournalClosedDt, ",
                                  "\tCloseFlg as JournalClosedFlg, ",
                                  "//  \tObjective as JournalObjective,",
                                  "\tIF(WildMatch(TypeID, 47), replace(Note,\u0027\u0026#39;\u0027,chr(39)), NULL()) as JournalNote,",
                                  "    IF(Len(Note)\u003c=10, 1, 0) as JournalLengthFlg,",
                                  "    IF(TelephoneCallFlg=1 and (WildMatch(Note, \u0027*left message*\u0027, \u0027*voice mail*\u0027, \u0027*voicemail*\u0027, \u0027*vm*\u0027, \u0027*lvm*\u0027, \u0027*lm \u0027, \u0027lm\u0027, \u0027*no answer*\u0027) or",
                                  "    \tWildMatch(Objective, \u0027*left message*\u0027, \u0027*voice mail*\u0027, \u0027*voicemail*\u0027, \u0027*vm*\u0027, \u0027*lvm*\u0027, \u0027*lm \u0027, \u0027lm\u0027, \u0027*no answer*\u0027)), 1, 0) as JournalTypeErrorFlg, //Not truly a phone call.",
                                  "// \tReplicaDT",
                                  "ApplicationURL as [JournalDashboard],",
                                  "//     JournalStatusChangeReasonID,",
                                  "    IF(ISNULL(JournalStatusChangeReasonID), 0, 1) as JournalStatusChangeFlg,",
                                  "    JournalStatusChangeReason,",
                                  "    JournalQlikCategory,",
                                  "    PlannedTourFlg,",
                                  "    TelephoneCallFlg,",
                                  "    ScheduledTourFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "/Step 2: Get the Journal Create and Modify info for use in the Call Center Analysis app.",
                                  "Left Join(JournalActivity)",
                                  "LOAD distinct InquiryJournalID,",
                                  "    DATE(FLOOR(CreateDT)) as JournalCreateDT,",
                                  "    Capitalize(CreateBy) as JournalCreateBy,",
                                  "    DATE(FLOOR(ModifyDT)) as JournalModifyDT,",
                                  "    Capitalize(ModifyBy) as JournalModifyBy;",
                                  "SQL SELECT InquiryJournalID,",
                                  "    CreateDT,",
                                  "    CreateBy,",
                                  "    ModifyDT,",
                                  "    ModifyBy",
                                  "FROM BusinessData.CRM.tblInquiryJournal;",
                                  "",
                                  "",
                                  "",
                                  "/Step 7: Left Join to get the tour confirmation information.",
                                  "Left Join (JournalActivity)",
                                  "LOAD * Resident TEMPJournal2;",
                                  "Drop Table TEMPJournal2;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "1.3 Last Journal Activity",
        "LoadScriptContent":  [
                                  "$tab 1.3 Last Journal Activity",
                                  "/Detrmine the most recent activity (non-Mass Email) by InquiryID and CommunityNumber",
                                  "LastJournalActivity:",
                                  "Load %CommunityKey, [%InquiryID],LastValue(JournalType) as lastStep, LastValue (%DateKey) as LastStepDate, LastValue(JournalDTandTM) as LastContactDate",
                                  "\t, LastValue(JournalType) \u0026\u0027 \u0027 \u0026 LastValue(%DateKey) as LastStepAndDT, LastValue(JournalQlikCategory) as LastStepQlikCategory",
                                  "// , LastValue(JournalStatusChangeFlg) as JournalStatusChangeFlg",
                                  "Resident JournalActivity ",
                                  "Where JournalClosedFlg=1 and [%DateKey]\u003c=\u0027$(vToday)\u0027 and NOT(Match(JournalType, \u0027Mass Email\u0027)) ",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "drop field LastContactDate from LastJournalActivity;",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [LastJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_LastJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [LastJournalActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "1.4 Next Journal Activity",
        "LoadScriptContent":  [
                                  "$tab 1.4 Next Journal Activity",
                                  "/Determine the next upcoming open activity by InquiryID and CommunityNumber",
                                  "NextJournalActivity:",
                                  "Load %CommunityKey, [%InquiryID],FirstValue(JournalType) as NextStep, FirstValue (%DateKey) as NextStepDate, FirstValue(JournalDTandTM) as NextContactDate, FirstValue(JournalType) \u0026 \u0027 \u0027 \u0026 FirstValue(%DateKey) as NextStepAndDT",
                                  "Resident JournalActivity ",
                                  "Where JournalClosedFlg=0 and [%DateKey]\u003e=\u0027$(vToday)\u0027",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "",
                                  "drop field NextContactDate from NextJournalActivity;",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [NextJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NextJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NextJournalActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "1.5 Next Journal Closing Activity",
        "LoadScriptContent":  [
                                  "$tab 1.5 Next Journal Closing Activity",
                                  "/Determine the next upcoming open \"Closing\" activity by InquiryID and CommunityNumber --used for Tour Follow Up",
                                  "NextJournalActivityClosing:",
                                  "Load %CommunityKey, [%InquiryID],FirstValue(JournalType) as NextClosingStep, FirstValue (%DateKey) as NextClosingStepDate, FirstValue(JournalDTandTM) as NextClosingContactDate, FirstValue(JournalType) \u0026 \u0027 \u0027 \u0026 FirstValue(%DateKey) as NextClosingStepAndDT",
                                  "Resident JournalActivity ",
                                  "Where JournalClosedFlg=0 and [%DateKey]\u003e=\u0027$(vToday)\u0027 and JournalQlikCategory = \u0027Closing\u0027",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "",
                                  "drop field NextClosingContactDate from NextJournalActivityClosing;",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [NextJournalActivityClosing] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NextJournalActivityClosing.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NextJournalActivityClosing];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "1.6 First Journal Activity",
        "LoadScriptContent":  [
                                  "$tab 1.6 First Journal Activity",
                                  "/Determine the First (non-eLead create) activity by InquiryID and CommunityNumber",
                                  "tempfirst:",
                                  "load %CommunityKey, %InquiryID, JournalType, %DateKey, JournalOwner, JournalClosedFlg, JournalDTandTM, JournalLengthFlg\t//\tkeys",
                                  "resident JournalActivity\t//\tuse journalactivity to feed",
                                  "where JournalClosedFlg=1 and [%DateKey]\u003c=\u0027$(vToday)\u0027  and JournalType\u003c\u003e \u0027Mass Email\u0027",
                                  "// \tand (NOT(Match(JournalType, \u0027Scheduled Tour\u0027, \u0027Unscheduled Tour\u0027, \u0027Virtual Tour\u0027)) or (Match(JournalType, \u0027Scheduled Tour\u0027, \u0027Unscheduled Tour\u0027, \u0027Virtual Tour\u0027) and JournalStatusChangeFlg=0)) //NOT TESTED this works if we need to exclude tours that were cancelled/no show. waiting for confirmation from Sanela that this logic would be correct.",
                                  "",
                                  "order by %CommunityKey, %InquiryID, %DateKey asc;",
                                  "",
                                  "",
                                  "FirstJournalActivity:",
                                  "Load %CommunityKey, [%InquiryID],FirstValue(JournalType) as FirstStep, FirstValue (%DateKey) as FirstStepDate, FirstValue(JournalDTandTM) as FirstContactDate, FirstValue(JournalLengthFlg) as FirstContactLengthFlg",
                                  "Resident tempfirst ",
                                  "Where [%DateKey]\u003c=\u0027$(vToday)\u0027",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "",
                                  "Store [FirstJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_FirstJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table tempfirst;",
                                  "",
                                  "drop table [FirstJournalActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "2.1 B2B Activity",
        "LoadScriptContent":  [
                                  "$tab 2.1 B2B Activity",
                                  "/Step 1: rename fields, only include objective and note for professional outreach",
                                  "[factContactJournalActivity]:",
                                  "LOAD",
                                  " \tApplicationURL as [Organization Dashboard],",
                                  "//     factContactJournalActivityID,",
                                  "    ContactJournalID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CorporationID as %OrganizationID,",
                                  "    ContactID,",
                                  "//     TypeID,",
                                  "    \"Type\" as JournalType,",
                                  "//     TypeCategoryID,",
                                  "//    TypeCategory as JournalTypeCategory,",
                                  "    TypeCategorySEQ as Sequence,",
                                  "    IF(TypeCategorySEQ=1, \u0027Initial\u0027, \u0027Additional\u0027) as SequenceName,",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    EffectiveTM as JournalTime,",
                                  "    Capitalize(Owner) as JournalOwner,",
                                  "    CloseBy as JournalClosedBy,",
                                  "    CloseFlg as JournalClosedFlg,",
                                  "    IF(WildMatch(JournalQlikCategory, \u0027Professional Outreach\u0027), Objective, NULL()) as Objective,",
                                  "    IF(WildMatch(JournalQlikCategory, \u0027Professional Outreach\u0027), Note, NULL()) as Note,",
                                  "    JournalQlikCategory",
                                  "//     ReplicaDT as ContactJournalActivityReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factContactJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: grab descriptive info about the organization",
                                  "Left Join(factContactJournalActivity)",
                                  "LOAD",
                                  "    %OrganizationID,",
                                  "    Organization,",
                                  "    OrganizationStatus,",
                                  "    B2BType,",
                                  "    B2BCategoryType,",
                                  "    B2BCategory,",
                                  "    IsEleadCorporationFlg,",
                                  "    CompetitorID,",
                                  "    Priority,",
                                  "    OutreachFrequency,",
                                  "    NICID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "/Step 3: grab descriptive info about that contact",
                                  "Left Join(factContactJournalActivity)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Contact,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    ContactPhoneWork,",
                                  "    ContactPhoneCell,",
                                  "    ContactPhoneHome,",
                                  "    ContactPriority,",
                                  "    ContactEmail",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "Store [factContactJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factContactJournalActivity.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "2.2 Last B2B Activity",
        "LoadScriptContent":  [
                                  "$tab 2.2 Last B2B Activity",
                                  "/Most recent closed activity by organization",
                                  "LastJournalActivity:",
                                  "Load [%OrganizationID],LastValue(JournalType) as B2BlastStep, LastValue (%DateKey) as B2BLastStepDate",
                                  "Resident factContactJournalActivity ",
                                  "Where JournalClosedFlg=1 and [%DateKey]\u003c=\u0027$(vToday)\u0027",
                                  "Group By %OrganizationID",
                                  "Order By %DateKey;",
                                  "",
                                  "Store [LastJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_LastB2BActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [LastJournalActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "2.3 Next B2B Activity",
        "LoadScriptContent":  [
                                  "$tab 2.3 Next B2B Activity",
                                  "/Next upcoming open activity by organization",
                                  "NextB2BActivity:",
                                  "Load [%OrganizationID],FirstValue(JournalType) as B2BNextStep, FirstValue (%DateKey) as B2BNextStepDate, FirstValue (Objective) as B2BNextStepObjective",
                                  "Resident factContactJournalActivity ",
                                  "Where JournalClosedFlg=0 and [%DateKey]\u003e=\u0027$(vToday)\u0027",
                                  "Group By %OrganizationID",
                                  "Order By %DateKey;",
                                  "",
                                  "drop table [factContactJournalActivity];",
                                  "",
                                  "Store [NextB2BActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NextB2BActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NextB2BActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "3.1 Detail with Review Round",
        "LoadScriptContent":  [
                                  "$tab 3.1 Detail with Review Round",
                                  "// Roll up similar but differently formatted questions into a single common question-- see line 23",
                                  "map_question_id:",
                                  "MAPPING LOAD\t\"Source Question ID\", ",
                                  "\t\t\t\t\"Roll Up Into Question ID\"",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Quality/QMS Roll Ups.xlsx]",
                                  "(ooxml, embedded labels, table is [2.11.21]);",
                                  "",
                                  "/Rename indicators and sections as need (want to make sure we aggregate sections that are used for multiple residents)",
                                  "TempDetail:",
                                  "LOAD",
                                  "//     factCommunityReviewDetailID,",
                                  "    ReviewID as [%ReviewIDKey],",
                                  "    ResponseID,",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    IndicatorID,",
                                  "    IF(Indicator=\u0027Housekeeping\u0027 OR Indicator=\u0027HouseKeeping\u0027 OR Indicator=\u0027(Old) Housekeeping\u0027 OR Indicator=\u0027(Old) HouseKeeping\u0027, \u0027Housekeeping\u0027, Indicator) as [IndicatorDept],",
                                  "    SectionID,",
                                  "    Trim(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Section, \u0027 - Resident 1\u0027, \u0027\u0027), \u0027 - Resident 2\u0027, \u0027\u0027), \u0027 - Resident 3\u0027, \u0027\u0027)",
                                  "    \t, \u0027 - Nurse 3\u0027, \u0027\u0027), \u0027 - Nurse 3\u0027, \u0027\u0027), \u0027 - Nurse 3\u0027, \u0027\u0027), \u0027 - RSA 3\u0027, \u0027\u0027), \u0027 - RSA 3\u0027, \u0027\u0027), \u0027 - RSA 3\u0027, \u0027\u0027)) as ReviewSection,",
                                  "//     IF(\"Section\"=\u0027Resident Apartment Review - Resident 1\u0027 OR \"Section\"=\u0027Resident Apartment Review - Resident 2\u0027 OR \"Section\"=\u0027Resident Apartment Review - Resident 3\u0027",
                                  "//         OR \"Section\"=\u0027Resident Apartment Review - Resident 4\u0027 OR \"Section\"=\u0027Resident Apartment Review - Resident 5\u0027 OR \"Section\"=\u0027Resident Apartment Review - Resident 6\u0027, ",
                                  "//         \u0027Resident Apartment Review\u0027, \"Section\") as ReviewSection,",
                                  "     ApplyMap(\u0027map_question_id\u0027, QuestionID, QuestionID) as ReviewQuestionID,",
                                  "     QuestionID as ReviewQuestionIDOld,",
                                  "//     QuestionNumber,",
                                  "//     Question as ReviewQuestion,",
                                  "    QuestionScore,",
                                  "//     AnswerID,",
                                  "    Answer as ReviewAnswer,",
                                  "    IF(Indicator=\u0027No Count\u0027, IF(Answer=\u0027Pass\u0027, 1, 0),AnswerScore) as AnswerScore, No Count are not given a score by default",
                                  "    \"Comment\" as ReviewComment",
                                  "//     CreateBy as ReviewDetailCreateBy,",
                                  "//     date(floor(CreateDT)) as [%DateKey]",
                                  "//     ModifyBy as ReviewDetailModifyBy",
                                  "//     date(floor(ModifyDT)) as ReviewDetailModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReviewDetail.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Later the PTC load has some Custom items, want them to be able to left join to the detail table. ",
                                  "Concatenate(TempDetail)",
                                  "LOAD DISTINCT",
                                  "//     factCommunityReviewDetailID,",
                                  "    ReviewID as [%ReviewIDKey],",
                                  "    \u0027Custom\u0027 as ResponseID",
                                  "//     CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReview.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Only want Closed/Whatever is included in the CommunityReview load.",
                                  "INNER JOIN(TempDetail)",
                                  "LOAD",
                                  "//     factCommunityReviewID,",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/Review?CommunityReviewID=\u0027\u0026 ReviewID as ReviewDashboard,",
                                  "    ReviewID as %ReviewIDKey,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     ReviewStatusID,",
                                  "    ReviewStatus,",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    DocumentYear as ReviewYear,",
                                  "    DocumentPeriod as ReviewRound,",
                                  "    DocumentYear \u0026 \u0027-\u0027 \u0026 DocumentPeriod as ReviewYearAndRound,",
                                  "    POCID as ReviewPOCID,",
                                  "//     POCStatusID,",
                                  "    POCStatus,",
                                  "    POCURL as ReviewPOCURL,",
                                  "//     ScoreAdjusted,",
                                  "//     QAwardFlg,",
                                  "    Capitalize(CreateBy) as ReviewCreateBy,",
                                  "    RptExecutiveDirectorNewHireFlg as EDNewHireFlg,",
                                  "    ExecutiveDirectorFlg,",
                                  "    IF(MaxReviewID=ReviewID, \u0027Yes\u0027,\u0027No\u0027) as MostEffectiveFlg",
                                  "//     CreateDT,",
                                  "//     ModifyBy,",
                                  "//     ModifyDT,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReview.qvd]",
                                  "(qvd)",
                                  "Where ReviewStatus=\u0027Close\u0027;",
                                  "",
                                  "/ Want to use Current wording for the Questions, not wording when they were asked. Also combining questions that are asked for multiple residents/apartments.",
                                  "Left Join(TempDetail)",
                                  "LOAD",
                                  "    QuestionID as ReviewQuestionID,",
                                  "    Trim(Replace(Replace(Replace(Replace(Replace(Replace(Replace(",
                                  "    \tQuestion, \u0027Apartment 1: \u0027, \u0027\u0027), \u0027Apartment 2: \u0027, \u0027\u0027), \u0027Apartment 3: \u0027, \u0027\u0027), \u0027Apartment #1 - \u0027, \u0027\u0027), \u0027Apartment #2 - \u0027, \u0027\u0027), \u0027Apartment #3 - \u0027, \u0027\u0027), \u0027QMS: \u0027, \u0027\u0027)) as ReviewQuestion",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_QEtblQuestion.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/Grabbing Current IndicatorID, not IndicatorID at time it was asked.",
                                  "Left Join(TempDetail)",
                                  "LOAD QuestionID as ReviewQuestionID,",
                                  "    IndicatorID as CurrentIndicatorID;",
                                  "SQL SELECT tblQuestionExtension.QuestionExtensionID,",
                                  "    QuestionID,",
                                  "    SurveyID,",
                                  "    IndicatorID",
                                  "FROM BusinessData.QMS.tblQuestionExtension",
                                  "left join (",
                                  "\tSelect \tQuestionExtensionID,",
                                  "    \t\tIndicatorID ",
                                  "\tFROM BusinessData.QMS.lnkScoreIndicatorToQuestion) lnkScoreIndicatorToQuestion",
                                  "ON lnkScoreIndicatorToQuestion.QuestionExtensionID = tblQuestionExtension.QuestionExtensionID",
                                  ";",
                                  "",
                                  "/Grabbing Current SectionID, not SectionID at time it was asked.",
                                  "Left Join(TempDetail)",
                                  "LOAD QuestionID as ReviewQuestionID,",
                                  "    SectionID as CurrentSectionID;",
                                  "SQL SELECT tblQuestionExtension.QuestionExtensionID,",
                                  "    QuestionID,",
                                  "    SurveyID,",
                                  "    SectionID",
                                  "FROM BusinessData.QMS.tblQuestionExtension",
                                  "left join (",
                                  "\tSelect\tQuestionExtensionID,",
                                  "    \t\tSectionExtensionID",
                                  "\tFROM\tBusinessData.QMS.lnkQuestionToSection) lnkQuestionToSection",
                                  "ON lnkQuestionToSection.QuestionExtensionID = tblQuestionExtension.QuestionExtensionID",
                                  "left join (",
                                  "\tSelect \tSectionExtensionID,",
                                  "    \t\tSectionID ",
                                  "\tFROM BusinessData.QMS.tblSectionExtension) tblSectionExtension",
                                  "ON tblSectionExtension.SectionExtensionID = lnkQuestionToSection.SectionExtensionID",
                                  ";",
                                  "",
                                  "/Grabbing Current Indicator Name",
                                  "Left Join(TempDetail)",
                                  "LOAD IndicatorID as CurrentIndicatorID,",
                                  "    IF(Indicator=\u0027Housekeeping\u0027 OR Indicator=\u0027HouseKeeping\u0027 OR Indicator=\u0027(Old) Housekeeping\u0027 OR Indicator=\u0027(Old) HouseKeeping\u0027, \u0027Housekeeping\u0027, Indicator) as [CurrentIndicatorDept];",
                                  "SQL SELECT IndicatorID,",
                                  "    \"Indicator\"",
                                  "FROM BusinessData.QMS.luScoreIndicator;",
                                  "",
                                  "/Grabbing Current Section Name (and renaming to aggregate if the section is duplicated for multiple residents)",
                                  "Left Join(TempDetail)",
                                  "LOAD SectionID as CurrentSectionID,",
                                  "    Trim(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(SectionName, \u0027 - Resident 1\u0027, \u0027\u0027), \u0027 - Resident 2\u0027, \u0027\u0027), \u0027 - Resident 3\u0027, \u0027\u0027)",
                                  "    \t, \u0027 - Nurse 3\u0027, \u0027\u0027), \u0027 - Nurse 3\u0027, \u0027\u0027), \u0027 - Nurse 3\u0027, \u0027\u0027), \u0027 - RSA 3\u0027, \u0027\u0027), \u0027 - RSA 3\u0027, \u0027\u0027), \u0027 - RSA 3\u0027, \u0027\u0027)) as CurrentReviewSection;",
                                  "SQL SELECT SectionID,",
                                  "    SectionName",
                                  "FROM BusinessData.QMS.tblSection;",
                                  "",
                                  "",
                                  "",
                                  "/Grabbing ChoiceTypeID (Pass/No Pass, etc.)",
                                  "Left Join(TempDetail)",
                                  "LOAD",
                                  "    ChoiceTypeID,",
                                  "    QuestionID as ReviewQuestionID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_QElnkQuestionToChoiceType.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Grabbing the User\u0027s Job Code",
                                  "LEFT JOIN(TempDetail)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as ReviewCreateBy,",
                                  "//     EMPLID,",
                                  "//     Department as UserDepartment,",
                                  "    JobCode as UserJobCode",
                                  "//     JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "/Joing PTC information to the question",
                                  "LEFT JOIN(TempDetail)",
                                  "LOAD",
                                  "    PlanOfCorrectionResponseId as POCResponseID,",
                                  "    PlanOfCorrectionId as ReviewPOCID,",
                                  "    IF(CustomFlg=1, \u0027Custom\u0027, CommunityReviewResponseId) as ResponseID,",
                                  "    PlanOfCorrectionResponseStatusId as PlanOfCorrectionResponseStatusID,",
                                  "    IF(Owner = 0, NULL(), Owner) as POCOwner,",
                                  "    Goal as POCGoal,",
                                  "    Result as POCResult,",
                                  "//     CreateDT,",
                                  "//     CreateBy,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     ActiveFlg,",
                                  "    Date(Floor(DueDt)) as POCDueDT",
                                  "//     QuestionID,",
                                  "//     CustomFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReviewPOC.qvd]",
                                  "(qvd);",
                                  "",
                                  "/get status for the PTC line item",
                                  "LEFT JOIN(TempDetail)",
                                  "LOAD",
                                  "    PlanOfCorrectionResponseStatusID,",
                                  "    Status as POCResponseStatus",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_QEluPlanOfCorrectionResponseStatus.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [TempDetail] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPDetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "drop table TempDetail;",
                                  "",
                                  "Detail:",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    ReviewCreateBy,",
                                  "    ReviewQuestionID,",
                                  "    ReviewQuestionIDOld,",
                                  "    %ReviewIDKey,",
                                  "    ResponseID,",
                                  "    IndicatorID,",
                                  "    IndicatorDept,",
                                  "    SectionID,",
                                  "    ReviewSection,",
                                  "    CurrentIndicatorDept,",
                                  "    CurrentIndicatorID,",
                                  "    CurrentReviewSection,",
                                  "    CurrentSectionID,",
                                  "    QuestionScore,",
                                  "    ReviewAnswer,",
                                  "    IF(ReviewYear\u003e=2018 and IndicatorDept=\u0027First Impressions\u0027, AnswerScore/5, AnswerScore) as AnswerScore, //Scoring mechanism changed in 2018.",
                                  "    ReviewComment,",
                                  "    ReviewDashboard,",
                                  "    ReviewStatus,",
                                  "    %DateKey,",
                                  "    ReviewPOCID,",
                                  "    ReviewYear,",
                                  "    ReviewRound,",
                                  "    ReviewYearAndRound,",
                                  "    POCStatus,",
                                  "    ReviewPOCURL,",
                                  "    ReviewQuestion,",
                                  "    ChoiceTypeID,",
                                  "    UserJobCode,",
                                  "    POCResponseID,",
                                  "    POCOwner,",
                                  "    POCGoal,",
                                  "    POCDueDT,",
                                  "    POCResult,",
                                  "    POCResponseStatus,",
                                  "    EDNewHireFlg,",
                                  "    ExecutiveDirectorFlg,",
                                  "    MostEffectiveFlg",
                                  "//     DMD,",
                                  "//     DDCS,",
                                  "//     DDLGO,",
                                  "//     DELID,",
                                  "//     DDCM,",
                                  "//     BOS",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPDetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "",
                                  "left join (Detail)",
                                  "Load",
                                  "SurveyName,",
                                  "[%ReviewIDKey]",
                                  "from [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_QESurveyNames.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [Detail] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_DetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "drop table Detail;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "3.2 Placeholder- Detail with Review Round",
        "LoadScriptContent":  [
                                  "$tab 3.2 Placeholder- Detail with Review Round",
                                  "//The purpose of this script is to fix an issue with the drill down dimension in the QE app. Creating a value for each possible round/question/community",
                                  "Placeholder:",
                                  "LOAD DISTINCT",
                                  "    ReviewQuestionID,",
                                  "    IndicatorID,",
                                  "    IndicatorDept,",
                                  "    SectionID,",
                                  "    ReviewSection,",
                                  "    ReviewQuestion,",
                                  "    ChoiceTypeID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_DetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "",
                                  "Join (Placeholder)",
                                  "LOAD DISTINCT",
                                  "    ReviewYear,",
                                  "    ReviewRound,",
                                  "    ReviewYearAndRound",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_DetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "",
                                  "Join(Placeholder)",
                                  "LOAD DISTINCT",
                                  "    %CommunityKey",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [Placeholder] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_PlaceholderDetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "drop table Placeholder;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.1 Resident Assessed Care Type",
        "LoadScriptContent":  [
                                  "$tab 4.1 Resident Assessed Care Type",
                                  "/Step 1: Get most effective care assessment date by customer",
                                  "factResidentAssessedCareType:",
                                  "Load ",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as CareTypeAssessedDate",
                                  "//     CareType",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentCarePrimary.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID;",
                                  "",
                                  "/Step 2: Get maximum CareHistoryID for that most effective assessment date by customer",
                                  "LEFT JOIN (factResidentAssessedCareType)",
                                  "Load ",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as CareTypeAssessedDate,",
                                  "//     CareType,",
                                  "//     Care as CareLevel,",
                                  "    Max(CareHistoryID) as CareHistoryID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentCarePrimary.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID, Date(Floor(EffectiveDT));",
                                  "",
                                  "/Step 3: Now that we have most effective assessment, get care type, level, rate",
                                  "LEFT JOIN (factResidentAssessedCareType)",
                                  "Load ",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as CareTypeAssessedDate,",
                                  "    CareType as AssessedCareType,",
                                  "    Care as AssessedCareLevel,",
                                  "    PriceBase as AssessedCareRate,",
                                  "    CareHistoryID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentCarePrimary.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [factResidentAssessedCareType] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedCareType.qvd]",
                                  "(qvd);",
                                  "drop Table factResidentAssessedCareType;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.2 Resident Assessed Med Level",
        "LoadScriptContent":  [
                                  "$tab 4.2 Resident Assessed Med Level",
                                  "/Step 1: Ancillary Care where SeriesID=1 i.e., Med Management",
                                  "MedManagement:",
                                  "LOAD * ",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentCareAncillary.qvd]",
                                  "(qvd)",
                                  "where SeriesID=1;",
                                  "",
                                  "/Step 2: Get most effective assessment date by customer",
                                  "factResidentCurrentMed:",
                                  "Load ",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as CareMedAssessedDate",
                                  "Resident MedManagement",
                                  "Group By CustomerID;",
                                  "",
                                  "/Step 3: Get maximum CareHistoryID for the most effective assessment date by customer",
                                  "LEFT JOIN (factResidentCurrentMed)",
                                  "Load ",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as CareMedAssessedDate,",
                                  "    Max(CareHistoryID) as CareHistoryID",
                                  "Resident MedManagement",
                                  "Group By CustomerID, Date(Floor(EffectiveDT));",
                                  "",
                                  "/Step 4: Now that we have most effective assessment, get med level, rate",
                                  "LEFT JOIN (factResidentCurrentMed)",
                                  "Load DISTINCT",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as CareMedAssessedDate,",
                                  "    CareAncillary as AssessedMedLevel,",
                                  "    PriceBase as AssessedMedRate,",
                                  "    CareHistoryID",
                                  "Resident MedManagement;",
                                  "",
                                  "Drop Table MedManagement;",
                                  "Store [factResidentCurrentMed] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedMed.qvd]",
                                  "(qvd);",
                                  "drop Table factResidentCurrentMed;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.3 Most Effective Billed Care",
        "LoadScriptContent":  [
                                  "$tab 4.3 Most Effective Billed Care",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "/ Step 1.1: Get all care history",
                                  "BilledCareTEMP:",
                                  "LOAD ResidentCarePrimaryID,",
                                  "//     CommunityID,",
                                  "    Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    CareID;",
                                  "//     \"Rate\",",
                                  "//     CreateDT,",
                                  "//     CreateBY,",
                                  "//     ModifyDT,",
                                  "//     ModifyBY,",
                                  "//     ActiveFlg;",
                                  "SQL SELECT ResidentCarePrimaryID,",
                                  "//     CommunityID,",
                                  "    EffectiveDT,",
                                  "    CustomerID,",
                                  "    CareID,",
                                  "    ActiveFlg",
                                  "FROM BusinessData.ARM.tblResidentCarePrimary",
                                  "Where ActiveFlg=1;",
                                  "",
                                  "/ Step 1.2: grab care level and caretypeid",
                                  "Inner Join (BilledCareTEMP)",
                                  "LOAD CareID,",
                                  "    CareLevel,",
                                  "    CareTypeID;",
                                  "SQL SELECT CareID,",
                                  "    CareLevel,",
                                  "    CareTypeID",
                                  "FROM BusinessData.ARM.luCare;",
                                  "",
                                  "/Step 1.3: grab care type",
                                  "Inner Join (BilledCareTEMP)",
                                  "LOAD CareTypeID,",
                                  "    CareType;",
                                  "SQL SELECT CareTypeID,",
                                  "    CareType",
                                  "FROM BusinessData.ARM.luCareType;",
                                  "",
                                  "/Step 1.4: Rank to eliminate duplicates on the same effective dt, and only take most relevant.",
                                  "Inner Join (BilledCareTEMP)",
                                  "LOAD ResidentCarePrimaryID,",
                                  "//     CommunityID,",
                                  "//     Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "//     CustomerID as [%CustomerIDKey],",
                                  "//     CareID,",
                                  "    Ranking",
                                  "//     \"Rate\",",
                                  "//     CreateDT,",
                                  "//     CreateBY,",
                                  "//     ModifyDT,",
                                  "//     ModifyBY,",
                                  "//     ActiveFlg;",
                                  "where Ranking=1;",
                                  "SQL SELECT ResidentCarePrimaryID,",
                                  "//     CommunityID,",
                                  "    EffectiveDT,",
                                  "    CustomerID,",
                                  "    CareID,",
                                  "    ActiveFlg,",
                                  "    Rank() OVER",
                                  "\t\t\t\t(PARTITION BY CustomerID order by CustomerID, EffectiveDT desc, ResidentCarePrimaryID desc) as Ranking",
                                  "FROM BusinessData.ARM.tblResidentCarePrimary",
                                  "Where ActiveFlg=1;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.4 RentRoll",
        "LoadScriptContent":  [
                                  "$tab 4.4 RentRoll",
                                  "/Step 1: All residents with Moved In or Moved Back status (all current residents)",
                                  "TEMPvwCurrentResidents:",
                                  " LOAD",
                                  "//  KeyID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "//  CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//  InquiryID,",
                                  "  \tBillingID,",
                                  "    \"Resident\",",
                                  "    StatusID,",
                                  " Address1,",
                                  " Address2,",
                                  " City,",
                                  " State,",
                                  " PostalCode,",
                                  " Country,",
                                  "//  Longitude,",
                                  "//  Latitude,",
                                  "//  StatusID,",
                                  " Gender,",
                                  " date(floor(BirthDT))as DOB",
                                  "//  Age(today(),BirthDT)as Age",
                                  "//  CreateDT,",
                                  "//  ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd)",
                                  "where StatusID=\u00276\u0027 or StatusID=\u00277\u0027;",
                                  "",
                                  "/Step 2: Get lowest possible service available at the community",
                                  "Left Join(TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    LowestService",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 3: Get relevant inquiry information (mostly used in the professional sales routing kit app)",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD ",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "\tReferralCategoryType as ReferralBucket, ",
                                  "\tReferralCategory,",
                                  "\tReferralSource as Organization,",
                                  "\tReferralSourceID as %OrganizationID,",
                                  "\tReferredBy,",
                                  "    ReferredByID as ContactID,",
                                  "   ",
                                  "    SecondaryReferralCategoryType as SecondaryReferralBucket,",
                                  "//     SecondaryReferralCategory, NOT POPULATED IN ATRIADW",
                                  "//     SecondaryReferralType,",
                                  "    SecondaryReferralSourceID as SecondaryOrganizationID,",
                                  "    SecondaryReferralSource as SecondaryOrganization,",
                                  "//     SecondaryReferredByID, NOT POPULATED IN ATRIADW",
                                  "    SecondaryReferredBy",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 4: Get relevant information regarding the referral contact",
                                  "Left Join(TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 5: Get today\u0027s rent, payor type, etc. for current residents",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     ResidentRoomID,",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "    ProductInventoryID,",
                                  "//     EffectiveDt,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    RoomNumber,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    \"Rate\" as CurrentRent,",
                                  "//     EventType,",
                                  "    IsPhysicalPresentFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentRoom.qvd]",
                                  "(qvd)",
                                  "where date(floor(EffectiveDt))= date(floor(today()));",
                                  "",
                                  "/Step 6: Get the assessed care information",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD DISTINCT",
                                  "    %CustomerIDKey,",
                                  "//     CareTypeDate,",
                                  "\tIF(AssessedCareType=\u0027Independent Living\u0027, \u0027IL\u0027, IF(AssessedCareType=\u0027Assisted Living\u0027, \u0027AL\u0027, IF(AssessedCareType=\u0027Memory Care\u0027, \u0027LG\u0027))) as AssessedCareType,",
                                  "    AssessedCareLevel,",
                                  "    AssessedCareRate",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedCareType.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 7: Get assessed med information",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD Distinct",
                                  "\t%CustomerIDKey,",
                                  "    AssessedMedLevel,",
                                  "    AssessedMedRate",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedMed.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 8: Get billed care information",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD [%CustomerIDKey],",
                                  "\tCareLevel as BilledCareLevel,",
                                  "    CareType as BilledCareType",
                                  "Resident BilledCareTEMP;",
                                  "",
                                  "",
                                  "/Step 9: Get current street and selling rate for their current room",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     mstrProductInventoryID,",
                                  "//     CommunityID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    PriceSpecial as SpecialRate,",
                                  "    PriceBase as StreetRate,",
                                  "    RoomTypeStyleCode",
                                  "    ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 10: Get move in date",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    DATE(MAX(FLOOR(MoveInDt))) as MoveInDt",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID;",
                                  "",
                                  "/Step 11: Get lease start DT, which can be different than move in date.",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     ResidentLeaseSegmentID,",
                                  "//     LeaseID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(MAX(Floor(LeaseSegmentStartDT))) as LeaseSegmentStartDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factLeaseSegment.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID;",
                                  "",
                                  "/Step 12: Grab the scheduled move out date (if it exists for the customer)",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     factResidentMoveOutScheduleID,",
                                  "//     ResidentMoveOutScheduleID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     MoveOutDT as %DateKey,",
                                  "    Date(Floor(MoveOutDT)) as ScheduledMoveOutDT",
                                  "//     Date(Floor(NoticeDT)) as ScheduledMoveOutNoticeDT,",
                                  "//     OutboundCategory as LostCategory, ",
                                  "// \tOutboundLocationID as LostLocationID,",
                                  "//     OutboundLocation as LostLocation,",
                                  "//     OutboundLocationType as LostLocationType,",
                                  "//     OutboundInfluence as MoveOutReason,",
                                  "//     Note as ScheduledMoveOutNote,",
                                  "//     \u0027https://rms.atriacom.com/Application/ResidentManagement/LeaseDashboard.aspx?CustomerID=\u0027\u0026CustomerID\u0026\u0027\u0026CommunityNumber=\u0027\u0026 [CommunityNumber] as ARMLeaseManagement",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 13: rename fields. If no assessment is available, assume lowest service level at the community.",
                                  "vwCurrentResidents:",
                                  "LOAD",
                                  "\u0027https://cms.atriacom.com/Application/arm/CareManagement/ResidentDashboard.aspx?CommunityNumber=\u0027 \u0026 %CommunityKey \u0026\u0027\u0026CustomerID=\u0027\u0026 %CustomerIDKey as ARCResidentDashboard,",
                                  "\u0027https://rms.atriacom.com/Application/ResidentManagement/LeaseDashboard.aspx?CustomerID=\u0027\u0026%CustomerIDKey\u0026\u0027\u0026CommunityNumber=\u0027\u0026 [%CommunityKey] as ARMLeaseManagement,",
                                  "\t%CustomerIDKey,",
                                  "    %CommunityKey,",
                                  "  \tBillingID,",
                                  "    \"Resident\",",
                                  "    ReferralBucket,",
                                  "    ReferralCategory,",
                                  "\tOrganization,",
                                  "\t%OrganizationID,",
                                  "\tReferredBy,",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    ProductInventoryID,",
                                  "    RoomNumber,",
                                  "    PayorType,",
                                  "    CurrentRent,",
                                  "    SpecialRate,",
                                  "    StreetRate,",
                                  "    RoomTypeStyleCode,",
                                  "    AssessedCareRate,",
                                  "    AssessedMedRate,",
                                  "    IsPhysicalPresentFlg,",
                                  "    IF(ISNULL(AssessedCareType), LowestService, AssessedCareType)  as AssessedCareType,",
                                  "    IF(ISNULL(AssessedCareLevel), LowestService, AssessedCareLevel) as AssessedCareLevel,",
                                  "    IF(ISNULL(AssessedMedLevel), LowestService, AssessedMedLevel) as AssessedMedLevel,",
                                  "    IF(StatusID=6, \u0027Moved In\u0027, IF(StatusID=7, \u0027Moved Back\u0027, NULL())) as Status,",
                                  "    IF(ISNULL(MoveInDt), LeaseSegmentStartDT, MoveInDt) as MoveInDt,",
                                  "    ScheduledMoveOutDT,",
                                  "    Address1,",
                                  "    Address2,",
                                  "\tCity,",
                                  "    State,",
                                  "\tPostalCode,",
                                  " \tCountry,",
                                  "    Gender,",
                                  "    DOB,",
                                  "    BilledCareType,",
                                  "    BilledCareLevel",
                                  "Resident TEMPvwCurrentResidents;",
                                  "",
                                  "Store [vwCurrentResidents] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrRentRoll.qvd]",
                                  "(qvd);",
                                  "drop Table [vwCurrentResidents];",
                                  "",
                                  "GenderByProductInventoryID:",
                                  "LOAD",
                                  "\tProductInventoryID,",
                                  "    Concat( distinct Gender, \u0027, \u0027) as Gender",
                                  "Resident TEMPvwCurrentResidents",
                                  "Where LEN(TRIM(Gender))=1",
                                  "Group by ProductInventoryID;",
                                  "Drop Table TEMPvwCurrentResidents;",
                                  "",
                                  "Store [GenderByProductInventoryID] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_GenderByProductInventoryID.qvd]",
                                  "(qvd);",
                                  "drop Table [GenderByProductInventoryID];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.5 Past and Current Residents",
        "LoadScriptContent":  [
                                  "$tab 4.5 Past and Current Residents",
                                  "/Step 1: Moved In, Moved Back, Moved Out, Deceased (would not include anyone who was a resident, moved, and has moved back into the sales cycle (hot, warm, waitlist, etc.)",
                                  "TEMPvwPastAndCurrentResidents:",
                                  " LOAD",
                                  "//  KeyID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "//  CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//  InquiryID,",
                                  "  \tBillingID,",
                                  "    \"Resident\",",
                                  "    StatusID,",
                                  " Address1,",
                                  " Address2,",
                                  " City,",
                                  " State,",
                                  " PostalCode,",
                                  " Country,",
                                  "//  Longitude,",
                                  "//  Latitude,",
                                  "//  StatusID,",
                                  "//  Gender,",
                                  " date(floor(BirthDT))as DOB,",
                                  " CustomerAccountTypeID,",
                                  " CustomerType",
                                  "//  Age(today(),BirthDT)as Age",
                                  "//  CreateDT,",
                                  "//  ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomerWithAdditionalRmAcct.qvd]",
                                  "(qvd)",
                                  "where StatusID=\u00276\u0027 or StatusID=\u00277\u0027 or StatusID=\u00278\u0027 or StatusID=\u002710\u0027;",
                                  "",
                                  "/Step 2: Get lowest possible service available at the community",
                                  "Left Join(TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    LowestService",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 3: Get relevant inquiry information (mostly used in the professional sales routing kit app)",
                                  "Left Join (TEMPvwPastAndCurrentResidents)",
                                  "LOAD ",
                                  "\tCommunityNumber as [%CommunityKey],",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "\tReferralCategoryType as ReferralBucket, ",
                                  "\tReferralCategory,",
                                  "\tReferralSource as Organization,",
                                  "\tReferralSourceID as %OrganizationID,",
                                  "\tReferredBy,",
                                  "    ReferredByID as ContactID,",
                                  "   ",
                                  "    SecondaryReferralCategoryType as SecondaryReferralBucket,",
                                  "//     SecondaryReferralCategory, NOT POPULATED IN ATRIADW",
                                  "//     SecondaryReferralType,",
                                  "    SecondaryReferralSourceID as SecondaryOrganizationID,",
                                  "    SecondaryReferralSource as SecondaryOrganization,",
                                  "//     SecondaryReferredByID, NOT POPULATED IN ATRIADW",
                                  "    SecondaryReferredBy",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 4: Get relevant information regarding the referral contact",
                                  "Left Join(TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 5: Get today\u0027s rent, payor type, etc. for current residents",
                                  "Left Join (TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "//     ResidentRoomID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    ProductInventoryID,",
                                  "//     Date(Floor(EffectiveDt)) as EffectiveDt,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    RoomNumber,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    \"Rate\" as CurrentRent,",
                                  "//     EventType,",
                                  "    IsPhysicalPresentFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentRoom.qvd]",
                                  "(qvd)",
                                  "where factResidentRoomRank = 1;",
                                  "",
                                  "/Step 6: Get the assessed care information",
                                  "LEFT JOIN (TEMPvwPastAndCurrentResidents)",
                                  "LOAD DISTINCT",
                                  "    %CustomerIDKey,",
                                  "//     CareTypeDate,",
                                  "\tIF(AssessedCareType=\u0027Independent Living\u0027, \u0027IL\u0027, IF(AssessedCareType=\u0027Assisted Living\u0027, \u0027AL\u0027, IF(AssessedCareType=\u0027Memory Care\u0027, \u0027LG\u0027))) as AssessedCareType,",
                                  "    AssessedCareLevel,",
                                  "    AssessedCareRate",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedCareType.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 7: Get assessed med information",
                                  "LEFT JOIN (TEMPvwPastAndCurrentResidents)",
                                  "LOAD Distinct",
                                  "\t%CustomerIDKey,",
                                  "    AssessedMedLevel,",
                                  "    AssessedMedRate",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedMed.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 8: Get billed care information",
                                  "LEFT JOIN (TEMPvwPastAndCurrentResidents)",
                                  "LOAD [%CustomerIDKey],",
                                  "\tCareLevel as BilledCareLevel,",
                                  "    CareType as BilledCareType",
                                  "Resident BilledCareTEMP;",
                                  "Drop Table BilledCareTEMP;",
                                  "",
                                  "/Step 9: Get current street and selling rate for their current room",
                                  "LEFT JOIN (TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "//     mstrProductInventoryID,",
                                  "//     CommunityID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    PriceSpecial as SpecialRate,",
                                  "    PriceBase as StreetRate,",
                                  "    RoomTypeStyleCode",
                                  "    ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 10: Get move in date",
                                  "Left Join (TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    DATE(MAX(FLOOR(MoveInDt))) as MoveInDt",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd]",
                                  "(qvd)",
                                  "Group By CommunityNumber, CustomerID;",
                                  "",
                                  "",
                                  "/Step 11: Get lease start DT, which can be different than move in date.",
                                  "LEFT JOIN (TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "//     ResidentLeaseSegmentID,",
                                  "//     LeaseID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(MAX(Floor(LeaseSegmentStartDT))) as LeaseSegmentStartDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factLeaseSegment.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID;",
                                  "",
                                  "/Step 12: Grab the scheduled move out date (if it exists for the customer)",
                                  "Left Join (TEMPvwPastAndCurrentResidents)",
                                  "LOAD",
                                  "//     factResidentMoveOutScheduleID,",
                                  "//     ResidentMoveOutScheduleID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     MoveOutDT as %DateKey,",
                                  "    Date(Floor(MoveOutDT)) as ScheduledMoveOutDT",
                                  "//     Date(Floor(NoticeDT)) as ScheduledMoveOutNoticeDT,",
                                  "//     OutboundCategory as LostCategory, ",
                                  "// \tOutboundLocationID as LostLocationID,",
                                  "//     OutboundLocation as LostLocation,",
                                  "//     OutboundLocationType as LostLocationType,",
                                  "//     OutboundInfluence as MoveOutReason,",
                                  "//     Note as ScheduledMoveOutNote,",
                                  "//     \u0027https://rms.atriacom.com/Application/ResidentManagement/LeaseDashboard.aspx?CustomerID=\u0027\u0026CustomerID\u0026\u0027\u0026CommunityNumber=\u0027\u0026 [CommunityNumber] as ARMLeaseManagement",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 13: rename fields. If no assessment is available, assume lowest service level at the community.",
                                  "vwPastAndCurrentResidentsWithAddtlRmAcct:",
                                  "LOAD",
                                  "\u0027https://cms.atriacom.com/Application/arm/CareManagement/ResidentDashboard.aspx?CommunityNumber=\u0027 \u0026 %CommunityKey \u0026\u0027\u0026CustomerID=\u0027\u0026 %CustomerIDKey as ARCResidentDashboard,",
                                  "\u0027https://rms.atriacom.com/Application/ResidentManagement/LeaseDashboard.aspx?CustomerID=\u0027\u0026%CustomerIDKey\u0026\u0027\u0026CommunityNumber=\u0027\u0026 [%CommunityKey] as ARMLeaseManagement,",
                                  "\t%CustomerIDKey,",
                                  "    %CommunityKey,",
                                  "  \tBillingID,",
                                  "    \"Resident\",",
                                  "    ReferralBucket,",
                                  "    ReferralCategory,",
                                  "\tOrganization,",
                                  "\t%OrganizationID,",
                                  "\tReferredBy,",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    RoomNumber,",
                                  "    PayorType,",
                                  "    CurrentRent,",
                                  "    SpecialRate,",
                                  "    StreetRate,",
                                  "    RoomTypeStyleCode,",
                                  "    AssessedCareRate,",
                                  "    AssessedMedRate,",
                                  "    IsPhysicalPresentFlg,",
                                  "    IF(ISNULL(AssessedCareType), LowestService, AssessedCareType)  as AssessedCareType,",
                                  "    IF(ISNULL(AssessedCareLevel), LowestService, AssessedCareLevel) as AssessedCareLevel,",
                                  "    IF(ISNULL(AssessedMedLevel), LowestService, AssessedMedLevel) as AssessedMedLevel,",
                                  "    IF(StatusID=6, \u0027Moved In\u0027, IF(StatusID=7, \u0027Moved Back\u0027, IF(StatusID=8, \u0027Moved Out\u0027, IF(StatusID=10, \u0027Deceased\u0027, NULL())))) as Status,",
                                  "    IF(ISNULL(MoveInDt), LeaseSegmentStartDT, MoveInDt) as MoveInDt,",
                                  "    ScheduledMoveOutDT,",
                                  "    Address1,",
                                  "    Address2,",
                                  "\tCity,",
                                  "    State,",
                                  "\tPostalCode,",
                                  " \tCountry,",
                                  "    DOB,",
                                  "    BilledCareType,",
                                  "    BilledCareLevel,",
                                  "    CustomerAccountTypeID,",
                                  "    CustomerType",
                                  "Resident TEMPvwPastAndCurrentResidents;",
                                  "Drop Table TEMPvwPastAndCurrentResidents;",
                                  "",
                                  "Store [vwPastAndCurrentResidentsWithAddtlRmAcct] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrPastAndCurrentResidentsWithAddtlRmAcct.qvd]",
                                  "(qvd);",
                                  "",
                                  "vwPastAndCurrentResidents:",
                                  "NoConcatenate",
                                  "LOAD *",
                                  "Resident vwPastAndCurrentResidentsWithAddtlRmAcct",
                                  "Where CustomerAccountTypeID = 1;",
                                  "Drop Table vwPastAndCurrentResidentsWithAddtlRmAcct;",
                                  "",
                                  "Store [vwPastAndCurrentResidents] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrPastAndCurrentResidents.qvd]",
                                  "(qvd);",
                                  "drop Table [vwPastAndCurrentResidents];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.6 Product Inventory (after Rent Roll)",
        "LoadScriptContent":  [
                                  "$tab 4.6 Product Inventory (after Rent Roll)",
                                  "/Renaming fields and cleaning up dates.",
                                  "[mstrProductInventory]:",
                                  "    LOAD",
                                  "// \tCommunityID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tProductInventoryID, ",
                                  "\tProductNumber as RoomNumber, ",
                                  "\tRoomType, ",
                                  "// \tRoomTypeStyle, ",
                                  "// \tRoomTypeCode, ",
                                  "\tRoomTypeStyleCode, ",
                                  "// \tCareType, ",
                                  "\tCareTypeCode as CareType, ",
                                  "    GrossUnitArea,",
                                  "\tIsOccupiedFlg, ",
                                  "\tIsReservedFlg, ",
                                  "\tIsVacancyScheduledFlg,",
                                  "    IsSemiPrivateResidentFlg,",
                                  "\tdate(floor(VacancyScheduledDT)) as VacancyScheduledDT, ",
                                  "//\tVacantDT, ",
                                  "\tDayVacantCount as M_DaysVacant, ",
                                  "\tIsRoomReadyFlg, ",
                                  "\tGrade, ",
                                  "\tPriceBase as StreetRate, ",
                                  "\tPriceSpecial as SpecialRate,",
                                  "    SemiPrivateRate as SemiRate,",
                                  "    DailyRate as RespiteRate,",
                                  "\tisModelRoomFlg as IsModelRoomFlg,",
                                  "    IsOfflineFlg, ",
                                  "\tDate(Floor(OfflineDT)) as OfflineDT, ",
                                  "\tOfflineReason, ",
                                  "\tOfflineNote, ",
                                  "\tDATE(FLOOR(OnlineDT)) as OnlineDT, ",
                                  "\tDate(Floor(OnlineDTEstimate)) as OnlineDTEstimate, ",
                                  "\tOnlineReason,",
                                  "    Note as RoomNote",
                                  "//\tReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "// /AtriaDW does not have SemiRate or isModelRoomFlg, so joining from Business Data here.",
                                  "// Left Join (mstrProductInventory)",
                                  "// LOAD",
                                  "//     ProductInventoryID,",
                                  "// //     GrossPotentialRent,",
                                  "// //     StreetRate,",
                                  "// //     SpecialRate,",
                                  "// //     BudgetRate,",
                                  "//     SemiPrivateRate as SemiRate,",
                                  "// //     AdditionalOccupantRate,",
                                  "//     DailyRate as RespiteRate,",
                                  "// \tisModelRoomFlg as IsModelRoomFlg",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_BusinessDataProductInventory.qvd]",
                                  "// (qvd);",
                                  "",
                                  "/Get Gender of current residents",
                                  "",
                                  "Left Join (mstrProductInventory)",
                                  "LOAD",
                                  "\tProductInventoryID,",
                                  "    Gender",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_GenderByProductInventoryID.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "Store [mstrProductInventory] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "drop table [mstrProductInventory];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.7 Active Employees",
        "LoadScriptContent":  [
                                  "$tab 4.7 Active Employees",
                                  "/Step 1: rename fields and clean up dates, grab only active employee statuses",
                                  "ActiveEmployees:",
                                  "LOAD",
                                  "    EMPLID,",
                                  "    COMPANY,",
                                  "    %CommunityKey,",
                                  "    FIRST_NAME,",
                                  "    MIDDLE_NAME,",
                                  "    LAST_NAME,",
                                  "    Employee,",
                                  "    Replace(IF(ADDRESS1=UPPER(ADDRESS1), Capitalize(ADDRESS1), ADDRESS1),\u0027Po Box\u0027, \u0027P.O. Box\u0027) as ADDRESS1,",
                                  "    Replace(IF(ADDRESS2=UPPER(ADDRESS2), Capitalize(ADDRESS2), ADDRESS2),\u0027Po Box\u0027, \u0027P.O. Box\u0027) as ADDRESS2,",
                                  "    IF(CITY=UPPER(CITY), Capitalize(CITY), CITY) as CITY,",
                                  "    STATE,",
                                  "    POSTAL,",
                                  "    EMAIL,",
                                  "    PHONE,",
                                  "    DeptID,",
                                  "    DEPTNAME,",
                                  "//     DEPTNAME_ABBRV,",
                                  "    JOBCODE as JobCode,",
                                  "    JOBTITLE as JobTitle,",
                                  "//     JOBTITLE_ABBRV,",
                                  "//     REG_TEMP,",
                                  "//     REG_TEMP_NAME,",
                                  "//     FULL_PART_TIME,",
                                  "    FULL_PART_TIME_NAME as FullPartTime,",
                                  "//     FLSA_STATUS,",
                                  "    FLSA_STATUS_NAME as EmployeeExempt,",
                                  "//     EMPL_TYPE,",
                                  "//     EMPL_TYPE_NAME,",
                                  "//     EMPL_CLASS,",
                                  "    EMPL_CLASS_NAME as EmployeeClass,",
                                  "//     EMPL_STATUS,",
                                  "    EMPL_STATUS_NAME as EmployeeStatus,",
                                  "//     HR_STATUS,",
                                  "    HR_STATUS_NAME as HRStatus,",
                                  "    Date(Floor(EFFDT)) as EFFDT,",
                                  "    Date(Floor(HIRE_DT)) as HIRE_DT,",
                                  "    Date(Floor(LAST_HIRE_DT)) as LAST_HIRE_DT,",
                                  "    Date(Floor(TERMINATION_DT)) as TERMINATION_DT,",
                                  "    Date(Floor(SERVICE_DT)) as SERVICE_DT,",
                                  "    Date(Floor(ACTION_DT)) as ACTION_DT,",
                                  "    LASTUPDDTTM,",
                                  "    Date(Floor(JOB_ENTRY_DT)) as JOB_ENTRY_DT,",
                                  "    Date(Floor(DEPT_ENTRY_DT)) as DEPT_ENTRY_DT,",
                                  "    Date(Floor(POSITION_ENTRY_DT)) as POSITION_ENTRY_DT,",
                                  "    REPORTS_TO,",
                                  "    POSITION_NBR,",
                                  "    NUM((Today()-Date(Floor(HIRE_DT)))/365.25, \u0027##0.0\u0027) as [TENURE],",
                                  "    LeaveReason",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrEmployee.qvd]",
                                  "(qvd)",
                                  "where EMPL_STATUS = \u0027P\u0027 OR EMPL_STATUS=\u0027A\u0027 OR EMPL_STATUS=\u0027S\u0027;",
                                  "",
                                  "/Step 2: get nickname for the employee",
                                  "Left Join (ActiveEmployees)",
                                  "LOAD DISTINCT",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "    IF(NickName=UPPER(NickName), Capitalize(NickName), NickName) as NickName,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "//     UserName,",
                                  "//     Email,",
                                  "    EMPLID",
                                  "//     Department,",
                                  "//     JobCode,",
                                  "//     JobTitle,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "",
                                  "Store [ActiveEmployees] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factActiveEmployees.qvd]",
                                  "(qvd);",
                                  "drop Table ActiveEmployees;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "4.8 iPod Tasks",
        "LoadScriptContent":  [
                                  "$tab 4.8 iPod Tasks",
                                  "/Step 1: Load Addressed Tasks and give a Task Shift value.",
                                  "iPodTasks:",
                                  "LOAD  \u0027Addressed\u0027 as TaskStatus,",
                                  "\ttrnResidentADLID as ADLID,",
                                  "\tCustomerID as [%CustomerIDKey],",
                                  "\tDescription AS TaskDescription,",
                                  "\tADLDT,",
                                  "\tCreateBy as TaskCreateBy,",
                                  "\tModifyBy as TaskModifyBy,",
                                  "\tModifyDT as TaskModifyDT,",
                                  "\tEmplUserName as CompletedByTemp,",
                                  "\tApplicationID,",
                                  "\tADLTime,",
                                  "\tADLTimeComplete,",
                                  "\tResidentADLProcessReasonID,",
                                  "\tADLTypeID,",
                                  "\tADLStatusID,",
                                  "\tServiceCodeID,",
                                  "\tTimeIntervalID,",
                                  "\tCommunityResourceRoleID,",
                                  "    CommunityResourceRole as CommunityResourceRoleTitle,",
                                  "\tWeekEnd(ADLDT) as WeekEnding,",
                                  "\tTime(MakeTime(Hour(ADLDT)),\u0027h tt\u0027) as TaskHour,",
                                  "\tDate(Floor(ADLDT)) as %DateKey,",
                                  "",
                                  "\tIF(HOUR(ADLDT) \u003e= 7 AND HOUR(ADLDT) \u003c= 14, \u0027Day\u0027,",
                                  "\tIF(HOUR(ADLDT) \u003e= 15 AND HOUR(ADLDT) \u003c= 22, \u0027Evening\u0027,",
                                  "\tIF(HOUR(ADLDT) \u003e= 23 OR HOUR(ADLDT) \u003c= 6, \u0027Night\u0027,\u0027\u0027))) as TaskShift,",
                                  "    ",
                                  "    CustomScheduleADLID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_iPodTasksAddressed.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: Load Open Tasks and give a Task Shift value.",
                                  "Concatenate(iPodTasks)",
                                  "LOAD \u0027Open\u0027 as TaskStatus,",
                                  "\tResidentADLID as ADLID,",
                                  "\tCustomerID as [%CustomerIDKey],",
                                  "\tDescription AS TaskDescription,",
                                  "\tADLDT,",
                                  "\tCreateBy as TaskCreateBy,",
                                  "// ModifyBy as TaskModifyBy,",
                                  "// ModifyDT as TaskModifyDT,",
                                  "// CompletedBy,",
                                  "// ApplicationID,",
                                  "\tADLTime,",
                                  "// ADLTimeComplete,",
                                  "// ResidentADLProcessReasonID,",
                                  "\tADLTypeID,",
                                  "\tADLStatusID,",
                                  "\tServiceCodeID,",
                                  "\tTimeIntervalID,",
                                  "\tCommunityResourceRoleID,",
                                  "    CommunityResourceRole as CommunityResourceRoleTitle,",
                                  "\tWeekEnd(ADLDT) as WeekEnding,",
                                  "\tTime(MakeTime(Hour(ADLDT)),\u0027h tt\u0027) as TaskHour,",
                                  "\tDate(Floor(ADLDT)) as %DateKey,",
                                  "",
                                  "\tIF(HOUR(ADLDT) \u003e= 7 AND HOUR(ADLDT) \u003c= 14, \u0027Day\u0027,",
                                  "\tIF(HOUR(ADLDT) \u003e= 15 AND HOUR(ADLDT) \u003c= 22, \u0027Evening\u0027,",
                                  "\tIF(HOUR(ADLDT) \u003e= 23 OR HOUR(ADLDT) \u003c= 6, \u0027Night\u0027,\u0027\u0027))) as TaskShift,",
                                  "    ",
                                  "    CustomScheduleADLID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_iPodTasksOpen.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 3: Grab Community Resource Role Title and ResourceRoleID.",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    CommunityResourceRoleID,",
                                  "//     ResourceRole as CommunityResourceRoleTitle,",
                                  "    ResourceRoleID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblCommunityResourceRole.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 4: Get ADL Status group (as renamed below) and Status Detail.",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    ADLStatusID,",
                                  "    ADLStatus as ADLStatusDetail,",
                                  "    IF(ADLStatusID = 2,\u0027Completed\u0027,",
                                  "\tIF(ADLStatusID = 9,\u0027Completed\u0027,",
                                  "\tIF(ADLStatusID = 10,\u0027Completed\u0027,",
                                  "\tIF(ADLStatusID = 8,\u0027Completed\u0027,",
                                  "\tIF(ADLStatusID = 7,\u0027Closed\u0027,",
                                  "\tIF(ADLStatusID = 4,\u0027Incomplete\u0027,",
                                  "\tIF(ADLStatusID = 5,\u0027Incomplete\u0027,",
                                  "\tIF(ADLStatusID = 12,\u0027Incomplete\u0027,",
                                  "\tIF(ADLStatusID = 11,\u0027Incomplete\u0027,",
                                  "\tIF(ADLStatusID = 1,\u0027Open\u0027,\u0027\u0027)))))))))) as ADLStatus",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luADLStatus.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 5: Grab Resource Type",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    ResourceRoleID,",
                                  "    ResourceRole as ResourceTypeTemp",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luResourceRole.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 6: Grab Completed By, Job Title, and Job Type as outlined below.",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    FIRST_NAME\u0026\u0027.\u0027\u0026LAST_NAME as CompletedByTemp,",
                                  "    JobTitle,",
                                  "    ",
                                  "    IF(JobTitle = \u0027Community Business Director\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027Community Care Manager\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027Engage Life Director\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027Executive Director\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027Life Guidance Director\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027NDIR, Care Management\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027Quality Enhancement Director\u0027,\u0027Manager\u0027,",
                                  "    IF(JobTitle = \u0027Resident Services Director\u0027,\u0027Manager\u0027,\u0027Frontline\u0027)))))))) as JobType",
                                  "    ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factActiveEmployees.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 7: Grab Service Code Description",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    ServiceCodeID,",
                                  "    Description as ServiceCodeDescription",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luServiceCode.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 8: Grab ADL Type",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    ADLTypeID,",
                                  "    ADLType as ADLTypeTemp",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luADLType.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 9: Grab Resident ADL Process Reason from ID",
                                  "Left Join (iPodTasks)",
                                  "LOAD",
                                  "    ResidentADLProcessReasonID,",
                                  "    ResidentADLProcessReason",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_luResidentADLProcessReason.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/Step 10: Have to use AtriaDW mstrCustomer so we can get Home Care customers.",
                                  "LEFT JOIN (iPodTasks)",
                                  "// LOAD",
                                  "//     CustomerID as %CustomerIDKey,",
                                  "//     \"Resident\" as ResidentName,",
                                  "//     CommunityNumber as %CommunityKey",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "// (qvd);",
                                  "// INCLUDING HOME CARE:",
                                  "LOAD CustomerID as [%CustomerIDKey],",
                                  "\tResident as ResidentName,",
                                  "    CommunityNumber as [%CommunityKey];",
                                  "SQL SELECT CustomerID,",
                                  "\tResident,",
                                  "    CommunityNumber",
                                  "FROM AtriaDW.Master.mstrCustomer;",
                                  "",
                                  "/Step 11: Grab Assessed Care Type",
                                  "LEFT JOIN (iPodTasks)",
                                  "LOAD",
                                  "    %CustomerIDKey,",
                                  "    AssessedCareType",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentCurrentAssessedCareType.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "iPodTasks_Temp:",
                                  "LOAD ",
                                  "\t*,",
                                  "    IF(ISNULL(ResourceTypeTemp),SubField(CommunityResourceRoleTitle,\u0027 \u0027,1),ResourceTypeTemp) as ResourceType,",
                                  "    IF(WildMatch(ApplicationID, \u0027174\u0027, \u0027207\u0027), \u0027Mobile\u0027,\u0027Desktop\u0027) as Platform,",
                                  "    IF(WildMatch(ADLStatusID, \u00274\u0027) and WildMatch(TaskModifyBy, \u0027System.User\u0027), 1, 0) as STLCloseFlg, //tasks auto-closed while on STL starting 7/18/2021",
                                  "    IF(IsNull(CompletedByTemp) and ADLStatusDetail=\u0027Closed - Undocumented\u0027,\u0027System\u0027,",
                                  "    \tIF(IsNull(CompletedByTemp) and ADLStatusDetail=\u0027Open\u0027, NULL(),",
                                  "        \tIF(IsNull(CompletedByTemp), Capitalize(TaskModifyBy), Capitalize(CompletedByTemp)))) as CompletedBy,",
                                  "\tIF(IsNull(CustomScheduleADLID) AND ADLTypeID = \u00272\u0027,\u0027Resident Ad-Hoc Task\u0027,ADLTypeTemp) as ADLType",
                                  "RESIDENT iPodTasks;",
                                  "Drop Fields CompletedByTemp, ADLTypeTemp FROM iPodTasks_Temp;",
                                  "DROP TABLE iPodTasks;",
                                  "",
                                  "",
                                  "Store [iPodTasks_Temp] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_iPodTasks.qvd]",
                                  "(qvd);",
                                  "drop Table [iPodTasks_Temp];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "5.1 Scheduled Move Out",
        "LoadScriptContent":  [
                                  "$tab 5.1 Scheduled Move Out",
                                  "/Step 1: rename fields",
                                  "factResidentMoveOutSchedule:",
                                  "LOAD",
                                  "//     factResidentMoveOutScheduleID,",
                                  "//     ResidentMoveOutScheduleID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    MoveOutDT as %DateKey,",
                                  "    Date(Floor(MoveOutDT)) as ScheduledMoveOutDT,",
                                  "    Date(Floor(NoticeDT)) as ScheduledMoveOutNoticeDT,",
                                  "    OutboundCategory as LostCategory, ",
                                  "\tOutboundLocationID as LostLocationID,",
                                  "    OutboundLocation as LostLocation,",
                                  "    OutboundLocationType as LostLocationType,",
                                  "    OutboundInfluence as MoveOutReason,",
                                  "    Note as ScheduledMoveOutNote,",
                                  "    \u0027https://rms.atriacom.com/Application/ResidentManagement/LeaseDashboard.aspx?CustomerID=\u0027\u0026CustomerID\u0026\u0027\u0026CommunityNumber=\u0027\u0026 [CommunityNumber] as ARMLeaseManagement",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: grab resident name",
                                  "LEFT JOIN (factResidentMoveOutSchedule)",
                                  "LOAD distinct",
                                  "//            KeyID, ",
                                  "               CustomerID as [%CustomerIDKey], ",
                                  "//            CommunityID, ",
                                  "// \t\t\t   CommunityNumber as %CommunityKey,",
                                  "//            InquiryID, ",
                                  "//            BillingID, ",
                                  "               Resident",
                                  "//            Address1, ",
                                  "//            Address2, ",
                                  "//            City, ",
                                  "//            State, ",
                                  "//            PostalCode, ",
                                  "//            Country, ",
                                  "//            Longitude, ",
                                  "//            Latitude, ",
                                  "//            StatusID, ",
                                  "//            Gender, ",
                                  "//            BirthDT, ",
                                  "//            CreateDT, ",
                                  "//            ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 3: Move out Reason and Category from Excel file (provided by Sanela)",
                                  "LEFT JOIN (factResidentMoveOutSchedule)",
                                  "LOAD",
                                  "    MoveOutReason,",
                                  "    MoveOutCategory",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Move Out Reasons.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet2);",
                                  "",
                                  "",
                                  "Store [factResidentMoveOutSchedule] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "drop Table factResidentMoveOutSchedule;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.0 Database Advancements",
        "LoadScriptContent":  [
                                  "$tab 6.0 Database Advancements",
                                  "    ",
                                  "                ",
                                  "                ",
                                  "/Step 1: Create list of all Community + InquiryID + CustomerID combinations",
                                  "IncludeKey:",
                                  "LOAD",
                                  "    CommunityNumber \u0026 \u0027\u0026\u0027 \u0026 InquiryID \u0026 \u0027\u0026\u0027 \u0026 CustomerID as IncludeKey",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/Step 2.1: Determine most relevant inquiry history record for each effective date. ",
                                  "TEMPInquiryHistoryMostEffective:",
                                  "LOAD ",
                                  "    InquiryID as %InquiryID,",
                                  "    CommunityID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "    StatusID,",
                                  "    Date(CreateDT) as CreateDT,",
                                  "    InquiryHistoryID",
                                  "Where Ranking=1;",
                                  "SQL SELECT InquiryHistoryID,",
                                  "\tInquiryID,",
                                  "\tCommunityID,",
                                  "    CustomerID,",
                                  "    EffectiveDT,",
                                  "    StatusID,",
                                  "    CreateDT,",
                                  "    Rank() OVER",
                                  "\t\t\t\t(PARTITION BY CommunityID, InquiryID, CustomerID, Cast(EffectiveDT as date) order by CommunityID, InquiryID, CustomerID, CreateDT desc, InquiryHistoryID desc) as Ranking",
                                  "FROM BusinessData.CRM.tblInquiryHistory;",
                                  "",
                                  "/Step 2.2: grab community number",
                                  "Inner Join (TEMPInquiryHistoryMostEffective)",
                                  "LOAD CommunityID,",
                                  "    CommunityNumber as [%CommunityKey];",
                                  "SQL SELECT CommunityID, CommunityNumber",
                                  "FROM AtriaDW.Master.mstrCommunity;",
                                  "",
                                  "/Step 2.3: grab status",
                                  "Inner Join (TEMPInquiryHistoryMostEffective)",
                                  "LOAD ResidentStatusID as StatusID,",
                                  "    ResidentStatus as Status;",
                                  "SQL SELECT ResidentStatusID,",
                                  "    ResidentStatus",
                                  "FROM BusinessData.ARM.luResidentStatus;",
                                  "",
                                  "/Step 2.4: grab status rank",
                                  "Left Join (TEMPInquiryHistoryMostEffective)",
                                  "LOAD",
                                  "    StatusID,",
                                  "//     Status,",
                                  "    StatusRank",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Allison Test\\Inquiry Status Rank.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "/Step 3: filter to only those in IncludeKey",
                                  "InquiryHistoryMostEffective:",
                                  "LOAD [%CommunityKey] \u0026 \u0027\u0026\u0027 \u0026 %InquiryID \u0026 \u0027\u0026\u0027 \u0026 %CustomerIDKey as Key,",
                                  "\t[%InquiryID],",
                                  "    [%CommunityKey],",
                                  "    [%CustomerIDKey],",
                                  "    EffectiveDT,",
                                  "    CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    StatusID,",
                                  "    Status,",
                                  "    StatusRank",
                                  "Resident TEMPInquiryHistoryMostEffective",
                                  "where Exists(IncludeKey, [%CommunityKey] \u0026 \u0027\u0026\u0027 \u0026 %InquiryID \u0026 \u0027\u0026\u0027 \u0026 %CustomerIDKey);",
                                  "Drop Table TEMPInquiryHistoryMostEffective;",
                                  "",
                                  "",
                                  "",
                                  "Store InquiryHistoryMostEffective into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd](qvd);",
                                  "Drop Table InquiryHistoryMostEffective;",
                                  "",
                                  "Drop Table IncludeKey;",
                                  "",
                                  "",
                                  "/Step 4: Get most effective status one week ago",
                                  "OneWeekPriorStatus:",
                                  "LOAD",
                                  "//     StatusID,",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    EffectiveDT as LastStatusEffectiveDT,",
                                  "//     CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    Status as StatusLastWeek,",
                                  "    StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd);",
                                  "",
                                  "Inner Join (OneWeekPriorStatus)",
                                  "LOAD",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as LastStatusEffectiveDT",
                                  "//     CreateDT,",
                                  "//     InquiryHistoryID,",
                                  "//     Status as StatusLastWeek,",
                                  "//     StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd)",
                                  "where EffectiveDT \u003c= Date(Floor(Date(Today()-7)))",
                                  "group by %InquiryID, [%CommunityKey], [%CustomerIDKey];",
                                  "",
                                  "",
                                  "/Step 5: Get most effective status 30 Days ago",
                                  "ThirtyDaysPriorStatus:",
                                  "NoConcatenate",
                                  "LOAD",
                                  "//     StatusID,",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    EffectiveDT as LastStatusEffectiveDT,",
                                  "//     CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    Status as Status30Days,",
                                  "    StatusRank as StatusRank30Days",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd);",
                                  "",
                                  "Inner Join (ThirtyDaysPriorStatus)",
                                  "LOAD",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as LastStatusEffectiveDT",
                                  "//     CreateDT,",
                                  "//     InquiryHistoryID,",
                                  "//     Status as StatusLastWeek,",
                                  "//     StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd)",
                                  "where EffectiveDT \u003c= Date(Floor(Date(Today()-30)))",
                                  "group by %InquiryID, [%CommunityKey], [%CustomerIDKey];",
                                  "",
                                  "",
                                  "/Step 6: Get most effective status 90 Days ago",
                                  "NinetyDaysPriorStatus:",
                                  "NoConcatenate",
                                  "LOAD",
                                  "//     StatusID,",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    EffectiveDT as LastStatusEffectiveDT,",
                                  "//     CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    Status as Status90Days,",
                                  "    StatusRank as StatusRank90Days",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd);",
                                  "",
                                  "Inner Join (NinetyDaysPriorStatus)",
                                  "LOAD",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as LastStatusEffectiveDT",
                                  "//     CreateDT,",
                                  "//     InquiryHistoryID,",
                                  "//     Status as StatusLastWeek,",
                                  "//     StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd)",
                                  "where EffectiveDT \u003c= Date(Floor(Date(Today()-90)))",
                                  "group by %InquiryID, [%CommunityKey], [%CustomerIDKey];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.1 factProductPricing EXTRACT",
        "LoadScriptContent":  [
                                  "$tab 6.1 factProductPricing EXTRACT",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/Grab room rate for every day. This is really an extraction step we do in Transformation due to timing of the tables replication.",
                                  "ProductPricing:",
                                  "LOAD factProductPricingID, ",
                                  "\tCommunityNumber, ",
                                  "\tProductInventoryID, ",
                                  "\tEffectiveDT, ",
                                  "\tPayorID, ",
                                  "\tPayor, ",
                                  "\tPriceBase, ",
                                  "\tPriceGross, ",
                                  "\tPriceSpecial, ",
                                  "    PriceMinimum,",
                                  "    PriceMaximum,",
                                  "    PriceAllowance,",
                                  "\tIsExistFlg, ",
                                  "\tReplicatDT;",
                                  "",
                                  "SELECT *",
                                  "FROM AtriaDW.Pricing.factProductPricing",
                                  "where EffectiveDT\u003e=\u0027$(vmindate)\u0027;",
                                  "",
                                  "store [ProductPricing] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd](qvd);",
                                  "",
                                  "Drop Table [ProductPricing];",
                                  "",
                                  "/Creates a QVD with the time these were created. This table replicates late, so this helps us to identify in (QA) Date Extract ",
                                  "/\tif the transformation was created before the data was ready to be picked up.",
                                  "updateTimeStamp:",
                                  "",
                                  "LOAD distinct",
                                  "Now() as Now,",
                                  "\tTime(Now()) as NowTime,",
                                  "    Date(Now()) as NowDate",
                                  "",
                                  "AutoGenerate Now();",
                                  "",
                                  "",
                                  "STORE updateTimeStamp INTO [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing_CreateTime.qvd](qvd);",
                                  "Drop Table updateTimeStamp;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.2  Inquiry By Referral Source",
        "LoadScriptContent":  [
                                  "$tab 6.2 *Inquiry By Referral Source",
                                  "/PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factProductPricing EXTRACT, SO IT MUST FOLLOW THAT SECTION.",
                                  "/Step 1.1: Rename fields. Create \"Status Category\" for use in Community Sales \u0026 Marketing app.",
                                  " factInquiryByReferral:",
                                  " LOAD ",
                                  " \tApplicationURL as [Inquirer Dashboard],",
                                  "//  InquiryByReferralID, ",
                                  "//  CommunityID, ",
                                  "    CommunityNumber as %CommunityKey, ",
                                  "\tInquiryID AS %InquiryID, ",
                                  "\tdate(floor(InquiryDT)) as %DateKey, ",
                                  "    date(floor(InquiryDT)) as DateOfInquiry, ",
                                  "\tStatus, ",
                                  "    IF(Exists(ActiveStatusList, Status), \u0027Active\u0027, \u0027Inactive\u0027) as ActiveCRMStatus, ",
                                  "    IF(Status=\u0027Hot\u0027, \u0027Hot\u0027,",
                                  "    IF(Status=\u0027Wait List\u0027, \u0027Wait List\u0027,",
                                  "    IF(Status=\u0027Reserved\u0027,\u0027Reserved\u0027,",
                                  "    IF(Status=\u0027Closing\u0027,\u0027Closing\u0027,",
                                  "    IF(Status=\u0027Warm\u0027, \u0027Warm\u0027,",
                                  "    IF(Status=\u0027Cold\u0027, \u0027Cold\u0027,",
                                  "    IF(Status=\u0027New Lead\u0027, \u0027New Lead\u0027,",
                                  "    IF(Status=\u0027Not Qualified\u0027 OR Status=\u0027Lost\u0027 OR Status=\u0027ReEngaged\u0027 OR Status=\u0027Moved In\u0027 OR Status=\u0027Moved Out\u0027 OR Status=\u0027Deceased\u0027 ",
                                  "    \t\tOR Status=\u0027Moved Back\u0027 OR Status=\u0027Future Prospect\u0027 OR Status=\u0027Deceased - Inquiry\u0027 OR Status=\u0027Unable to Qualify\u0027,\u0027Other\u0027)))))))) as StatusCategory,",
                                  "\tdate(floor(StatusDT))as InquiryStatusDate, ",
                                  "\tInquiry as InquiryName, ",
                                  "\tAddress1 as InquiryAddress, ",
                                  "\tAddress2 as InquiryAddress2, ",
                                  "\tCity as InquiryCity, ",
                                  "\tState as InquiryState, ",
                                  "\tIF(PostalCode=\u0027\u0027, NULL(), IF(Country=\u0027CAN\u0027, LEFT(PostalCode, 7), LEFT(TRIM(PostalCode),5))) as InquiryPostalCode, ",
                                  "\tCountry as InquiryCountry, ",
                                  "\tlower(Email) as InquiryEmail,",
                                  "\tPhone as InquiryPhoneHome, ",
                                  "\tPhoneWork as InquiryPhoneWork, ",
                                  "\tPhoneCell as InquiryPhoneCell, ",
                                  "//\tLongitude as InquiryLongitude, ",
                                  "//\tLatitude as InquiryLatitude, ",
                                  "\tRelationToCustomer, ",
                                  "\tReferralCategoryType as ReferralBucket, ",
                                  "    IF(ReferralCategoryType=\u0027Professional - Clinical\u0027, \u0027Clinical\u0027,",
                                  "    IF(ReferralCategoryType=\u0027Professional - Non-Clinical\u0027, \u0027Non-Clinical\u0027,",
                                  "    IF(ReferralCategoryType=\u0027Professional - Organization/Non-Profit\u0027, \u0027Organization/Non-Profit\u0027,",
                                  "    IF(ReferralCategoryType=\u0027Professional - Faith Based\u0027, \u0027Faith Based\u0027, ReferralCategoryType)))) as ReferralBucketShort,",
                                  "\tReferralCategory, ",
                                  "// \tReferralType, ",
                                  "\tReferralSource as Organization,",
                                  "    ReferralSourceID as %OrganizationID,",
                                  "\tReferredBy, ",
                                  "    ReferredByID as ContactID,",
                                  "    ",
                                  "    SecondaryReferralCategoryType as SecondaryReferralBucket,",
                                  "//     SecondaryReferralCategory, NOT POPULATED IN ATRIADW",
                                  "//     SecondaryReferralType,",
                                  "    SecondaryReferralSourceID as SecondaryOrganizationID,",
                                  "    SecondaryReferralSource as SecondaryOrganization,",
                                  "//     SecondaryReferredByID, NOT POPULATED IN ATRIADW",
                                  "    SecondaryReferredBy,",
                                  "",
                                  "//     date(floor(TourDT)) as InitialTourDate, ",
                                  "//\tTourType, ",
                                  "\tCapitalize(TourOwner) as JournalOwner, ",
                                  "//\tTourInitialCount as M_InitialTourCount, ",
                                  "//\tTourAdditionalCount as M_AdditionalTourCount, ",
                                  "// \tTourCount as M_TotalTours, ",
                                  "// \tCallCount as M_TotalCalls, ",
                                  "\tIF(WildMatch(VisitorSource, \u0027https://www.google.com/*\u0027, \u0027https://www.google.ca/*\u0027, \u0027http://www.google.com/*\u0027, \u0027https://www.google.com*\u0027), \u0027Google Organic\u0027, VisitorSource) as VisitorSource,",
                                  "\tVisitorSource as VisitorSourceFull, ",
                                  "\tIF(VisitorCampaign LIKE \u0027*search*\u0027, \u0027Search\u0027,",
                                  "    IF(VisitorCampaign LIKE \u0027*display*\u0027 OR VisitorCampaign LIKE \u0027*remarketing*\u0027, \u0027Display/Remarketing\u0027,",
                                  "    IF(VisitorCampaign LIKE \u0027*sitelink*\u0027, \u0027sitelink\u0027, ",
                                  "    IF(VisitorCampaign LIKE \u0027*facebook*\u0027, \u0027Facebook\u0027,",
                                  "//     IF(ISNULL(VisitorCampaign) OR VisitorCampaign=\u0027\u0027 OR VisitorCampaign=\u0027null\u0027 OR VisitorCampaign=\u0027non-applicable\u0027 OR VisitorCampaign LIKE \u0027*20set*\u0027, \u0027none\u0027, ",
                                  "    \tVisitorCampaign)))) as VisitorCampaign,",
                                  "    VisitorCampaign as VisitorCampaignFull,",
                                  "    VisitorCampaignName,",
                                  "    Coalesce(VisitorAdGroupReferral, VisitorCampaignAdGroup) as VisitorCampaignAdGroup,",
                                  "    VisitorCampaignAd,",
                                  "    VisitorCampaignKeyword,",
                                  "    VisitorCampaignMatchType,",
                                  "    VisitorCampaignDevice,",
                                  "    VisitorCampaignGclid,",
                                  "    IF((Match(VisitorSource, \u0027google\u0027) and WildMatch(VisitorCampaign, \u0027*,adgroup:*\u0027)) or (Match(VisitorSource, \u0027google\u0027) and ActiveCampaignInterfaceFlg = 1),1,0) as GoogleCampaignFlg,",
                                  "\tVisitorMedium, ",
                                  "    VisitorFormURL,",
                                  "    VisitorFormLocation,",
                                  "    VisitorFormType,",
                                  "\tVisitorTermReferral as VisitorCampaignTerm,",
                                  "\tVisitorContentReferral as VisitorCampaignContent,",
                                  "    ActiveCampaignInterfaceFlg,",
                                  "    ",
                                  "\tIsSelfAssessmentFlg as IsSelfAssessment, ",
                                  "\tOutboundCategory as LostCategory, ",
                                  "\tOutboundLocationID as LostLocationID,",
                                  "    OutboundLocation as LostLocation,",
                                  "    OutboundInfluence as LostInfluence,",
                                  "    CompetitorRate,",
                                  "\tAllowContactPhoneFlg, ",
                                  "\tAllowContactMailFlg, ",
                                  "\tAllowContactEmailFlg, ",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "// \tBillingID, ",
                                  "\tLivingSituation, ",
                                  "\tIF(CareType=\u0027Independent Living\u0027, \u0027IL\u0027, IF(CareType=\u0027Assisted Living\u0027, \u0027AL\u0027, IF(CareType=\u0027Memory Care\u0027, \u0027LG\u0027))) as CareType, ",
                                  "\tPayorType,",
                                  "    Note as InquiryNote,",
                                  "\tRoomType, ",
                                  "\tdate(floor(MoveInDT)) as MoveInDate, ",
                                  "    Date(Floor(PhysicalMoveInDT)) as PhysicalMoveInDT,",
                                  "    IF((date(floor(TourDT))-date(floor(InquiryDT)))\u003e365,\u0027\u0027, IF(date(floor((TourDT))-date(floor(InquiryDT)))\u003c0,\u0027\u0027, date(floor(TourDT))-date(floor(InquiryDT)))) as M_InquiryToTourDays,",
                                  "//     IF((date(floor(MoveInDT))-date(floor(InquiryDT)))\u003e365,\u0027\u0027, IF(date(floor((MoveInDT))-date(floor(InquiryDT)))\u003c0,\u0027\u0027, date(floor(MoveInDT))-date(floor(InquiryDT)))) as M_InquiryToMoveInDays,",
                                  "//     IF((date(floor(MoveInDT))-date(floor(TourDT)))\u003e365, \u0027\u0027, IF(date(floor((MoveInDT))-date(floor(TourDT)))\u003c0, \u0027\u0027, date(floor(MoveInDT))-date(floor(TourDT)))) as M_TourToMoveInDays,",
                                  "\tIF(CreateBy=\u0027Atria Senior Living\u0027, \u0027Atriaseniorliving.Com\u0027, CreateBy) as InquiryCreateBy,",
                                  "    IF( Exists(eLeadOrganizationList, CreateBy) or IsEleadFlg = 1, 1, 0) as IsEleadFlg,",
                                  "    IF( Exists(eLeadFocusOrganizationList, CreateBy), 1, 0) as IsEleadFocusFlg,",
                                  "    IF( Exists(AtriaWebsiteList, CreateBy), 1, 0) as IsAtriaWebsiteFlg,",
                                  "    CreateDT as InquiryCreateDTandTM,",
                                  "\tdate(floor(CreateDT)) as InquiryCreateDT,",
                                  "//     time(CreateDT,\u0027hh:00 tt\u0027) as InquiryCreateTime",
                                  "    Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027) as InquiryCreateTime,",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=7 AND",
                                  "//     \thour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003c21 and Status\u003c\u003e \u0027Not Qualified\u0027, 1,0) as SpeedToLeadFlg",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=21, 1,0) as LateNightLeadFlg",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003c=7, \u0027Early Morning\u0027,",
                                  "//     \tIF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=19, \u0027Late Evening\u0027, ",
                                  "//     \tTime(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))) as InquiryCreatePeriod,",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003c=7, 1,",
                                  "//     \tIF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=19, 19, ",
                                  "//     \tHour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027)))) as InquiryCreatePeriodSort",
                                  "    ",
                                  "    HasBiographyNote,",
                                  "    HasObjectionNote,",
                                  "    HasDiscoveryNote,",
                                  "    HasCurrentLivingSituationNote,",
                                  "    HasWhatPromptedSearchNote,",
                                  "    HasBudgetNote,",
                                  "    HasRoomTypeNote,",
                                  "    HasTimeFrameNote",
                                  "// \tModifyBy, ",
                                  "// \tModifyDT,",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.2: We need the Min Inquiry DT, Tour Date, and counts of tours/calls based on InquiryID (table gives us these by customer).",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD distinct",
                                  "\tDate(Floor(Min(InquiryDT))) as MinInquiryDT,",
                                  "    Date(Floor(Min(TourDT))) as InitialTourDate,",
                                  "    SUM(TourCount) as M_TotalTours,",
                                  "    SUM(CallCount) as M_TotalCalls,",
                                  "    Min(CustomerID) as MinCustomerID,",
                                  "    InquiryID as [%InquiryID],",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd)",
                                  "Group by InquiryID, CommunityNumber;    ",
                                  "",
                                  "/Step 1.3: Grab referral contact info",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.4: Grab IsEleadCorporationFlg",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    %OrganizationID,",
                                  "    IsEleadCorporationFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 1.5: Grab ForeignLeadID (APFM, Caring.com ID they use in their system)",
                                  "Left Join(factInquiryByReferral)",
                                  "Load ",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "\tInquiryID as %InquiryID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    ForeignLeadID as eLeadID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrInquiry.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.6: Get Resident Name",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD distinct",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    \"Resident\",",
                                  "    Gender",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.7: Respite Flag - if the resident has any activity in the ARM.tblEventHistory table where the PayorID-19, then give them a Former Respite Flag",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    comm_no as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    1 as FormerRespiteFlgTEMP",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PastRespiteResidentEvents.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    comm_no as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    1 as FormerNonRespiteFlgTEMP",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PastNonRespiteResidentEvents.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "/Step 2.1:  Get maximum reservation for each customer (Blitz Lists)",
                                  "ReservationTEMP:",
                                  "LOAD DISTINCT",
                                  "//     MAX(ReservationID) as %ReservationIDKey,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    InquiryID as %InquiryID,",
                                  "   date(floor(max(ReservationDT))) as ReservationDT",
                                  "//     RoomNumber as DesiredRoomNumber,",
                                  "//     ProductInventoryID,",
                                  "//     date(floor(MAX(DesiredDT))) as DesiredDT",
                                  "//     DepositAmount,",
                                  "//     RoomRate",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrReservation.qvd]",
                                  "(qvd)",
                                  "Group By CommunityNumber, CustomerID, InquiryID;",
                                  "",
                                  "/Step 2.2: For the Max date, get the Max Reservation ID (to eliminate any duplicates. Otherwise, left joining to the inquiry table would create duplicate records).",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD DISTINCT",
                                  "    MAX(ReservationID) as %ReservationIDKey,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    InquiryID as %InquiryID,",
                                  "   date(floor(ReservationDT)) as ReservationDT",
                                  "//     RoomNumber as DesiredRoomNumber,",
                                  "//     ProductInventoryID,",
                                  "//     date(floor(DesiredDT)) as DesiredDT",
                                  "//     DepositAmount,",
                                  "//     RoomRate",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrReservation.qvd]",
                                  "(qvd)",
                                  "Group By CommunityNumber, CustomerID, InquiryID, ReservationDT;",
                                  "",
                                  "/Step 2.3: Now that we have most effective reservation, grab the desired room number, etc.",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD DISTINCT",
                                  "    ReservationID as %ReservationIDKey,",
                                  "//     CommunityNumber as %CommunityKey,",
                                  "//     CustomerID as %CustomerIDKey,",
                                  "//     InquiryID as %InquiryID,",
                                  "//    date(floor(ReservationDT)) as ReservationDT,",
                                  "    RoomNumber as DesiredRoomNumber,",
                                  "    ProductInventoryID as DesiredProductInventoryID,",
                                  "    date(floor(DesiredDT)) as DesiredDT,",
                                  "    DepositAmount,",
                                  "    RoomRate as ReservationRoomRate,",
                                  "    Payor as ReservationPayor",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrReservation.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2.4: Grab the SignatureDT for the lease",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD ReservationID as [%ReservationIDKey],",
                                  "    Date(Floor(SignatureDT)) as SignatureDT;",
                                  "SQL SELECT ReservationID,",
                                  "    SignatureDT",
                                  "FROM AtriaDW.Occupancy.factExposureDetail",
                                  "Where IsAutoApplyFlg = 1 and PayorID = 14;",
                                  "",
                                  "/Step 2.5: For the desired room, grab today\u0027s street and selling rate.",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID as DesiredProductInventoryID,",
                                  "//     Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     PayorID,",
                                  "    Payor as ReservationPayor,",
                                  "    PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    PriceSpecial as M_Selling",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd)",
                                  "where Date(Floor(EffectiveDT)) = Date(Floor(Today()));",
                                  "",
                                  "/Step 2.6: Join the Reservation info to the InquiryByReferral table. (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD DISTINCT *",
                                  "Resident ReservationTEMP;",
                                  "Drop Table ReservationTEMP;",
                                  "",
                                  "/Step 3.1: Get completed Phone Attempts for the inquiry (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    InquiryID as %InquiryID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     CustomerID as [%CustomerIDKey],",
                                  "    COUNT(InquiryJournalID) as CountPhoneAttempts",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "Where JournalQlikCategory = \u0027Telephone\u0027 and CloseFlg=1",
                                  "Group By InquiryID, CommunityNumber;",
                                  "",
                                  "/Step 3.2: Get completed Email Attempts for the inquiry (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    InquiryID as %InquiryID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     CustomerID as [%CustomerIDKey],",
                                  "    COUNT(InquiryJournalID) as CountEmailAttempts",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "Where JournalQlikCategory = \u0027Email\u0027 and CloseFlg=1",
                                  "Group By InquiryID, CommunityNumber;",
                                  "",
                                  "/Step 3.3: Get completed Mail Out Attempts for the inquiry (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    InquiryID as %InquiryID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     CustomerID as [%CustomerIDKey],",
                                  "    COUNT(InquiryJournalID) as CountMailOutAttempts",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "Where Match(Type, \u0027Mail Out\u0027) and CloseFlg=1",
                                  "Group By InquiryID, CommunityNumber;",
                                  "",
                                  "/Step 3.4: Is the customer Auto Apply Move In? (Blitz Lists)",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     LeaseXml,",
                                  "//     CreateDT,",
                                  "    IsAutoApplyFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_AutoApply.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 3.5: How many assessments? (Blitz Lists)",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    ResidentAssessmentCount,",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_ResidentAssessmentByCustomerCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "/Step 3.6: How many deposits? (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "\tCOUNT(ReservationID) as DepositCount,",
                                  "//     Date(Floor(Max(CreateDT))) as DepositMaxCreateDT,",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd)",
                                  "Group by CustomerID, InquiryID, CommunityNumber;",
                                  "",
                                  "/Step 3.7: Most Recent Deposit Info",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    Date(Floor(CreateDT)) as DepositMaxCreateDT,",
                                  "    DepositAmount as MaxDepositAmount,",
                                  "    IF(CloseFlg=1, \u0027Closed\u0027, \u0027Open\u0027) as MaxReservationCloseStatus,",
                                  "    Reason as MaxReservationCloseReason,",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd)",
                                  "Where ReservationCreateRank=1;",
                                  "",
                                  "/Step 3.8: How many tours in the last 90 days? (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    Count(InquiryJournalID) as T90TourCount,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID]",
                                  "//     CustomerID,",
                                  "//     \"Type\",",
                                  "//     EffectiveDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "Where Date(Floor(EffectiveDT))\u003e= Date(Floor(Today()-90)) and JournalQlikCategory=\u0027Tour\u0027 and IsNull(JournalStatusChangeReasonID)",
                                  "Group by CommunityNumber, InquiryID;",
                                  "",
                                  "/Step 3.8: How many additional tours in the last 90 days? (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    Count(InquiryJournalID) as T90AdditionalTourCount,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID]",
                                  "//     CustomerID,",
                                  "//     \"Type\",",
                                  "//     EffectiveDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "Where Date(Floor(EffectiveDT))\u003e= Date(Floor(Today()-90)) and JournalQlikCategory=\u0027Tour\u0027 and IsNull(JournalStatusChangeReasonID) and TypeCategorySEQ \u003e 1",
                                  "Group by CommunityNumber, InquiryID;",
                                  "",
                                  "/Step 3.9: How many emails in the last 30 days? (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    Count(InquiryJournalID) as T30EmailCount,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID]",
                                  "//     CustomerID,",
                                  "//     \"Type\",",
                                  "//     EffectiveDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "Where Date(Floor(EffectiveDT))\u003e= Date(Floor(Today()-30)) and JournalQlikCategory=\u0027Email\u0027 and IsNull(JournalStatusChangeReasonID)",
                                  "Group by CommunityNumber, InquiryID;",
                                  "",
                                  "/Step 3.10: Get current status ranking for database advancements",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "//     StatusID,",
                                  "    Status,",
                                  "    StatusRank as StatusRankCurrent",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Allison Test\\Inquiry Status Rank.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "/Step 3.11: Get Status and Status Rank from last week",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    LastStatusEffectiveDT,",
                                  "    StatusLastWeek,",
                                  "    StatusRankLastWeek",
                                  "Resident OneWeekPriorStatus;",
                                  "Drop Table OneWeekPriorStatus;",
                                  "",
                                  "/Step 3.12: Get Status and Status Rank from 30 days ago",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    LastStatusEffectiveDT,",
                                  "    Status30Days,",
                                  "    StatusRank30Days",
                                  "Resident ThirtyDaysPriorStatus;",
                                  "Drop Table ThirtyDaysPriorStatus;",
                                  "",
                                  "/Step 3.13: Get Status and Status Rank from 90 days ago",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    LastStatusEffectiveDT,",
                                  "    Status90Days,",
                                  "    StatusRank90Days",
                                  "Resident NinetyDaysPriorStatus;",
                                  "Drop Table NinetyDaysPriorStatus;",
                                  "",
                                  "",
                                  "/Step 3.14: Flag potential duplicates",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    IF(EmailCount \u003e CustomerCount, \u0027Email\u0027) \u0026 IF(EmailCount \u003e CustomerCount AND PhoneCount \u003e CustomerCount, \u0027 \u0026 \u0027) \u0026 IF(PhoneCount \u003e CustomerCount, \u0027Phone\u0027) as PotentialDuplicateReason",
                                  ";",
                                  "SQL Select Division",
                                  "\t,Region",
                                  "\t,CommunityName as Community",
                                  "\t,factInquiryByReferral.CommunityNumber",
                                  "\t,factInquiryByReferral.InquiryID",
                                  "\t,CustomerID",
                                  "\t,Inquiry",
                                  "\t,Status",
                                  "\t,ApplicationURL",
                                  "\t,CustomerCount",
                                  "\t,EmailCount",
                                  "\t,PhoneCount",
                                  "\t,factInquiryByReferral.Email",
                                  "\t,factInquiryByReferral.PhoneCell",
                                  "FROM AtriaDW.Sales.factInquiryByReferral",
                                  "",
                                  "Left Join\t(Select CommunityNumber, CommunityName, Region, Division from AtriaDW.Master.mstrCommunity) mstrCommunity",
                                  "on\t\t\tmstrCommunity.CommunityNumber = factInquiryByReferral.CommunityNumber",
                                  "",
                                  "Left Join\t(Select InquiryID, Count(*) as CustomerCount from AtriaDW.Sales.factInquiryByReferral where Status not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Moved Out\u0027, \u0027Deceased\u0027) group by InquiryID) Customer",
                                  "on\t\t\tCustomer.InquiryID = factInquiryByReferral.InquiryID",
                                  "",
                                  "Left Join\t(Select Email, Count(*) as EmailCount from AtriaDW.Sales.factInquiryByReferral where LEN(Email) \u003e 0 and Status not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Moved Out\u0027, \u0027Deceased\u0027)",
                                  "\t\t\t\t\tand Email not like \u0027%@atriaseniorliving.com\u0027 group by Email) Email",
                                  "on\t\t\tEmail.Email = factInquiryByReferral.Email",
                                  "",
                                  "Left Join\t(Select PhoneCell, Count(*) as PhoneCount from AtriaDW.Sales.factInquiryByReferral where LEN(PhoneCell) \u003e 0 and Status not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Moved Out\u0027, \u0027Deceased\u0027) ",
                                  "\t\t\t\t\tand PhoneCell not like \u0027% 555-%\u0027 and PhoneCell not in (Select distinct PhoneNumber1 FROM BusinessData.ARM.tblCommunity where LEN(PhoneNumber1) \u003e 0) group by PhoneCell) Phone",
                                  "on\t\t\tPhone.PhoneCell = factInquiryByReferral.PhoneCell",
                                  "",
                                  "where\t\tStatus not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Moved Out\u0027, \u0027Deceased\u0027)",
                                  "and\t\t\t(EmailCount \u003e CustomerCount or PhoneCount \u003e CustomerCount);",
                                  "",
                                  "",
                                  "/ Step 4: Get Resident Match Discovery compliance",
                                  "",
                                  "temp_match: LOAD %CustomerIDKey Resident factInquiryByReferral;",
                                  "LEFT JOIN (temp_match) LOAD CustomerID as %CustomerIDKey, CommunityNumber as %CommunityKey, GTKYQuestionID;",
                                  "SQL SELECT CustomerID, CommunityNumber, GTKYQuestionID FROM BusinessData.ELM.tblResidentGTKY",
                                  "LEFT JOIN BusinessData.ELM.tblResidentGTKYResponse on tblResidentGTKYResponse.ResidentGTKYID = tblResidentGTKY.ResidentGTKYID",
                                  "LEFT JOIN BusinessData.ARM.tblCommunity on tblResidentGTKY.CommunityID = tblCommunity.CommunityID",
                                  "WHERE GTKYQuestionID IN (26, 7, 120, 27, 10, 44);",
                                  "",
                                  "generic_match_questions: GENERIC LOAD [%CustomerIDKey], [%CommunityKey], GTKYQuestionID, 1 as Flg Resident temp_match; ",
                                  "match_questions_join: Load Distinct %CustomerIDKey Resident temp_match;",
                                  "FOR i = NoOfTables()-1 to 0 STEP -1;",
                                  "\tLET vTable=TableName($(i));",
                                  "    IF WildMatch(\u0027$(vTable)\u0027,\u0027generic_match_questions*\u0027) THEN",
                                  "    LEFT JOIN (match_questions_join) LOAD * RESIDENT [$(vTable)];",
                                  "\tDROP TABLE [$(vTable)];",
                                  "    ENDIF ",
                                  "NEXT i",
                                  "",
                                  "LEFT JOIN   (factInquiryByReferral) ",
                                  "\t\t\tLOAD %CustomerIDKey,",
                                  "            [%CommunityKey],",
                                  "\t\t\tCoalesce([26],  0)  as  HasMilitaryBranch_temp,",
                                  "            Coalesce([7],   0)  as  HasHobbies_temp,",
                                  "            Coalesce([120], 0)  as  HasLanguage_temp,",
                                  "            Coalesce([27],  0)  as  HasOccupation_temp,",
                                  "            Coalesce([10],  0)  as  HasPet_temp,",
                                  "            Coalesce([44],  0)  as  HasReligion_temp",
                                  "Resident match_questions_join; ",
                                  "",
                                  "",
                                  "",
                                  "Store [factInquiryByReferral] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "drop tables [factInquiryByReferral], match_questions_join, temp_match;",
                                  "",
                                  "/Step 5: Logic (mostly for our Blitz Lists in the Marketing Key Indicators app)",
                                  "factInquiryByReferralFINAL:",
                                  "LOAD * ,",
                                  "\tIF(NOT(ISNULL(InitialTourDate)), \u0027Toured\u0027, \u0027Not Toured\u0027) as TourFlg,",
                                  "// \tIF(FormerRespiteFlgTEMP=1, \u0027Former Respite All\u0027, NULL()) as FormerRespiteAllFlg,",
                                  "\tIF(FormerRespiteFlgTEMP=1 and ISNULL(FormerNonRespiteFlgTEMP), \u0027Former Respite\u0027, NULL()) as FormerRespiteFlg,",
                                  "// \tIF(FormerRespiteFlgTEMP=1 and ISNULL(RespiteToResidentConversionFlgTEMP), \u0027Former Respite No Conversion\u0027, NULL()) as FormerRespiteNoConversionFlg,",
                                  "\tIF(ResidentAssessmentCount=0 or ISNULL(ResidentAssessmentCount), \u0027No\u0027, \u0027Yes\u0027) as ResidentAssessmentFlg,",
                                  "    IF(DepositCount=0 or ISNULL(DepositCount), \u0027No\u0027, \u0027Yes\u0027) as PreviouslyDepositedFlg,",
                                  "    IF(T90TourCount\u003e0, \u0027Yes\u0027, \u0027No\u0027) as T90TourFlg,",
                                  "    IF(T90AdditionalTourCount\u003e0, \u0027Yes\u0027, \u0027No\u0027) as T90AdditionalTourFlg,",
                                  "    IF(T30EmailCount\u003e0, \u0027Yes\u0027, \u0027No\u0027) as T30EmailFlg,",
                                  "\tRangeSum(IF(NOT(ISNULL(InquiryPhoneHome)) or NOT(ISNULL(InquiryPhoneWork)) or NOT(ISNULL(InquiryPhoneCell)), CountPhoneAttempts,0),",
                                  "    \t\t IF(NOT(ISNULL(InquiryEmail)), CountEmailAttempts,0),",
                                  "             IF(NOT(ISNULL(InquiryAddress)), CountMailOutAttempts,0)) as M_ContactAttempts,",
                                  "    IF(Status=\u0027Reserved\u0027, IF(IsAutoApplyFlg=1, \u0027Yes\u0027, \u0027No\u0027), NULL()) as AutoApply,",
                                  "//     IF(Exists(InquiryIDLowIncome, [%InquiryID]), \u0027Potential Low Income\u0027, \u0027Likely Not Low Income\u0027) as PotentialLowIncome,",
                                  "\tCoalesce(HasMilitaryBranch_temp,  0)  as  HasMilitaryBranch,",
                                  "\tCoalesce(HasHobbies_temp,   0)  as  HasHobbies,",
                                  "\tCoalesce(HasLanguage_temp, 0)  as  HasLanguage,",
                                  "\tCoalesce(HasOccupation_temp,  0)  as  HasOccupation,",
                                  "\tCoalesce(HasPet_temp,  0)  as  HasPet,",
                                  "\tCoalesce(HasReligion_temp,  0)  as  HasReligion",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Fields IsAutoApplyFlg, ResidentAssessmentCount, DepositCount, T90TourCount, T90AdditionalTourCount,",
                                  "\t\t\tHasMilitaryBranch_temp, HasHobbies_temp, HasLanguage_temp, HasOccupation_temp, HasPet_temp, HasReligion_temp from factInquiryByReferralFINAL;",
                                  "",
                                  "",
                                  "Store [factInquiryByReferralFINAL] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "drop tables [factInquiryByReferralFINAL];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.3  Competitors",
        "LoadScriptContent":  [
                                  "$tab 6.3 *Competitors",
                                  "/PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factInquiryByReferral TRANSFORM, SO IT MUST FOLLOW THAT SECTION.",
                                  "Step 1.1: Competitor to Community links by care type",
                                  "TempCareType:",
                                  "LOAD",
                                  "//     CompetitorToCommunityID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CompetitorID,",
                                  "//     CareTypeID,",
                                  "//     CareType,",
                                  "    CareTypeCode,",
                                  "    CareTypeCode as CareType",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCompetitorToCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.2: Get additional competitor information",
                                  "Left Join (TempCareType)",
                                  "LOAD",
                                  "//     mstrCompetitor,",
                                  "    CompetitorID,",
                                  "//     PropertyID,",
                                  "    Competitor as Organization,",
                                  "    \u0027Competitor\u0027 as OrganizationType,",
                                  "//     Address,",
                                  "//     City,",
                                  "//     State,",
                                  "//     PostalCode,",
                                  "//     Region,",
                                  "//     Market,",
                                  "//     Metro,",
                                  "//     CBSACode,",
                                  "//     County,",
                                  "//     CountyFIPS,",
                                  "//     Country,",
                                  "//     GooglePlaceID,",
                                  "//     PhoneNumber,",
                                  "//     Latitude,",
                                  "//     Longitude,",
                                  "    GeoMakePoint(Latitude, Longitude) as [B2B Location]",
                                  "//     OpenDT,",
                                  "//     PropertyType,",
                                  "//     CampusType,",
                                  "//     PrimaryPaymentType,",
                                  "//     CCRCContractType,",
                                  "//     ProfitStatus,",
                                  "//     PropertyStatus,",
                                  "//     Operator,",
                                  "//     EffectiveDT,",
                                  "//     ReplicaDT,",
                                  "//     Sector,",
                                  "//     CommunityByPlurality,",
                                  "//     SegmentMix",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCompetitor.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.3: Later, we will need to join lost leads on an unknown room type (since this is not always known for the inquiry), ",
                                  "/\t\t\tso we need to create an Unknown Room Type for each competitor/community/caretype combo",
                                  "TempCareType2:",
                                  "LOAD \u0027Unknown\u0027 as RoomTypeStyle, \u0027Unknown\u0027 as RoomTypeStyleCode, *",
                                  "Resident TempCareType;",
                                  "Drop Table TempCareType;",
                                  "",
                                  "",
                                  "/Step 2.1: Again, get competitor/communty/care type combos",
                                  "TempCompetitors:",
                                  "LOAD",
                                  "//     CompetitorToCommunityID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CompetitorID,",
                                  "//     CareTypeID,",
                                  "//     CareType,",
                                  "//     CareTypeCode,",
                                  "    CareTypeCode as CareType",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCompetitorToCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2.2: Again, grab information about the competitor",
                                  "Left Join (TempCompetitors)",
                                  "LOAD",
                                  "//     mstrCompetitor,",
                                  "    CompetitorID,",
                                  "//     PropertyID,",
                                  "    Competitor as Organization,",
                                  "    \u0027Competitor\u0027 as OrganizationType,",
                                  "//     Address,",
                                  "//     City,",
                                  "//     State,",
                                  "//     PostalCode,",
                                  "//     Region,",
                                  "//     Market,",
                                  "//     Metro,",
                                  "//     CBSACode,",
                                  "//     County,",
                                  "//     CountyFIPS,",
                                  "//     Country,",
                                  "//     GooglePlaceID,",
                                  "//     PhoneNumber,",
                                  "//     Latitude,",
                                  "//     Longitude,",
                                  "    GeoMakePoint(Latitude, Longitude) as [B2B Location]",
                                  "//     OpenDT,",
                                  "//     PropertyType,",
                                  "//     CampusType,",
                                  "//     PrimaryPaymentType,",
                                  "//     CCRCContractType,",
                                  "//     ProfitStatus,",
                                  "//     PropertyStatus,",
                                  "//     Operator,",
                                  "//     EffectiveDT,",
                                  "//     ReplicaDT,",
                                  "//     Sector,",
                                  "//     CommunityByPlurality,",
                                  "//     SegmentMix",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCompetitor.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2.3: Join up Pricing by competitor/care/room type from Price Advisor/CRM Know Your Market",
                                  "Left Join (TempCompetitors)",
                                  "LOAD",
                                  "//     factCompetitorToPriceByCareByRoomTypeStyleID,",
                                  "    CompetitorID,",
                                  "//     CareTypeID,",
                                  "//     CareType,",
                                  "    CareTypeCode,",
                                  "    CareTypeCode as CareType,",
                                  "//     RoomTypeStyleID,",
                                  "    RoomTypeStyle,",
                                  "    IF(RoomTypeStyle=\u0027One Bedroom\u0027, \u00271 BR\u0027, IF(RoomTypeStyle=\u0027Two Bedroom\u0027, \u00272 BR\u0027, IF(RoomTypeStyle=\u0027Three Bedroom\u0027, \u00273 BR\u0027, RoomTypeStyle))) as RoomTypeStyleCode,",
                                  "    PriceBaseBegin,",
                                  "    PriceBaseEnd,",
                                  "    UnitCapacity",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCompetitorToPrice.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2.4: Concatenate the first table we made to get the Unknown Room Type lines.",
                                  "Concatenate(TempCompetitors)",
                                  "LOAD * Resident TempCareType2;",
                                  "Drop Table TempCareType2;",
                                  "",
                                  "/Step 2.5: Grab associated OrganizationID (if there is one)",
                                  "Left Join(TempCompetitors)",
                                  "LOAD",
                                  "    %OrganizationID,",
                                  "    CompetitorID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "/ Step 2.6: Grab Lost Inquiries with Care and Room Type.",
                                  "Join (TempCompetitors)",
                                  "LOAD",
                                  "\t\"Inquirer Dashboard\",",
                                  "    %CommunityKey,",
                                  "    %InquiryID as LostInquiryID,",
                                  "     DateOfInquiry,",
                                  "    Status,",
                                  "    ActiveCRMStatus, ",
                                  "    InquiryStatusDate as %DateKey,",
                                  "     InquiryName,",
                                  "     ReferralBucket,",
                                  "     IsEleadFlg,",
                                  "     InitialTourDate,",
                                  "    LostCategory,",
                                  "    LostLocationID as [%OrganizationID],",
                                  "    LostLocation,",
                                  "    LostInfluence,",
                                  "    %CustomerIDKey as LostCustomerID,",
                                  "    CareType,",
                                  "     InquiryNote,",
                                  "     IF( ISNULL(RoomType), \u0027Unknown\u0027,",
                                  "    IF( RoomType=\u0027One Bedroom Deluxe\u0027 OR RoomType=\u0027One Bedroom\u0027 OR RoomType=\u0027Suite\u0027, \u00271 BR\u0027,",
                                  "    IF( RoomType=\u0027Alcove\u0027 OR RoomType=\u0027Studio\u0027 OR RoomType=\u0027Studio Deluxe\u0027, \u0027Studio\u0027,",
                                  "    IF( RoomType=\u0027Two Bedroom\u0027, \u00272 BR\u0027,",
                                  "    IF( RoomType=\u0027Three Bedroom\u0027, \u00273 BR\u0027,  RoomType))))) as RoomTypeStyleCode,",
                                  "    Date(Floor(MoveInDate)) as InquiryMoveInDate",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd)",
                                  "Where Status=\u0027Lost\u0027;",
                                  "",
                                  "",
                                  "Store [TempCompetitors] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factCompetitors.qvd]",
                                  "(qvd);",
                                  "drop Table [TempCompetitors];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.4 Reservation Key Table (RVP Approval)",
        "LoadScriptContent":  [
                                  "$tab 6.4 Reservation Key Table (RVP Approval)",
                                  "/*",
                                  "The purpose of this script is to decide, based on a series of logic, which reservation record ties to the move in. Then we can grab the HasRVPApprovalFlg.",
                                  "CustomerID, ProductInventoryID, and RoomRate usually will work, but ocassionally a customer could have multiple reservations with those details. We can\u0027t always",
                                  "join on DesiredDT = MoveInDT because in many cases these will not match perfectly. Therefore, if CustomerID + ProductInventoryID + RoomRate has only one instance, link on",
                                  "this. If it has multiple instances, then use DesiredDT as well.",
                                  "*/",
                                  "/Step 1.1: Create the keys from business data",
                                  "TEMPKeyTable:",
                                  "LOAD distinct CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey",
                                  "\t,CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT)) as ReservationDupKey",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID);",
                                  "",
                                  "/Step 1.2: Get count of instances for CustomerID + ProductInventoryID + RoomRate",
                                  "TEMP2KeyTable:",
                                  "LOAD CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026 Num(RoomRate) as ReservationKey",
                                  "\t,COUNT(ReservationID) as CountRecords",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID)",
                                  "Group by CustomerID, ProductInventoryID, RoomRate;",
                                  "",
                                  "",
                                  "/Step 1.3: Left Join count",
                                  "Left Join (TEMPKeyTable)",
                                  "LOAD * Resident TEMP2KeyTable;",
                                  "store TEMPKeyTable into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_ReservationKeys.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table TEMP2KeyTable;",
                                  "drop table TEMPKeyTable;",
                                  "",
                                  "/Step 2.1: If one instance, keep ReservationKey. If more than one instance, keep ReservationDupKey (with DesiredDT)",
                                  "TEMP3KeyTable:",
                                  "LOAD distinct IF(CountRecords=1, ReservationKey, NULL()) as ReservationKey,",
                                  "\tIF(CountRecords\u003e1, ReservationDupKey, NULL()) as ReservationDupKey",
                                  "From [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_ReservationKeys.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2.2: Create Table with only one instance",
                                  "KeyTable:",
                                  "LOAD ReservationKey",
                                  "Resident TEMP3KeyTable",
                                  "Where NOT(ISNULL(ReservationKey));",
                                  "",
                                  "INNER Join(KeyTable)",
                                  "LOAD",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey,",
                                  "// \tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT)) as ReservationDupKey,",
                                  "    IF(Max(HasRVPApprovalFlg)=1, \u0027Approved\u0027, IF(Max(HasRVPApprovalFlg)=0, \u0027Not Approved\u0027, \u0027Unknown\u0027)) as HasRVPApprovalFlgOne,",
                                  "    Date(Floor(Min(CreateDT))) as CreateDTOne,",
                                  "    Concat(RoomRateDeviationReason, \u0027; \u0027) as RoomRateDeviationReason",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID)",
                                  "Group By CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate);",
                                  "",
                                  "/Step 2.3: Create Table with only multiple instances",
                                  "KeyTableDups:",
                                  "LOAD ReservationDupKey",
                                  "Resident TEMP3KeyTable",
                                  "Where NOT(ISNULL(ReservationDupKey));",
                                  "Drop Table TEMP3KeyTable;",
                                  "",
                                  "INNER Join(KeyTableDups)",
                                  "LOAD",
                                  "// \tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey,",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT)) as ReservationDupKey,",
                                  "    IF(Max(HasRVPApprovalFlg)=1, \u0027Approved\u0027, IF(Max(HasRVPApprovalFlg)=0, \u0027Not Approved\u0027, \u0027Unknown\u0027)) as HasRVPApprovalFlgDup,",
                                  "    Date(Floor(Min(CreateDT))) as CreateDTDup,",
                                  "    Concat(RoomRateDeviationReason, \u0027; \u0027) as RoomRateDeviationReason",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID)",
                                  "Group By CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT));"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.5  Revenue",
        "LoadScriptContent":  [
                                  "$tab 6.5 *Revenue",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "/PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factProductPricing EXTRACT AND THE factInquiryByReferral TRANSFORM, SO IT MUST FOLLOW THOSE SECTIONS.",
                                  "/Step 0.1: Rename fields",
                                  "TEMPKEYfactRevenueByMoveIn:",
                                  "LOAD ",
                                  "\tDISTINCT",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey,",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(MoveInDt)) as ReservationDupKey,",
                                  "//\tRevenueByMoveInID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "\tBillingID, ",
                                  "\tResident, ",
                                  "\tdate(Floor(MoveInDt)) as [%DateKey],",
                                  "    IF(ISNULL(PhysicalMoveInDT), Date(Floor(MoveInDt)), Date(Floor(PhysicalMoveInDT))) as PhysicalMoveInDT,",
                                  "    date(floor(monthstart(MoveInDt))) as MonthBonusDate,",
                                  "    date(floor(monthstart(MoveInDt, -1))) as PriorMonthDate,",
                                  "    date(floor(quarterstart(MoveInDt))) as QuarterBonusDate,",
                                  "\tdate(Floor(MoveOutDt)) as MoveOutDate, ",
                                  "    Floor(MoveOutDt)-Floor(MoveInDt) as DaysOfResidency,",
                                  "\tDayOfResidence, ",
                                  "\tPayorType, ",
                                  "\tIF(CareType=\u0027Independent Living\u0027, \u0027IL\u0027, IF(CareType=\u0027Assisted Living\u0027, \u0027AL\u0027, IF(CareType=\u0027Memory Care\u0027, \u0027LG\u0027))) as CareType, ",
                                  "\tRoomType, ",
                                  "\tRoomTypeStyle, ",
                                  "\tProductInventoryID,",
                                  "\tRoomNumber, ",
                                  "//\tBedNumber, ",
                                  "\tRevenue as M_RevenueAtMaturity, ",
                                  "\tIF(WildMatch(PayorType, \u0027Respite\u0027) and Date(Floor(MoveInDt)) \u003e= \u00272021-03-01\u0027, RoomRate/25, RoomRate) as RoomRate, ",
                                  "\tHospitality as HospitalityTemp, ",
                                  "    FoodTaxCharge as FoodTaxChargeTemp,",
                                  "\tAutomatedMoveInCharge as AutomatedMoveInChargeTemp, ",
                                  "\tAMCConcession as M_AMCConcessionTemp, ",
                                  "//\tCareLevel, ",
                                  "\tCareRate, ",
                                  "//\tSeries, ",
                                  "//\tCareAncillary, ",
                                  "\tCareAncillaryRate, ",
                                  "\tOtherBilling as OtherBillingTemp, ",
                                  "\tMoveInIncentiveConcession as M_MoveInAllowanceTemp, ",
                                  "\tRecurringAllowance as M_RecurringAllowanceTemp, ",
                                  "\tIsLeaseVerifyFlg,",
                                  "    IF(NOT(ISNULL(MoveOutDt)) and DayOfResidence\u003c\u003e\u002730\u0027,0,1) as RevenueIncludeFlg,",
                                  "    isSpecializedPayorProgramFlg,",
                                  "    1 as SourceBonusPlanFlg,",
                                  "    IF(WildMatch(CommunityNumber, 10270) and WildMatch(CareType, \u0027Assisted Living\u0027) and MoveInDt \u003e= \u00272020-07-01\u0027, ",
                                  "    \tIF(WildMatch(PayorType, \u0027Singular Private Pay\u0027), 500, 0), 0) as SPPAdder,",
                                  "    IF(WildMatch(CommunityNumber, 10270) and WildMatch(CareType, \u0027Assisted Living\u0027) and MoveInDt \u003e= \u00272020-07-01\u0027, ",
                                  "    \tIF(WildMatch(PayorType, \u0027Second Person Fee\u0027), 300, 0), 0) as SecondAdder,",
                                  "    IF(WildMatch(CommunityNumber, 10270) and WildMatch(CareType, \u0027Assisted Living\u0027) and MoveInDt \u003e= \u00272020-07-01\u0027, ",
                                  "    \tIF(WildMatch(PayorType, \u0027Respite\u0027), 20, 0), 0) as RespiteAdder",
                                  "                \t",
                                  "//\tCreateBy, ",
                                  "// \tCreateDT ",
                                  "//\tModifyBy, ",
                                  "//\tModifyDT, ",
                                  "// \tReplicaDT as RevenueByMoveInReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Concatenate Respite Move Ins",
                                  "Concatenate(TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD CommunityNumber as [%CommunityKey],",
                                  "\tCustomerID as [%CustomerIDKey],",
                                  "    Resident,",
                                  "    Date(Floor(MoveInDT)) as [%DateKey],",
                                  "    date(floor(monthstart(MoveInDT))) as MonthBonusDate,",
                                  "    date(floor(monthstart(MoveInDT, -1))) as PriorMonthDate,",
                                  "    date(floor(quarterstart(MoveInDT))) as QuarterBonusDate,",
                                  "\tdate(Floor(MoveOutDT)) as MoveOutDate, ",
                                  "    Floor(MoveOutDT)-Floor(MoveInDT) as DaysOfResidency,",
                                  "    Floor(MoveOutDT)-Floor(MoveInDT) as DayOfResidence,",
                                  "    room_rate as M_RevenueAtMaturity,",
                                  "    room_rate as RoomRate,",
                                  "    \u0027Respite\u0027 as PayorType,",
                                  "    IF(WildMatch(type_svcs, \u0027Assisted Living\u0027), \u0027AL\u0027, IF(WildMatch(type_svcs, \u0027Alz/Dementia\u0027), \u0027LG\u0027, IF(WildMatch(type_svcs, \u0027Independent\u0027), \u0027IL\u0027))) as CareType,",
                                  "\troom_no as RoomNumber,",
                                  "\tProductInventoryID,",
                                  "\tRoomType,",
                                  "\tRoomTypeStyle,",
                                  "    0 as RevenueIncludeFlg,",
                                  "    0 as isSpecializedPayorProgramFlg,",
                                  "    0 as SourceBonusPlanFlg",
                                  "Where SegmentRank = 1;",
                                  "SQL select ",
                                  "\tRANK() OVER(Partition By tblEventHistory.Comm_no, tblEventHistory.CustomerID, event_dt Order by MoveOutDT ASC) as SegmentRank",
                                  "\t,tblEventHistory.Comm_no as CommunityNumber",
                                  "\t,tblEventHistory.CustomerID",
                                  "\t,event_dt as MoveInDT",
                                  "\t,MoveOutDT",
                                  "\t,room_rate",
                                  "\t,type_svcs",
                                  "    ,Resident",
                                  "\t,room_no",
                                  "\t,ProductInventoryID",
                                  "\t,RoomType",
                                  "\t,RoomTypeStyle",
                                  "From BusinessData.ARM.tblEventHistory",
                                  "Left Join (select ",
                                  "\t\t\t\tComm_no as CommunityNumber",
                                  "\t\t\t\t,CustomerID",
                                  "\t\t\t\t,CASE WHEN eventTypeID=26 THEN event_dt - 1 else event_dt END AS MoveOutDT",
                                  "\t\t\tFrom BusinessData.ARM.tblEventHistory",
                                  "\t\t\twhere event_dt\u003e=\u0027$(vmindate2)\u0027 and eventTypeID in (8,26)) MoveOuts",
                                  "ON MoveOuts.CommunityNumber = tblEventHistory.comm_no",
                                  "\tand MoveOuts.CustomerID = tblEventHistory.CustomerID",
                                  "\tand MoveOuts.MoveOutDT \u003e= tblEventHistory.event_dt",
                                  "Left Join (Select distinct CustomerID, Resident from AtriaDW.Master.mstrCustomer) mstrCustomer",
                                  "ON mstrCustomer.CustomerID = tblEventHistory.CustomerID",
                                  "Left Join (Select",
                                  "\t\t\t\tCommunityNumber + \u0027 \u0026 \u0027 + ProductNumber as ProductInventoryKey",
                                  "\t\t\t\t,ProductInventoryID",
                                  "\t\t\t\t,RoomType",
                                  "\t\t\t\t,RoomTypeStyle",
                                  "\t\t\tFROM AtriaDW.Pricing.mstrProductInventory) mstrProductInventory",
                                  "ON mstrProductInventory.ProductInventoryKey = tblEventHistory.comm_no + \u0027 \u0026 \u0027 + tblEventHistory.room_no",
                                  "where event_dt\u003e=\u0027$(vmindate2)\u0027 and event_dt \u003c \u00272021-03-01\u0027 and PayorID=19 and eventTypeID in (6,7);",
                                  "",
                                  "/Step 0.2: Grab the HasRVPApprovalFlg and original deposit create date from the Reservation Key Tables",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD distinct * Resident KeyTable;",
                                  "Drop Table KeyTable;",
                                  "",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD distinct * Resident KeyTableDups;",
                                  "Drop Table KeyTableDups;",
                                  "",
                                  "/TEMP GENERAL LEDGER",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "TEMPGeneralLedger:",
                                  "LOAD CommunityNumber as [%CommunityKey],",
                                  "    Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "    LedgerEntryID,",
                                  "    ActualCost,",
                                  "    MonthlyCost,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    ProcessFlg;",
                                  "SQL SELECT CommunityNumber,",
                                  "    EffectiveDT,",
                                  "    LedgerEntryID,",
                                  "    ActualCost,",
                                  "    MonthlyCost,",
                                  "    ActiveFLG,",
                                  "    CustomerID,",
                                  "    ProcessFlg",
                                  "FROM BusinessData.ARM.tblGeneralLedger",
                                  "",
                                  "Left Join (Select CommunityNumber, CommunityID from BusinessData.ARM.tblCommunity) tblCommunity",
                                  "ON tblCommunity.CommunityID = tblGeneralLedger.CommunityID",
                                  "",
                                  "Where ActiveFLG=1",
                                  ";",
                                  "",
                                  "Left Join (TEMPGeneralLedger)",
                                  "LOAD [%CommunityKey],",
                                  "\t[%CustomerIDKey],",
                                  "    [%DateKey],",
                                  "    IF(ISNULL(MoveOutDate), Date(Floor(Date([%DateKey]+365))), MoveOutDate) as EndDT",
                                  "Resident TEMPKEYfactRevenueByMoveIn;",
                                  "",
                                  "",
                                  "TEMPGeneralLedger2:",
                                  "NoConcatenate",
                                  "LOAD *",
                                  "Resident TEMPGeneralLedger",
                                  "Where EffectiveDT\u003e= %DateKey and EffectiveDT \u003c= EndDT;",
                                  "Drop Table TEMPGeneralLedger;",
                                  "",
                                  "/Step 0.3: Calculate Hospitality for post-7/1/2020 move ins",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as HospitalityDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM BusinessData.BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM BusinessData.BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (3)",
                                  "AND\t\t\tLedgerEntryID IN (65,66,86,126);",
                                  "",
                                  "/Step 0.4: Calculate FoodTaxCharge for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as FoodTaxChargeDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM BusinessData.BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM BusinessData.BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (3)",
                                  "AND\t\t\tLedgerEntryID IN (60,61);",
                                  "",
                                  "/Step 0.5: Calculate AutomatedMoveInCharge for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as AutomatedMoveInChargeDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM BusinessData.BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM BusinessData.BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (5)",
                                  "AND\t\t\tLedgerEntryID IN (7,58,81,91,127,161);",
                                  "",
                                  "/Step 0.6: Calculate AMCConcession for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as M_AMCConcessionDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM BusinessData.BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM BusinessData.BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (5)",
                                  "AND\t\t\tLedgerEntryID IN (33,59,82,89,128,162);",
                                  "",
                                  "",
                                  "/Step 0.7: Calculate OtherBilling for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as OtherBillingDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 4, 5, 15, 16, 17, 18, 19, 20, 35, 37, 40, 44, 46, 67, 71, 76, 84, 85, 94, 150, 158)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "/Step 0.8: Calculate MoveInIncentiveConcession for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_MoveInAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 97,100)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "/Step 0.9: Calculate M_RentAllowance for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_RentAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 101,143, 99, 163, 32, 142)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "/Step 0.10: Calculate M_RentRecurringAllowance for post-7/1/2020 move ins",
                                  "//Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "//LOAD",
                                  "//    [%CustomerIDKey],",
                                  "//    %DateKey,",
                                  "//    SUM(ActualCost) as M_RentRecurringAllowanceDetail",
                                  "//Resident TEMPGeneralLedger2",
                                  "//Where WildMatch(LedgerEntryID, 99,163,32,142)",
                                  "//Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "/Step 0.11: Calculate M_CareAllowance for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_CareAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 25,47,124,29)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "",
                                  "/Step 0.12: Calculate M_CareRecurringAllowance for post-7/1/2020 move ins",
                                  "//Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "//LOAD",
                                  "//    [%CustomerIDKey],",
                                  "//    %DateKey,",
                                  "//    SUM(ActualCost) as M_CareRecurringAllowanceDetail",
                                  "//Resident TEMPGeneralLedger2",
                                  "//Where WildMatch(LedgerEntryID, 29)",
                                  "//Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "/Step 0.13: Calculate M_SupplementalAllowance for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_SupplementalAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 98)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "/Step 0.14: Calculate Pre-Move In Allowance for post-7/1/2020 move ins",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_PreMoveInAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 349)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "Drop Table TEMPGeneralLedger2;",
                                  "",
                                  "",
                                  "/Step 1.1: set rvp approval and create date values",
                                  "TEMPfactRevenueByMoveIn:",
                                  "LOAD\t",
                                  "\tReservationKey,",
                                  "\tReservationDupKey,",
                                  "\t[%CommunityKey], ",
                                  "\t%CustomerIDKey, ",
                                  "    BillingID,",
                                  "\tResident, ",
                                  "\t[%DateKey],",
                                  "    PhysicalMoveInDT,",
                                  "    MonthBonusDate,",
                                  "    PriorMonthDate,",
                                  "    QuarterBonusDate,",
                                  "\tMoveOutDate, ",
                                  "    DaysOfResidency,",
                                  "\tDayOfResidence, ",
                                  "\tPayorType, ",
                                  "\tCareType, ",
                                  "\tRoomType, ",
                                  "    RoomTypeStyle,",
                                  "\tProductInventoryID,",
                                  "\tRoomNumber, ",
                                  "\tM_RevenueAtMaturity, ",
                                  "\tRoomRate, ",
                                  "\tIF([%DateKey]\u003e\u00276/30/2020\u0027, HospitalityDetail, HospitalityTemp) as Hospitality, ",
                                  "\tIF([%DateKey]\u003e\u00276/30/2020\u0027, FoodTaxChargeDetail, FoodTaxChargeTemp) as FoodTaxCharge, ",
                                  "\tIF([%DateKey]\u003e\u00276/30/2020\u0027, AutomatedMoveInChargeDetail, AutomatedMoveInChargeTemp) as AutomatedMoveInCharge, ",
                                  "\tIF([%DateKey]\u003e\u00276/30/2020\u0027, M_AMCConcessionDetail, M_AMCConcessionTemp) as M_AMCConcession, ",
                                  "\tCareRate, ",
                                  "\tCareAncillaryRate, ",
                                  "\tOtherBillingDetail as OtherBilling, ",
                                  "\tM_MoveInAllowanceDetail as M_MoveInAllowance, ",
                                  "\tM_RentAllowanceDetail as M_RentAllowance, ",
                                  "//    M_RentRecurringAllowanceDetail as M_RentRecurringAllowance,",
                                  "    M_CareAllowanceDetail as M_CareAllowance,",
                                  "//    M_CareRecurringAllowanceDetail as M_CareRecurringAllowance,",
                                  "    M_SupplementalAllowanceDetail as M_SupplementalAllowance,",
                                  "    M_PreMoveInAllowanceDetail as M_PreMoveInAllowance,",
                                  "\tIsLeaseVerifyFlg,",
                                  "    RevenueIncludeFlg,",
                                  "    isSpecializedPayorProgramFlg,",
                                  "    IF(NOT(ISNULL(HasRVPApprovalFlgOne)), HasRVPApprovalFlgOne, IF(NOT(ISNULL(HasRVPApprovalFlgDup)), HasRVPApprovalFlgDup, \u0027Unknown\u0027)) as HasRVPApprovalFlg,",
                                  "    RoomRateDeviationReason,",
                                  "    Date(Floor(RangeMin(CreateDTOne, CreateDTDup))) as ReservationCreateDT,",
                                  "    SourceBonusPlanFlg,",
                                  "    SPPAdder,",
                                  "    SecondAdder,",
                                  "    RespiteAdder,",
                                  "    //add rate compliance columns",
                                  "    if([%DateKey]\u003e=\u00274/1/2022\u0027,\u0027$(vComplianceMax_220401)\u0027, \u0027$(vComplianceMax_2020)\u0027) as ComplianceMax,",
                                  "    if([%DateKey]\u003e=\u00274/1/2022\u0027,\u0027$(vComplianceMin_220401)\u0027, \u0027$(vComplianceMin_2020)\u0027) as ComplianceMin",
                                  "Resident TEMPKEYfactRevenueByMoveIn;",
                                  "",
                                  "Drop Table TEMPKEYfactRevenueByMoveIn;",
                                  "",
                                  "/Step 1.2: Grab Street/Selling Rate of the room on the move in date.",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    if(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00278/11/2020\u0027,PriceBase,",
                                  "    \tif(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00271/1/2021\u0027, PriceMinimum, PriceSpecial)) as M_Selling,",
                                  "    PriceAllowance as Allowance_DW",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 1.2a: Grab Selling Rate of the room on month start of move in date.",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(EffectiveDT)) as MonthBonusDate,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "//     PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    if(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00278/11/2020\u0027,PriceBase,",
                                  "    \tif(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00271/1/2021\u0027, PriceMinimum, PriceSpecial)) as M_MonthStart",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 1.2c: Grab Rate of the room on prior month start of move in date.",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(EffectiveDT)) as PriorMonthDate,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "//     PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    if(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00278/11/2020\u0027,PriceBase,",
                                  "    \tif(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00271/1/2021\u0027, PriceMinimum, PriceSpecial)) as M_PriorMonthStart",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd)",
                                  ";",
                                  "",
                                  "",
                                  "/Step 1.2d: Grab Rate of the room on deposit create date.",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(EffectiveDT)) as ReservationCreateDT,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "//     PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    if(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00278/11/2020\u0027,PriceBase,",
                                  "    \tif(Wildmatch(Payor, \u0027Respite\u0027,\u0027Semi-Private Pay\u0027) AND EffectiveDT \u003c \u00271/1/2021\u0027, PriceMinimum, PriceSpecial)) as M_ResCreate",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd)",
                                  ";",
                                  "",
                                  "",
                                  "/Step 1.3: Grab RoomTypeStyleCode and RoomNote for use in tables.",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "//     %CommunityKey,",
                                  "    ProductInventoryID,",
                                  "    RoomTypeStyleCode,",
                                  "//     CareType,",
                                  "//     IsOccupiedFlg,",
                                  "//     IsReservedFlg,",
                                  "//     IsVacancyScheduledFlg,",
                                  "//     IsSemiPrivateResidentFlg,",
                                  "//     M_DaysVacant,",
                                  "//     IsRoomReadyFlg,",
                                  "//     Grade,",
                                  "//     StreetRate,",
                                  "//     SpecialRate,",
                                  "    RoomNote,",
                                  "    IsModelRoomFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.4: Grab the ALZ1 rate (which will be added in for LG move ins)",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    %DateKey,",
                                  "    ChargeAmount as ALZ1,",
                                  "    \u0027LG\u0027 as CareType,",
                                  "//     FromDate,",
                                  "//     ToDate,",
                                  "//     CareID,",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ALZ1.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.5: Grab relevant inquiry information",
                                  "Left Join(TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %InquiryID,",
                                  "    %CustomerIDKey,",
                                  "    ContactID,",
                                  "    DateOfInquiry,",
                                  "    Status,",
                                  "    ActiveCRMStatus, ",
                                  "    StatusCategory,",
                                  "    InquiryPostalCode,",
                                  "    InquiryPhoneHome,",
                                  "    InquiryPhoneWork,",
                                  "    InquiryPhoneCell,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    %OrganizationID,",
                                  "    IsEleadCorporationFlg,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy,",
                                  "    JournalOwner,",
                                  "    VisitorSource,",
                                  "    VisitorSourceFull,",
                                  "    VisitorCampaign,",
                                  "    VisitorCampaignFull,",
                                  "    VisitorCampaignName,",
                                  "    VisitorCampaignAdGroup,",
                                  "    VisitorCampaignAd,",
                                  "    VisitorCampaignKeyword,",
                                  "    VisitorCampaignMatchType,",
                                  "    VisitorCampaignDevice,",
                                  "    VisitorCampaignGclid,",
                                  "    GoogleCampaignFlg,",
                                  "    VisitorMedium,",
                                  "    VisitorFormURL,",
                                  "    VisitorFormLocation,",
                                  "    VisitorFormType,",
                                  "    VisitorCampaignTerm,",
                                  "    VisitorCampaignContent,",
                                  "    IsSelfAssessment,",
                                  "    LostCategory,",
                                  "    InquiryCreateBy,",
                                  "    IsEleadFlg,",
                                  "    IsEleadFocusFlg,",
                                  "    IsAtriaWebsiteFlg,",
                                  "    MinInquiryDT,",
                                  "    MinInquiryDT as MonthStartMinInquiryDT,//Database Advancements sheet to be in Sales VP app",
                                  "    InitialTourDate,",
                                  "    MinCustomerID,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    M_TotalTours,",
                                  "    M_ContactAttempts",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 1.6: Get Move Out information, if applicable",
                                  "Left Join(TEMPfactRevenueByMoveIn)",
                                  "LOAD ",
                                  "DISTINCT",
                                  "//     factResidentMoveOutID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     LocationType,",
                                  "    Location,",
                                  "    Date(Floor(MoveOutDT)+1) as MoveOutDate, /Add 1 to the date so it matches with move out date in bonus plan (physical v. financial move out)",
                                  "    MoveOutReason,",
                                  "               IF(MoveOutReason like \u0027Acuity - Agressive Behavior\u0027, \u0027Aggressive Behavior\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Behavior\u0027, \u0027Behavior\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity ??? Dementia\u0027, \u0027Dementia\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Exit Seeking\u0027, \u0027Exit Seeking\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Injection/Accucheck\u0027, \u0027Injection/Accucheck\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Mobility\u0027, \u0027Mobility\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity ??? Other\u0027, \u0027Acuity - Other\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Sexual Behavior\u0027, \u0027Sexual Behavior\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity - Sliding Scale\u0027, \u0027Sliding Scale\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - State Prohibited\u0027, \u0027State Prohibited\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity - Suicidal\u0027, \u0027Suicidal\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity - Wounds\u0027, \u0027Wounds\u0027,",
                                  "               IF(MoveOutReason like \u0027Financial - Out of Funds\u0027, \u0027Out of Funds\u0027,",
                                  "               IF(MoveOutReason like \u0027Financial ??? Rates\u0027, \u0027Rates\u0027, MoveOutReason)))))))))))))) as MoveOutReasonShort,",
                                  "    Note as MoveOutNote",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOut.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 1.7: Grab Move Out Category from Excel sheet provided by Sanela",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    MoveOutReason,",
                                  "    MoveOutCategory",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Move Out Reasons.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet2);",
                                  "",
                                  "",
                                  "Store [TEMPfactRevenueByMoveIn] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [TEMPfactRevenueByMoveIn];",
                                  "",
                                  "ComplianceKey:",
                                  "LOAD",
                                  "    \"Community Number\" \u0026 \u0027 \u0027 \u0026 CustomerID as ComplianceKey",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Revenue Management/Residents Excluded from Compliance.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "/Step 2: Create Variances for Compliance",
                                  "TEMP2factRevenueByMoveIn:",
                                  "Load",
                                  "*,",
                                  "// \tIF(Exists(ComplianceKey, %CommunityKey \u0026 \u0027 \u0027 \u0026 %CustomerIDKey),0,1) as ComplianceIncludeFlg,",
                                  "    //NEW ComplianceIncludeFlg once approved",
                                  "\tIF(Exists(ComplianceKey, %CommunityKey \u0026 \u0027 \u0027 \u0026 %CustomerIDKey) ",
                                  "// \t\tOR isSpecializedPayorProgramFlg=1 ",
                                  "// \t\tOR ISNULL(ProductInventoryID) ",
                                  "\t\tOR (WildMatch(PayorType, \u0027Second Person Fee\u0027) AND %DateKey \u003c \u00271/1/2021\u0027) , 0 , 1) as ComplianceIncludeFlg,",
                                  "\tRangeSum(RoomRate , Hospitality , FoodTaxCharge, ALZ1) as M_MoveInRate,",
                                  "    Fabs(RangeSum(RoomRate , Hospitality , FoodTaxCharge, ALZ1)-RangeSum(M_Selling, Rangemax(SPPAdder, SecondAdder, RespiteAdder))) as Variance_Selling,",
                                  "    Fabs(RangeSum(RoomRate , Hospitality , FoodTaxCharge, ALZ1)-RangeSum(M_MonthStart, Rangemax(SPPAdder, SecondAdder, RespiteAdder))) as Variance_SellingMonthStart,",
                                  "    Fabs(RangeSum(RoomRate , Hospitality , FoodTaxCharge, ALZ1)-RangeSum(M_PriorMonthStart, Rangemax(SPPAdder, SecondAdder, RespiteAdder))) as Variance_SellingPriorMonthStart,",
                                  "    Fabs(RangeSum(RoomRate , Hospitality , FoodTaxCharge, ALZ1)-RangeSum(M_ResCreate, Rangemax(SPPAdder, SecondAdder, RespiteAdder))) as Variance_SellingReservation,",
                                  "    IF((date(floor(%DateKey))-date(floor(MinInquiryDT)))\u003e365,\u0027\u0027, IF(date(floor((%DateKey))-date(floor(MinInquiryDT)))\u003c0,\u0027\u0027, date(floor(%DateKey))-date(floor(MinInquiryDT)))) as M_InquiryToMoveInDays,",
                                  "    IF((date(floor(%DateKey))-date(floor(InitialTourDate)))\u003e365, \u0027\u0027, IF(date(floor((%DateKey))-date(floor(InitialTourDate)))\u003c0, \u0027\u0027, date(floor(%DateKey))-date(floor(InitialTourDate)))) as M_TourToMoveInDays",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactRevenueByMoveIn.qvd]",
                                  "(qvd); ",
                                  "",
                                  "Left Join (TEMP2factRevenueByMoveIn)",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    DATE(FLOOR(BirthDT)) as DOB",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "AllowanceBucket:",
                                  "LOAD",
                                  "    BU as %CommunityKey,",
                                  "    CareType,",
                                  "    StartDate,",
                                  "    IF(ISNULL(EndDate), \u00274/1/2022\u0027, EndDate) as EndDate,",
                                  "    AllowanceBucket,",
                                  "    Note",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/SharePoint/Revenue Management/Residents Excluded from Compliance.xlsx]",
                                  "(ooxml, embedded labels, table is Allowances);",
                                  "",
                                  "",
                                  "Left join (AllowanceBucket)",
                                  "Load",
                                  "%CommunityKey,",
                                  "CareType,",
                                  "StartDate,",
                                  "Date(StartDate + IterNo()-1) as %DateKey",
                                  "Resident AllowanceBucket",
                                  "while StartDate + IterNo()-1 \u003c= EndDate;",
                                  "",
                                  "",
                                  "Left Join (TEMP2factRevenueByMoveIn)",
                                  "LOAD [%CommunityKey],",
                                  "\tCareType,",
                                  "    %DateKey,",
                                  "    AllowanceBucket",
                                  "Resident AllowanceBucket;",
                                  "Drop Table AllowanceBucket;",
                                  "",
                                  "Drop Table ComplianceKey;",
                                  "",
                                  "Respites:",
                                  "LOAD",
                                  "    %CustomerIDKey as RespiteID,",
                                  "    %DateKey as RespiteMIDT,",
                                  "    MoveOutDate as RespiteMODT,",
                                  "    %CommunityKey",
                                  "resident TEMP2factRevenueByMoveIn",
                                  "where PayorType=\u0027Respite\u0027 and %DateKey\u003e=YearStart(today()) ;",
                                  "",
                                  "left join (TEMP2factRevenueByMoveIn)",
                                  "Load",
                                  "\tRespiteMIDT,",
                                  "    RespiteMODT,",
                                  "    RespiteID as %CustomerIDKey,",
                                  "    %CommunityKey",
                                  "resident Respites;",
                                  "",
                                  "/Step 3: Have to sum fields to get the Move In Rate for Revenue trackers and Incentivizer apps. Calculate Selling Rate for Compliance.",
                                  "factRevenueByMoveIn_v1:",
                                  "NoConcatenate",
                                  "LOAD ",
                                  "\tFloor(Age(%DateKey, DOB), 1) as AgeAtMoveIn,",
                                  "\tIF(MonthStartMinInquiryDT\u003cMonthBonusDate or ISNULL(MinInquiryDT), \u0027Database\u0027, \u0027Newly Acquired\u0027) as DatabaseMoveInFlg, //Database Advancements sheet to be in Sales VP app",
                                  "    ",
                                  "",
                                  "      IF(M_MoveInRate=\u00270\u0027,",
                                  "      \tRangeSum(M_Selling, Rangemax(SPPAdder, SecondAdder, RespiteAdder)),",
                                  "    \tIF(Variance_Selling \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling)",
                                  "        and M_Selling\u003e\u00270\u0027, ",
                                  "          RangeSum(M_Selling, Rangemax(SPPAdder, SecondAdder, RespiteAdder)),",
                                  "          IF(Variance_SellingMonthStart \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling)",
                                  "          and M_MonthStart\u003e\u00270\u0027, ",
                                  "            RangeSum(M_MonthStart, Rangemax(SPPAdder, SecondAdder, RespiteAdder)),",
                                  "            IF(Variance_SellingPriorMonthStart \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling)",
                                  "            and M_PriorMonthStart\u003e\u00270\u0027, ",
                                  "              RangeSum(M_PriorMonthStart, Rangemax(SPPAdder, SecondAdder, RespiteAdder)),",
                                  "              IF(Variance_SellingReservation \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling),",
                                  "              \tIF(M_ResCreate\u003e\u00270\u0027, ",
                                  "                \tRangeSum(M_ResCreate, Rangemax(SPPAdder, SecondAdder, RespiteAdder)),",
                                  "                    RangeSum(M_Selling, Rangemax(SPPAdder, SecondAdder, RespiteAdder))",
                                  "                )",
                                  "              )",
                                  "            )",
                                  "          )",
                                  "        )",
                                  "      ) as ClosestSellingRate,",
                                  "    ",
                                  "      IF(M_MoveInRate=\u00270\u0027,",
                                  "      \t\u0027Selling\u0027,",
                                  "    \tIF(Variance_Selling \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling)",
                                  "        and M_Selling\u003e\u00270\u0027, ",
                                  "          \u0027Selling\u0027,",
                                  "          IF(Variance_SellingMonthStart \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling)",
                                  "          and M_MonthStart\u003e\u00270\u0027, ",
                                  "            \u0027Selling \u0027\u0026Date(Floor(Monthstart([%DateKey]))),",
                                  "            IF(Variance_SellingPriorMonthStart \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling)",
                                  "            and M_PriorMonthStart\u003e\u00270\u0027, ",
                                  "              \u0027Selling \u0027\u0026Date(Floor(Monthstart([%DateKey],-1))),",
                                  "              IF(Variance_SellingReservation \u003c= RangeMin(Variance_SellingMonthStart, Variance_SellingPriorMonthStart, Variance_SellingReservation, Variance_Selling),",
                                  "              \tIF(M_ResCreate\u003e\u00270\u0027, ",
                                  "                \t\u0027Selling \u0027\u0026Date(Floor(ReservationCreateDT)),",
                                  "                    \u0027Selling (Error)\u0027",
                                  "                )",
                                  "              )",
                                  "            )",
                                  "          )",
                                  "        )",
                                  "      ) as ClosestSellingRateTitle,",
                                  "    if(isNull(MoveOutDate), 1, 0)  as NullMoveOutFlg,",
                                  "    if(interval(date(rangemin(today(),MoveOutDate))-%DateKey,\u0027d\u0027) \u003c 30, 1, 0) as Under30Flg, ",
                                  "    interval(date(rangemin(today(),MoveOutDate))-%DateKey,\u0027d\u0027) as QualifiedDaysofResidence,",
                                  "    if((Match(PayorType, \u0027Semi-Private Pay\u0027, \u0027Singular Private Pay\u0027) and M_MoveInRate \u003c 1000) \t// Semi-private or singular private, move in rate under $1000",
                                  "        \tOR (Match(PayorType, \u0027Second Person Fee\u0027)  and M_MoveInRate \u003e 2000), 1, 0) as PayorTypeFlg,  // Second person fee payor type, move in rate above $2000 ",
                                  "    IF(Exists(RespiteID, %CustomerIDKey) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Record of Respite",
                                  "    \tand Monthstart(RespiteMIDT)\u003cMonthstart(%DateKey) \t\t\t\t\t\t\t\t\t\t\t//In a previous Month",
                                  "        and isnull(RespiteMODT)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//who has not moved out",
                                  "        \tand interval(date(rangemin(today(),MoveOutDate))-%DateKey,\u0027d\u0027)\u003e30 \t\t\t\t\t\t//Who stayed 30 days",
                                  "            \tand if((Match(PayorType, \u0027Semi-Private Pay\u0027, \u0027Singular Private Pay\u0027) and M_MoveInRate \u003c 1000) \t",
                                  "        \tOR (Match(PayorType, \u0027Second Person Fee\u0027)  and M_MoveInRate \u003e 2000), 1, 0)=0,        //And is not a PayorTypeFlg THEN Formerly bonused as a Respite",
                                  "            \u0027Former Respite\u0027,null()) as FormerRespiteFlg,",
                                  "       \t",
                                  "\t*",
                                  "Resident TEMP2factRevenueByMoveIn;",
                                  "",
                                  "",
                                  "Drop Table TEMP2factRevenueByMoveIn;",
                                  "drop table Respites;",
                                  "",
                                  "factRevenueByMoveIn:",
                                  "Load",
                                  "\t*,",
                                  "    if(Isnull(ClosestSellingRate) or ClosestSellingRate = 0, \u0027Unknown\u0027,",
                                  "    \tif(round(M_MoveInRate/ClosestSellingRate,.01)\u003e=ComplianceMin and round(M_MoveInRate/ClosestSellingRate,.01)\u003c=ComplianceMax, \u0027Compliant\u0027,",
                                  "    \t\tif(round(M_MoveInRate/ClosestSellingRate,.01)\u003cComplianceMin, \u0027Discount\u0027,\u0027Upsell\u0027)",
                                  "    \t)",
                                  "     ) as ComplianceCategory,",
                                  "      coalesce(AllowanceBucket*ClosestSellingRate, Allowance_DW) as PriceAllowance,",
                                  "        if((NullMoveOutFlg = 1 AND Under30Flg = 1)\t\t\t\t\t\t\t\t\t\t// 1. If move out date not populated \u0026 days of residency less than 30.",
                                  "             \t OR",
                                  "                 Match(PayorType, \u0027Second Person Fee\u0027)\t\t\t\t\t\t\t\t\t\t// 2. If payor type is second person fee",
                                  "                 OR",
                                  "                (NullMoveOutFlg = 1 AND Match(PayorType, \u0027Respite\u0027) AND PayorTypeFlg = 0 AND Under30Flg = 1)\t// 3. Move out date is null, payor type is respite, and PayorTypeFlg is 0 and Days stay \u003c 30. ",
                                  "             \t OR",
                                  "               \t(((NullMoveOutFlg = 1) OR (NullMoveOutFlg = 0 AND Under30Flg = 0))\t\t// 4. Either the move out date is null, OR it isn\u0027t \u0026 residency days \u003e= 30, ",
                                  "               \t  AND Match(PayorType, \u0027Respite\u0027, \u0027Semi-Private Pay\u0027, \u0027Singular Private Pay\u0027) //  AND payor type is either respite, semi, or singular AND PayorTypeFlg = 1",
                                  "                  AND PayorTypeFlg = 1)",
                                  "                  OR (NullMoveOutFlg=0 AND Under30Flg=1)\t\t\t\t\t\t\t\t\t\t//5. Move out date is Null and days stay \u003c 30",
                                  "                  OR FormerRespiteFlg=\u0027Former Respite\u0027, 0, \t\t\t\t\t\t\t\t\t\t//6. Bonused as a Respite  THEN -- the move in is not qualified.",
                                  "                  ",
                                  "    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Two clauses to identify QUALIFIED move ins:",
                                  "               if(((NullMoveOutFlg = 0 OR (NullMoveOutFlg = 1 AND Under30Flg = 0))\t\t\t// 1. Either the move out date is not null, OR it is \u0026 residency days \u003e= 30,",
                                  "                    AND Match(PayorType, \u0027Semi-Private Pay\u0027, \u0027Singular Private Pay\u0027, \u0027Respite\u0027)\t\t//\t  and the payor type is either semi or singular private,",
                                  "                    AND PayorTypeFlg = 0\t\t\t\t\t\t\t\t\t\t\t\t\t//\t  and the payor type flag is 0.",
                                  "                ) OR",
                                  "                  (NullMoveOutFlg = 0 AND Under30Flg = 0) \t\t\t\t\t\t\t\t\t// 2. If the move out date is not null, and residency days are \u003e= 30",
                                  "                   AND Match(PayorType, \u0027Respite\u0027, \u0027Semi-Private Pay\u0027, \u0027Singular Private Pay\u0027) // and payor type is either respite, semi, or singular",
                                  "                   AND PayorTypeFlg = 0, 1)\t\t\t\t\t\t\t\t\t\t\t\t\t   // and payor type flag = 0 THEN-- the move in is qualified.",
                                  "               ) AS QualifiedMoveInFlg,",
                                  "    Num(Round(M_MoveInRate/ClosestSellingRate,.01),\u0027#0%\u0027) as RateCompliance,",
                                  "    if(PayorType=\u0027Respite\u0027,null(),Num(fabs(RangeSum(M_MoveInAllowance, M_CareAllowance, M_AMCConcession,M_RentAllowance)),\u0027$##,##0\u0027)) as TotalAllowanceDollars,",
                                  "    if(PayorType=\u0027Respite\u0027,null(),Num(round(fabs(RangeSum(M_MoveInAllowance, M_CareAllowance, M_AMCConcession,M_RentAllowance))/M_MoveInRate,.01),\u0027#0.0\u0027)) as TotalAllowanceMonths,",
                                  "    if(PayorType=\u0027Respite\u0027,null(),if(fabs(RangeSum(M_MoveInAllowance, M_CareAllowance, M_AMCConcession,M_RentAllowance))\u003ecoalesce(AllowanceBucket*ClosestSellingRate, Allowance_DW),0,1)) as AllowanceComplianceFlg",
                                  "resident factRevenueByMoveIn_v1;",
                                  "drop table factRevenueByMoveIn_v1;",
                                  "",
                                  "Drop Fields NullMoveOutFlg, Under30Flg, ReservationKey, ReservationDupKey, DOB, AllowanceBucket, Allowance_DW from factRevenueByMoveIn;",
                                  "Store [factRevenueByMoveIn] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [factRevenueByMoveIn];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.6  Reservations",
        "LoadScriptContent":  [
                                  "$tab 6.6 *Reservations",
                                  "/PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factProductPricing EXTRACT, SO IT MUST FOLLOW THAT SECTION.",
                                  "/Step 1: Rename fields and clean up date format",
                                  "mstrReservation:",
                                  "LOAD",
                                  "//     factReservationID,",
                                  "    ReservationID as [%ReservationIDKey],",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    ReservationDT,",
                                  "//     Level,",
                                  "    RoomNumber,",
                                  "//     BedNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(DesiredDT)) as %DateKey,",
                                  "    Date(Floor(MonthStart(DesiredDT))) as MonthBonusDate,",
                                  "    Date(Floor(Quarterstart(DesiredDT))) as QuarterBonusDate,",
                                  "    DepositAmount,",
                                  "    RoomRate,",
                                  "    Payor as PayorType,",
                                  "//     IF(WildMatch(Service, \u0027Independent Living\u0027, \u0027Independent\u0027), \u0027IL\u0027, IF(WildMatch(Service, \u0027Assisted Living\u0027, \u0027Assisted\u0027), \u0027AL\u0027, IF(WildMatch(Service, \u0027Memory Care\u0027, \u0027Alz/Dementia\u0027), \u0027LG\u0027))) as CareType,",
                                  "    Date(Floor(CompleteAssessmentDT)) as CompleteAssessmentDT,",
                                  "    Date(Floor(PendingAssessmentDT)) as PendingAssessmentDT,",
                                  "    Date(Floor(PendingMoveInDT)) as PendingMoveInDT // Pending Transactions on ARM Home page",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrReservation.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: grab resident name and statusid (should we really grab status?)",
                                  "Left Join (mstrReservation)",
                                  "LOAD distinct",
                                  "//            KeyID, ",
                                  "               CustomerID as [%CustomerIDKey], ",
                                  "//            CommunityID, ",
                                  "// \t\t\t   CommunityNumber as %CommunityKey,",
                                  "//            InquiryID, ",
                                  "//            BillingID, ",
                                  "               Resident as Customer",
                                  "//            Address1, ",
                                  "//            Address2, ",
                                  "//            City, ",
                                  "//            State, ",
                                  "//            PostalCode, ",
                                  "//            Country, ",
                                  "//            Longitude, ",
                                  "//            Latitude, ",
                                  "//             StatusID ",
                                  "//            Gender, ",
                                  "//            BirthDT, ",
                                  "//            CreateDT, ",
                                  "//            ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Step 3: Grab Street/Selling Rate today for the reservation based on payor type of the reservation.",
                                  "LEFT JOIN (mstrReservation)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "//     Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    PriceSpecial as M_Selling",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd)",
                                  "where Date(Floor(EffectiveDT)) = Date(Floor(Today()));",
                                  "",
                                  "/Step 4: Grab Create DT for the reservation (ReservationDT is actually the ModifyDT)",
                                  "LEFT JOIN (mstrReservation)",
                                  "LOAD",
                                  "    ReservationID as [%ReservationIDKey],",
                                  "    Date(Floor(CreateDT)) as ReservationCreateDT,",
                                  "    Note as ReservationNote,",
                                  "    IF(WildMatch(Lower(Note), \u0027*founder*\u0027), \u0027Yes\u0027, \u0027No\u0027) as FoundersClubFlg,",
                                  "    RateLockFlg,",
                                  "    IF(WildMatch(RateLockFlg, 1), \u0027Yes\u0027, \u0027No\u0027) as RateLock,",
                                  "    Date(Floor(RateLockEndDT)) as RateLockEndDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_tblReservationBusinessData.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 5: Grab Room Type",
                                  "LEFT JOIN (mstrReservation)",
                                  "LOAD",
                                  "    ProductInventoryID,",
                                  "    RoomType,",
                                  "    RoomTypeStyle,",
                                  "    RoomTypeCode,",
                                  "    RoomTypeStyleCode,",
                                  "    CareTypeCode as CareType",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 6: Grab Referral Information",
                                  "Left Join(mstrReservation)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %InquiryID,",
                                  "    %CustomerIDKey,",
                                  "    DateOfInquiry,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    %OrganizationID,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrReservation] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrReservation.qvd]",
                                  "(qvd);",
                                  "drop Table [mstrReservation];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.7 Tour Activity",
        "LoadScriptContent":  [
                                  "$tab 6.7 Tour Activity",
                                  "/Step 1: Rename fields",
                                  "factInquiryTourActivity:",
                                  "LOAD",
                                  "    factInquiryTourActivityID,",
                                  "    InquiryJournalID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  " \tEffectiveTM as JournalTime,",
                                  "    Objective,",
                                  "    FollowUpInquiryJournalID,",
                                  "    FollowUpJournalTypeID,",
                                  "    Date(Floor(FollowUpEffectiveDT)) as FollowUpEffectiveDT,",
                                  "    isTourCloseFlg,",
                                  "    isFollowUpCloseFlg,",
                                  "    MessageStateID,",
                                  "    MessageState,",
                                  "    MessageColor,",
                                  "    MessageDescription,",
                                  "    ApplicationURL as TourJournalDashboard",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factInquiryTourActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: Grab information from factInquiryByReferral",
                                  "Left Join(factInquiryTourActivity)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    %InquiryID,",
                                  "    Status,",
                                  "    %OrganizationID,",
                                  "    ContactID,",
                                  "    \"Inquirer Dashboard\",",
                                  "    DateOfInquiry,",
                                  "    ActiveCRMStatus,",
                                  "    StatusCategory,",
                                  "    InquiryName,",
                                  "    InquiryAddress,",
                                  "    InquiryAddress2,",
                                  "    InquiryCity,",
                                  "    InquiryState,",
                                  "    InquiryPostalCode,",
                                  "    InquiryCountry,",
                                  "    InquiryEmail,",
                                  "    InquiryPhoneHome,",
                                  "    InquiryPhoneWork,",
                                  "    InquiryPhoneCell,",
                                  "    RelationToCustomer,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy,",
                                  "    VisitorSource,",
                                  "    VisitorSourceFull,",
                                  "    VisitorCampaign,",
                                  "    VisitorCampaignFull,",
                                  "    VisitorCampaignName,",
                                  "    VisitorCampaignAdGroup,",
                                  "    VisitorCampaignAd,",
                                  "    VisitorCampaignKeyword,",
                                  "    VisitorCampaignMatchType,",
                                  "    VisitorCampaignDevice,",
                                  "    VisitorCampaignGclid,",
                                  "    GoogleCampaignFlg,",
                                  "    VisitorMedium,",
                                  "    VisitorFormURL,",
                                  "    VisitorFormLocation,",
                                  "    VisitorFormType,",
                                  "    VisitorCampaignTerm,",
                                  "    VisitorCampaignContent,",
                                  "    IsSelfAssessment,",
                                  "    LostCategory,",
                                  "    AllowContactMailFlg,",
                                  "    CareType,",
                                  "    RoomType,",
                                  "    InquiryCreateBy,",
                                  "    IsEleadFlg,",
                                  "    IsEleadFocusFlg,",
                                  "    IsAtriaWebsiteFlg,",
                                  "    InquiryCreateTime",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [factInquiryTourActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factInquiryTourActivity.qvd]",
                                  "(qvd);",
                                  "drop table [factInquiryTourActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "6.8 store JournalActivity",
        "LoadScriptContent":  [
                                  "$tab 6.8 store JournalActivity",
                                  " grab pertinent information now that factInquiryByReferral transformation is completed.",
                                  "Left Join(JournalActivity)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    %InquiryID,",
                                  "    Status,",
                                  "    %OrganizationID,",
                                  "    ContactID,",
                                  "    \"Inquirer Dashboard\",",
                                  "    DateOfInquiry,",
                                  "    ActiveCRMStatus,",
                                  "    StatusCategory,",
                                  "    InquiryName,",
                                  "    InquiryAddress,",
                                  "    InquiryAddress2,",
                                  "    InquiryCity,",
                                  "    InquiryState,",
                                  "    InquiryPostalCode,",
                                  "    InquiryCountry,",
                                  "    InquiryEmail,",
                                  "    InquiryPhoneHome,",
                                  "    InquiryPhoneWork,",
                                  "    InquiryPhoneCell,",
                                  "    RelationToCustomer,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy,",
                                  "    VisitorSource,",
                                  "    VisitorSourceFull,",
                                  "    VisitorCampaign,",
                                  "    VisitorCampaignFull,",
                                  "    VisitorCampaignName,",
                                  "    VisitorCampaignAdGroup,",
                                  "    VisitorCampaignAd,",
                                  "    VisitorCampaignKeyword,",
                                  "    VisitorCampaignMatchType,",
                                  "    VisitorCampaignDevice,",
                                  "    VisitorCampaignGclid,",
                                  "    GoogleCampaignFlg,",
                                  "    VisitorMedium,",
                                  "    VisitorFormURL,",
                                  "    VisitorFormLocation,",
                                  "    VisitorFormType,",
                                  "    VisitorCampaignTerm,",
                                  "    VisitorCampaignContent,",
                                  "    IsSelfAssessment,",
                                  "    LostCategory,",
                                  "    LostInfluence,",
                                  "    AllowContactPhoneFlg,",
                                  "    AllowContactMailFlg,",
                                  "    AllowContactEmailFlg,",
                                  "    CareType,",
                                  "    RoomType,",
                                  "    MoveInDate,",
                                  "    InquiryCreateBy,",
                                  "    IsEleadFlg,",
                                  "    IsEleadFocusFlg,",
                                  "    IsAtriaWebsiteFlg,",
                                  "    InquiryCreateTime,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    IsEleadCorporationFlg,",
                                  "    eLeadID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "/Needed Journal Note above to get the Journal Length Flg (are we still using this field?), but don\u0027t want to load into our final Journal Transform QVD because of space",
                                  "drop Field JournalLengthFlg From  JournalActivity;",
                                  "Store [JournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_JournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [JournalActivity];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Active Status",
        "LoadScriptContent":  [
                                  "$tab Active Status",
                                  "ActiveStatus:",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "LOAD ResidentStatus as ActiveStatusList;",
                                  "SQL SELECT luResidentStatus.ResidentStatusID,",
                                  "    ResidentStatus,",
                                  "    luResidentStatus.ActiveFlg",
                                  "FROM BusinessData.ARM.luResidentStatus",
                                  "Inner Join (Select ResidentStatusID FROM BusinessData.Core.lnkResidentStatusToCategory where ActiveFlg=1 and ResidentStatusCategoryID=3) lnkResidentStatusToCategory",
                                  "on lnkResidentStatusToCategory.ResidentStatusID = luResidentStatus.ResidentStatusID",
                                  "Where luResidentStatus.ActiveFlg=1",
                                  ";",
                                  "",
                                  "store [ActiveStatus] into [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ActiveStatus.qvd](qvd);",
                                  "// drop table ActiveStatus;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Care Concierge",
        "LoadScriptContent":  [
                                  "$tab Care Concierge",
                                  "Schedules:",
                                  "",
                                  "LOAD",
                                  "    FactType,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    CommunityID,",
                                  "    CommunityName,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    BillingID,",
                                  "    \"Resident\" as Resident,",
                                  "    ResidentStatus,",
                                  "    CareType,",
                                  "    DepartureDT,",
                                  "    ExpectedReturnDT,",
                                  "    ActualReturnDT,",
                                  "    AssessmentDT,",
                                  "    ModelTitle,",
                                  "    Description,",
                                  "    TaskTitle,",
                                  "    \"Comment\" as Comment,",
                                  "    ADLTime,",
                                  "    DailyFrequency,",
                                  "    ResourceRole,",
                                  "    Schedule,",
                                  "    \"Time\" as Time,",
                                  "    MapDay,",
                                  "    MapTime,",
                                  "    MapDaySunday,",
                                  "    MapDayMonday,",
                                  "    MapDayTuesday,",
                                  "    MapDayWednesday,",
                                  "    MapDayThursday,",
                                  "    MapDayFriday,",
                                  "    MapDaySaturday,",
                                  "    Employees",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_ConciergeCareSchedules.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store Schedules into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_ConciergeCareSchedules.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table Schedules;",
                                  "",
                                  "RoomGroups:",
                                  "",
                                  "LOAD",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Title,",
                                  "    RoomGroupDescription,",
                                  "    ProductNumber,",
                                  "    CommRole,",
                                  "    ResourceRoleID",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_RoomGroups.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store RoomGroups into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_RoomGroups.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table RoomGroups;",
                                  "",
                                  "Tasks:",
                                  "",
                                  "LOAD",
                                  "    FactType,",
                                  "    CommunityID,",
                                  "    CommunityName,",
                                  "    BillingID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    \"Resident\" as Resident,",
                                  "    ADLDT_Time,",
                                  "    %DateKey,",
                                  "    Room,",
                                  "    Title,",
                                  "    Description,",
                                  "    CommunityResourceRoleID,",
                                  "    UserName,",
                                  "    EmplID,",
                                  "    CompleteFlg,",
                                  "    ADLTime,",
                                  "    ADLTimeComplete,",
                                  "    ADLStatusID,",
                                  "    ServiceCodeID,",
                                  "    EmplUserName,",
                                  "    ResidentADLID,",
                                  "    DeviceID,",
                                  "    ResidentADLProcessReasonID,",
                                  "    ADLStatus,",
                                  "    ADLType",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_ConciergeCareTasks.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store Tasks into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_ConciergeCareTasks.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table Tasks;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Communities (with Home Care)",
        "LoadScriptContent":  [
                                  "$tab Communities (with Home Care)",
                                  "/Renaming fields and creating CampusNames. This load includes Home Care for use in the iPod app.",
                                  "/\t\tSpecial CampusName for Labor apps because want to see Woodbriar Park/Place separated, but Sales wants to consider them as one business unit.",
                                  "",
                                  "[mstrCommunityHomeCare]:",
                                  "LOAD",
                                  "    CommunityID, ",
                                  "\tCommunityName, ",
                                  "\tCommunityNumber as %CommunityKey,",
                                  "//Keep the Num# in front of community number to change it from text to number    ",
                                  "    Num#(CommunityNumber) as COMMUNITYNUMBERHC,",
                                  "    Num#(CommunityNumber) as COMMUNITYNUMBER,",
                                  "    IF(WildMatch(OperationCluster, \u0027*Campus\u0027) and Not(WildMatch(OperationCluster, \u0027Topeka*\u0027)), OperationCluster, CommunityName) as CampusName,",
                                  "    IF(WildMatch(OperationCluster, \u0027*Campus\u0027) and Not(WildMatch(OperationCluster, \u0027Topeka*\u0027, \u0027Woodbriar*\u0027)), OperationCluster, CommunityName) as CampusNameLabor,",
                                  "//     if(wildmatch(CommunityNumber,10323,10324,10476,10467,10230,10162,10358,10377),OperationCluster, CommunityName) as CampusName,",
                                  "//     if(wildmatch(CommunityNumber,10323,10324,10476,10467,10358,10377),OperationCluster, CommunityName) as CampusNameLabor,",
                                  "//            Community, ",
                                  "\tBrand, ",
                                  "\tIF(CommunityNumber=\u002710163\u0027, \u0027Home Care\u0027, Portfolio) as Portfolio, ",
                                  "//            Portfoliotype,",
                                  "\tTrim(LEFT(Division, Index(Division, \u0027 - \u0027, -1))) as Division,",
                                  "    Division as DivisionFull,",
                                  "    SVP,",
                                  "    Trim(SubField(Region, \u0027-\u0027, 1)) as Region,",
                                  "    Region as RegionFull,",
                                  "\tRVP, ",
                                  "\tIF(Match(Country, \u0027USA\u0027), NULL(), RSM) as RSM, ",
                                  "// \tRSM,",
                                  "\tOperationCluster,",
                                  "\tif(isnull(OperationCluster), CommunityName, OperationCluster) as [Cluster/Community],",
                                  "\tMarketCluster as SalesArea,",
                                  "\tMSA as MarketCluster, ",
                                  "\tTier, ",
                                  "    IF(WildMatch(CommunityNumber, 10660, 10681, 10683, 10688, 10691), \u0027JV Ventas\u0027, Owner) as Owner, ",
                                  "\tAddress as CommunityAddress, ",
                                  "\tCity as CommunityCity, ",
                                  "\tState as CommunityState, ",
                                  "\tPostalCode as CommunityPostalCode, ",
                                  "//            PhoneNumber, ",
                                  "\tCountry as CommunityCountry, ",
                                  "\tLongitude, ",
                                  "\tLatitude,",
                                  "\tGeoMakePoint(Latitude,Longitude) as GeoLocation,",
                                  "//            date(floor(OpenDT)) as CommunityOpenDate, ",
                                  "//            UnitOccupancyCapacity as M_Capacity, ",
                                  "\tIF(UnitOccupancyActual\u003e0, 1, 0) as OccupancyFlg, ",
                                  "//            UnitOccupancyPercentage as M_OccPercent, ",
                                  "\tIF(IsILFlg=1, \u0027IL\u0027, IF(IsALFlg=1, \u0027AL\u0027, IF(IsLGFlg=1, \u0027LG\u0027))) as LowestService,",
                                  "\tElevation,",
                                  "\tDistanceToShore,",
                                  "\tIsILFlg, ",
                                  "\tIsALFlg, ",
                                  "\tIsLGFlg",
                                  "//            ReplicaDT",
                                  "",
                                  "    ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunityHomeCare.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join ([mstrCommunity])",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    ProductTier",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ProductTierMapping.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join ([mstrCommunity])",
                                  "LOAD",
                                  "    Concat(%CommunityKey, \u0027/\u0027) as CampusKey,",
                                  "\tCampusName",
                                  "Resident mstrCommunity",
                                  "Group by CampusName;",
                                  "",
                                  "Left Join ([mstrCommunity])",
                                  "LOAD",
                                  "    Concat(%CommunityKey, \u0027/\u0027) as CampusLaborKey,",
                                  "\tCampusNameLabor",
                                  "Resident mstrCommunity",
                                  "Group by CampusNameLabor;",
                                  "",
                                  "",
                                  "Store [mstrCommunityHomeCare] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunityHomeCare.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Communities",
        "LoadScriptContent":  [
                                  "$tab Communities",
                                  "/Renaming fields and creating CampusNames. Special CampusName for Labor apps because want to see Woodbriar Park/Place separated,",
                                  "/\t\tbut Sales wants to consider them as one business unit.",
                                  "[mstrCommunity]:",
                                  "LOAD",
                                  "    CommunityID, ",
                                  "    CommunityName, ",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//Keep the Num# in front of community number to change it from text to number    ",
                                  "    Num#(CommunityNumber) as COMMUNITYNUMBER,",
                                  "    IF(WildMatch(OperationCluster, \u0027*Campus\u0027) and Not(WildMatch(OperationCluster, \u0027Topeka*\u0027)), OperationCluster, CommunityName) as CampusName,",
                                  "    IF(WildMatch(OperationCluster, \u0027*Campus\u0027) and Not(WildMatch(OperationCluster, \u0027Topeka*\u0027, \u0027Woodbriar*\u0027)), OperationCluster, CommunityName) as CampusNameLabor,",
                                  "//     if(wildmatch(CommunityNumber,10323,10324,10476,10467,10230,10162,10358,10377),OperationCluster, CommunityName) as CampusName,",
                                  "//     if(wildmatch(CommunityNumber,10323,10324,10476,10467,10358,10377),OperationCluster, CommunityName) as CampusNameLabor,",
                                  "//            Community, ",
                                  "    Brand, ",
                                  "    Portfolio, ",
                                  "//            Portfoliotype,",
                                  "\tTrim(LEFT(Division, Index(Division, \u0027 - \u0027, -1))) as Division,",
                                  "    Division as DivisionFull,",
                                  "    SVP,",
                                  "    Trim(SubField(Region, \u0027-\u0027, 1)) as Region,",
                                  "    Region as RegionFull,",
                                  "    RVP, ",
                                  "    IF(Match(Country, \u0027USA\u0027), NULL(), RSM) as RSM, ",
                                  "// \tRSM,",
                                  "    OperationCluster, ",
                                  "    if(isnull(OperationCluster), CommunityName, OperationCluster) as [Cluster/Community],",
                                  "    MarketCluster as SalesArea,",
                                  "    MSA as MarketCluster, ",
                                  "    Tier, ",
                                  "    IF(WildMatch(CommunityNumber, 10660, 10681, 10683, 10688, 10691), \u0027JV Ventas\u0027, Owner) as Owner, ",
                                  "    Address as CommunityAddress, ",
                                  "    City as CommunityCity, ",
                                  "    State as CommunityState, ",
                                  "    PostalCode as CommunityPostalCode, ",
                                  "//            PhoneNumber, ",
                                  "    Country as CommunityCountry, ",
                                  "    Longitude, ",
                                  "    Latitude,",
                                  "\tGeoMakePoint(Latitude,Longitude) as GeoLocation,",
                                  "//            date(floor(OpenDT)) as CommunityOpenDate, ",
                                  "//            UnitOccupancyCapacity as M_Capacity, ",
                                  "    IF(UnitOccupancyActual\u003e0, 1, 0) as OccupancyFlg, ",
                                  "//            UnitOccupancyPercentage as M_OccPercent, ",
                                  "    IF(IsILFlg=1, \u0027IL\u0027, IF(IsALFlg=1, \u0027AL\u0027, IF(IsLGFlg=1, \u0027LG\u0027))) as LowestService,",
                                  "    Elevation,",
                                  "    DistanceToShore,",
                                  "    IsILFlg, ",
                                  "    IsALFlg, ",
                                  "    IsLGFlg",
                                  "//            ReplicaDT",
                                  "",
                                  "    ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join ([mstrCommunity])",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    ProductTier",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_ProductTierMapping.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join ([mstrCommunity])",
                                  "LOAD",
                                  "    Concat(%CommunityKey, \u0027/\u0027) as CampusKey,",
                                  "\tCampusName",
                                  "Resident mstrCommunity",
                                  "Group by CampusName;",
                                  "",
                                  "Left Join ([mstrCommunity])",
                                  "LOAD",
                                  "    Concat(%CommunityKey, \u0027/\u0027) as CampusLaborKey,",
                                  "\tCampusNameLabor",
                                  "Resident mstrCommunity",
                                  "Group by CampusNameLabor;",
                                  "",
                                  "Store [mstrCommunity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Community Review Score with Date",
        "LoadScriptContent":  [
                                  "$tab Community Review Score with Date",
                                  "/Format fields",
                                  "TempScores:",
                                  "LOAD",
                                  "//     factCommunityReviewScoreID,",
                                  "    ReviewID as %ReviewIDKey,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    IndicatorID,",
                                  "    IF(Indicator=\u0027Housekeeping\u0027 OR Indicator=\u0027HouseKeeping\u0027 OR Indicator=\u0027(Old) Housekeeping\u0027 OR Indicator=\u0027(Old) HouseKeeping\u0027, \u0027Housekeeping\u0027, Indicator) as [IndicatorDept],",
                                  "    NUM(IndicatorPercent, \u0027#0\u0027) as IndicatorPercent,",
                                  "    FirstImpressionScore",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReviewScore.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Get Sort Order",
                                  "LEFT Join (TempScores)",
                                  "LOAD * Inline [",
                                  "IndicatorDept, SortOrder_IndicatorDept",
                                  "Critical Factors, 1",
                                  "Maintenance, 2",
                                  "Housekeeping, 3",
                                  "Administrative, 4",
                                  "First Impressions, 5",
                                  "Business Office, 6",
                                  "Resident Services, 7",
                                  "Life Guidance, 8",
                                  "Park, 9",
                                  "Engage Life, 10",
                                  "Culinary Services, 11",
                                  "Sales \u0026 Marketing, 12",
                                  "Sales Room Readiness, 13",
                                  "State Indicators, 14",
                                  "No Count, 15",
                                  "];",
                                  "",
                                  "/Only include scores from Reviews that are closed.",
                                  "INNER JOIN(TempScores)",
                                  "LOAD",
                                  "//     factCommunityReviewID,",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/Review?CommunityReviewID=\u0027\u0026 ReviewID as ReviewDashboard,",
                                  "    ReviewID as %ReviewIDKey,",
                                  "//     CommunityNumber,",
                                  "//     ReviewStatusID,",
                                  "    ReviewStatus,",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    DocumentYear as ReviewYear,",
                                  "    DocumentPeriod as ReviewRound,    ",
                                  "    DocumentYear \u0026 \u0027-\u0027 \u0026 DocumentPeriod as ReviewYearAndRound,",
                                  "    POCID as ReviewPOCID,",
                                  "//  POCStatusID,",
                                  "    POCStatus,",
                                  "    POCURL as ReviewPOCURL,",
                                  "    Num(ScoreAdjusted, \u0027#0\u0027) as [Net Score],",
                                  "    QAwardFlg,",
                                  "    Capitalize(CreateBy) as ReviewCreateBy,",
                                  "    RptExecutiveDirectorNewHireFlg as EDNewHireFlg,",
                                  "    ExecutiveDirectorFlg,",
                                  "    IF(MaxReviewID=ReviewID, \u0027Yes\u0027,\u0027No\u0027) as MostEffectiveFlg",
                                  "//     CreateDT,",
                                  "//     ModifyBy,",
                                  "//     ModifyDT,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReview.qvd]",
                                  "(qvd)",
                                  "Where ReviewStatus=\u0027Close\u0027;",
                                  "",
                                  "/Get User Job Code",
                                  "LEFT JOIN(TempScores)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as ReviewCreateBy,",
                                  "//     EMPLID,",
                                  "//     Department as UserDepartment,",
                                  "    JobCode as UserJobCode",
                                  "//     JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "left join (TempScores)",
                                  "Load",
                                  "SurveyName,",
                                  "[%ReviewIDKey]",
                                  "from [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_QESurveyNames.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [TempScores] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_ScoresWithDates.qvd]",
                                  "(qvd);",
                                  "drop table TempScores;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Community Review",
        "LoadScriptContent":  [
                                  "$tab Community Review",
                                  "//Table to pull in SurveyNames",
                                  "SurveyName:",
                                  "NoConcatenate",
                                  "LOAD",
                                  "SurveyID,",
                                  "SurveyName,",
                                  "CommunityReviewID as %ReviewIDKey;",
                                  "SQL Select distinct",
                                  "tblSurvey.SurveyID,",
                                  "SurveyName,",
                                  "CommunityReviewID",
                                  "From BusinessData.QMS.tblSurvey",
                                  "left join (Select SurveyID, CommunityReviewID from Businessdata.[QE].[tblCommunityReviewResponse] ) tblCom",
                                  "on tblCom.SurveyID = tblSurvey.SurveyID",
                                  "where CommunityReviewID IS NOT NULL;",
                                  "",
                                  "Store SurveyName into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_QESurveyNames.qvd]",
                                  "(qvd);",
                                  "drop table SurveyName;",
                                  "",
                                  "",
                                  "",
                                  "/ Rename fields, create Most Effective Flg",
                                  "[factCommunityReview]:",
                                  "LOAD",
                                  "//  factCommunityReviewID,",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/Review?CommunityReviewID=\u0027\u0026 ReviewID as ReviewDashboard,",
                                  "    ReviewID as [%ReviewIDKey],",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//  ReviewStatusID,",
                                  "    ReviewStatus,",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    DocumentYear as ReviewYear,",
                                  "    DocumentPeriod as ReviewRound,",
                                  "    DocumentYear \u0026 \u0027-\u0027 \u0026 DocumentPeriod as ReviewYearAndRound,",
                                  "    POCID as ReviewPOCID,",
                                  "//  POCStatusID,",
                                  "    POCStatus,",
                                  "    POCURL as ReviewPOCURL,",
                                  "    Num(ScoreAdjusted, \u0027#0\u0027) as [Net Score],",
                                  "    QAwardFlg,",
                                  "    Capitalize(CreateBy) as ReviewCreateBy,",
                                  "//  date(floor(CreateDT)),",
                                  "    ModifyBy as ModifyBy,",
                                  "    date(floor(ModifyDT)) as ModifyDT,",
                                  "    RptExecutiveDirectorNewHireFlg as EDNewHireFlg,",
                                  "    ExecutiveDirectorFlg,",
                                  "    IF(MaxReviewID=ReviewID, \u0027Yes\u0027,\u0027No\u0027) as MostEffectiveFlg //If the Max Review ID for the community, then Most Effective Review",
                                  "//  ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityReview.qvd]",
                                  "(qvd)",
                                  "Where ReviewStatus=\u0027Close\u0027; //Only pull in closed so RVPs/Communities can\u0027t see the Open reviews before they are offically started at the community.",
                                  "",
                                  "LEFT JOIN(factCommunityReview)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as ReviewCreateBy,",
                                  "//     EMPLID,",
                                  "//     Department as UserDepartment,",
                                  "    JobCode as UserJobCode",
                                  "//     JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "left join (factCommunityReview)",
                                  "Load",
                                  "SurveyName,",
                                  "[%ReviewIDKey]",
                                  "from [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_QESurveyNames.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [factCommunityReview] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factCommunityReview.qvd]",
                                  "(qvd);",
                                  "drop table [factCommunityReview];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Community Trip Report Detail with Type",
        "LoadScriptContent":  [
                                  "$tab Community Trip Report Detail with Type",
                                  "/TR Questions and Answers",
                                  "TempType:",
                                  "LOAD",
                                  "//     factCommunityTripReportDetailID,",
                                  "    ReviewID as [%TripReviewIDKey],",
                                  "    ResponseID as TripDetailID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     SectionID,",
                                  "    \"Section\" as TripSection,",
                                  "//     SectionSort,",
                                  "    QuestionID as TripQuestionID,",
                                  "//     QuestionNumber,",
                                  "    Question as TripQuestion,",
                                  "//     QuestionSort,",
                                  "//     AnswerID,",
                                  "    Answer as TripAnswer,",
                                  "    \"Comment\" as TripComment,",
                                  "    QuestionScore,",
                                  "    AnswerScore",
                                  "//    CreateBy as TripDetailCreateBy,",
                                  "//    date(floor(CreateDT)) as [%DateKey]",
                                  "//    ModifyBy as TripDetailModifyBy",
                                  "//     date(floor(ModifyDT)) as TripDetailModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReportDetail.qvd]",
                                  "(qvd);",
                                  "",
                                  "LEFT Join (TempType)",
                                  "LOAD * Inline [",
                                  "TripAnswer, SortOrder_TripAnswer",
                                  "Pass, 1",
                                  "No Pass, 2",
                                  "Yes, 3",
                                  "No, 4",
                                  "Promoter, 5",
                                  "Passive, 6",
                                  "Detractor, 7",
                                  "Vacant Position, 8",
                                  "New, 9",
                                  "N/A, 10",
                                  "];",
                                  "",
                                  "/Grab pertinent information from the Trip Report table.",
                                  "JOIN(TempType)",
                                  "LOAD",
                                  " \t\u0027https://intranet.atriacom.com/Application/QMS/TripReport/CreateTripReport?TripReportResponseID=\u0027\u0026ReviewID as [Edit Trip Report],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/ReadOnlyTripReport?TripReportResponseID=\u0027\u0026ReviewID as [Read Trip Report],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/TripReportDashboard?TripReportResponseID=\u0027\u0026ReviewID as [Trip Report Dashboard URL],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/TripReportProfile?TripReportResponseID=\u0027\u0026ReviewID as [Trip Report Profile URL],",
                                  "//     factCommunityTripReportID,",
                                  "    ReviewID as %TripReviewIDKey,",
                                  "//     TripReportID,",
                                  "    TripReport,",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    YEAR(EffectiveDT) as TripReportYear,",
                                  "//     TripReportStatusID,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "//     Summary as TripSummary,",
                                  "    POCID as TripPOCID,",
                                  "//     POCStatusID,",
                                  "\tPOCStatus,",
                                  "    IF(POCStatus=\u0027Open\u0027 and ( TripReport=\u0027Maintenance (Canada)\u0027 or TripReport=\u0027Maintenance\u0027 or TripReport=\u0027Maintenance 2018\u0027) and EffectiveDT\u003c= (Today()-60), \u00271\u0027,",
                                  "    \tIF(POCStatus=\u0027Open\u0027 and (TripReport\u003c\u003e\u0027Maintenance (Canada)\u0027 and TripReport\u003c\u003e\u0027Maintenance\u0027 and TripReport\u003c\u003e\u0027Maintenance 2018\u0027) and EffectiveDT\u003c= (Today()-30), \u00271\u0027, \u00270\u0027)) as AgingPOCFlg,",
                                  "    POCURL as TripViewPOCURL,",
                                  "    IF(ISNULL(POCID),NULL(),\u0027https://intranet.atriacom.com/Application/QMS/TripReport/PlanOfCorrectionAdministration?PlanOfCorrectionResponseID=\u0027\u0026POCID) as TripPOCURL,",
                                  "    IF(ISNULL(POCID),NULL(),\u0027https://intranet.atriacom.com/Application/QMS/TripReport/PlanOfCorrection?PlanOfCorrectionResponseID=\u0027\u0026POCID) as TripCommPOCURL,",
                                  "    Capitalize(CreateBy) as TripCreateBy",
                                  "// //     date(floor(CreateDT)) as TripCreateDT,",
                                  "//    ModifyBy as ModifyBy,",
                                  "//    date(floor(ModifyDT)) as ModifyDT",
                                  "//     ReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Grab Trip Department from excel file",
                                  "LEFT JOIN (TempType)",
                                  "LOAD",
                                  "    TripReport,",
                                  "    TripDepartment",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Trip Report Departments.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "/Get user information for createby",
                                  "LEFT JOIN(TempType)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "",
                                  "Store [TempType] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactCommunityTripDetailwithType.qvd]",
                                  "(qvd);",
                                  "drop table TempType;",
                                  "",
                                  "/Similar transformation as the Trip Report table.",
                                  "TRQuestions:",
                                  "LOAD ",
                                  "    TripCreateBy,",
                                  "    %TripReviewIDKey,",
                                  "    TripAnswer,",
                                  "    TripDetailID,",
                                  "    %CommunityKey,",
                                  "    TripSection,",
                                  "    TripQuestionID,",
                                  "    TripQuestion,",
                                  "    QuestionScore,",
                                  "    AnswerScore,",
                                  "    TripComment,",
                                  "    SortOrder_TripAnswer,",
                                  "    \"Edit Trip Report\",",
                                  "    \"Read Trip Report\",",
                                  "    \"Trip Report Dashboard URL\",",
                                  "    \"Trip Report Profile URL\",",
                                  "    TripReport,",
                                  "    TripDepartment,",
                                  "    %DateKey,",
                                  "    TripReportYear,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "    TripPOCID,",
                                  "    POCStatus,",
                                  "    AgingPOCFlg,",
                                  "    TripViewPOCURL,",
                                  "    TripPOCURL,",
                                  "    TripCommPOCURL,",
                                  "    UserDepartment,",
                                  "    UserJobCode,",
                                  "    UserJobTitle",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactCommunityTripDetailwithType.qvd]",
                                  "(qvd)",
                                  "Where NOT(WildMatch(TripReport, \u0027Acquisitions\u0027, \u0027DDCM Community Business Care Review\u0027, \u0027Human Resources\u0027, \u0027Community Sales Promoter Update\u0027));",
                                  "",
                                  "Store [TRQuestions] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factCommunityTripDetailwithType.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table TRQuestions;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Community Trip Report POC",
        "LoadScriptContent":  [
                                  "$tab Community Trip Report POC",
                                  "/Start with the PTC data",
                                  "TempPOC:",
                                  "LOAD",
                                  "    factCommunityTripReportPOCID,",
                                  "//     CommunityNumber,",
                                  "//     TripReport,",
                                  "    ReviewID as %TripReviewIDKey,",
                                  "//     ReviewtDT,",
                                  "//     ReviewModifyBy,",
                                  "//     ReviewModifyDT,",
                                  "//     ReviewStatus,",
                                  "    \"Section\" as TripSection,",
                                  "//     SectionNumber,",
                                  "//     QuestionNumber,",
                                  "    Question as TripQuestion,",
                                  "//     InterpretiveGuideline,",
                                  "//     Answer,",
                                  "//     AnswerComment,",
                                  "    POCID as TripPOCID,",
                                  "    POCDT as TripPOCDT,",
                                  "    POCStatus,",
                                  "    TaskGoal,",
                                  "    TaskResult,",
                                  "    TaskDueDT,",
                                  "    TaskStatus,",
                                  "    TaskStatusReason,",
                                  "//     POCModifyBy,",
                                  "    POCModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReportPOC.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Get pertinent information from the TR table.",
                                  "LEFT JOIN(TempPOC)",
                                  "LOAD",
                                  " \t\u0027https://intranet.atriacom.com/Application/QMS/TripReport/CreateTripReport?TripReportResponseID=\u0027\u0026ReviewID as [Edit Trip Report],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/ReadOnlyTripReport?TripReportResponseID=\u0027\u0026ReviewID as [Read Trip Report],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/TripReportDashboard?TripReportResponseID=\u0027\u0026ReviewID as [Trip Report Dashboard URL],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/TripReportProfile?TripReportResponseID=\u0027\u0026ReviewID as [Trip Report Profile URL],",
                                  "//     factCommunityTripReportID,",
                                  "//     ReviewID as %TripReviewIDKey,",
                                  "//     TripReportID,",
                                  "    TripReport,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    YEAR(EffectiveDT) as TripReportYear,",
                                  "//     TripReportStatusID,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "//     Summary as TripSummary,",
                                  "    POCID as TripPOCID,",
                                  "//     POCStatusID,",
                                  "// \tPOCStatus,",
                                  "//     IF(POCStatus=\u0027Open\u0027 and ( TripReport=\u0027Maintenance (Canada)\u0027 or TripReport=\u0027Maintenance\u0027 or TripReport=\u0027Maintenance 2018\u0027) and EffectiveDT\u003c= (Today()-60), \u00271\u0027,",
                                  "//     \tIF(POCStatus=\u0027Open\u0027 and (TripReport\u003c\u003e\u0027Maintenance (Canada)\u0027 and TripReport\u003c\u003e\u0027Maintenance\u0027 and TripReport\u003c\u003e\u0027Maintenance 2018\u0027) and EffectiveDT\u003c= (Today()-30), \u00271\u0027, \u00270\u0027)) as AgingPOCFlg,",
                                  "    POCURL as TripViewPOCURL,",
                                  "    IF(ISNULL(POCID),NULL(),\u0027https://intranet.atriacom.com/Application/QMS/TripReport/PlanOfCorrectionAdministration?PlanOfCorrectionResponseID=\u0027\u0026POCID) as TripPOCURL,",
                                  "    IF(ISNULL(POCID),NULL(),\u0027https://intranet.atriacom.com/Application/QMS/TripReport/PlanOfCorrection?PlanOfCorrectionResponseID=\u0027\u0026POCID) as TripCommPOCURL,",
                                  "    Capitalize(CreateBy) as TripCreateBy",
                                  "// //     date(floor(CreateDT)) as TripCreateDT,",
                                  "//    ModifyBy as ModifyBy,",
                                  "//    date(floor(ModifyDT)) as ModifyDT",
                                  "//     ReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Grab Trip Department from Excel file",
                                  "LEFT JOIN (TempPOC)",
                                  "LOAD",
                                  "    TripReport,",
                                  "    TripDepartment",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Trip Report Departments.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "/Grab User info",
                                  "LEFT JOIN(TempPOC)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "Store [TempPOC] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactCommunityTripReportPOC.qvd]",
                                  "(qvd);",
                                  "drop table TempPOC;",
                                  "",
                                  "/Similar transformation as previous loads.",
                                  "TripPOC:",
                                  "LOAD IF(POCStatus=\u0027Open\u0027 and ( TripReport=\u0027Maintenance (Canada)\u0027 or TripReport=\u0027Maintenance\u0027 or TripReport=\u0027Maintenance 2018\u0027) and %DateKey\u003c= (Today()-60), \u00271\u0027,",
                                  "    \tIF(POCStatus=\u0027Open\u0027 and (TripReport\u003c\u003e\u0027Maintenance (Canada)\u0027 and TripReport\u003c\u003e\u0027Maintenance\u0027 and TripReport\u003c\u003e\u0027Maintenance 2018\u0027) and %DateKey\u003c= (Today()-30), \u00271\u0027, \u00270\u0027)) as AgingPOCFlg,",
                                  "    TripCreateBy as TripCreateBy,",
                                  "    TripPOCID,",
                                  "    factCommunityTripReportPOCID,",
                                  "    %TripReviewIDKey,",
                                  "    TripSection,",
                                  "    TripQuestion,",
                                  "    TripPOCDT,",
                                  "    POCStatus,",
                                  "    TaskGoal,",
                                  "    TaskResult,",
                                  "    TaskDueDT,",
                                  "    TaskStatus,",
                                  "    TaskStatusReason,",
                                  "    POCModifyDT,",
                                  "    \"Edit Trip Report\",",
                                  "    \"Read Trip Report\",",
                                  "    \"Trip Report Dashboard URL\",",
                                  "    \"Trip Report Profile URL\",",
                                  "    TripReport,",
                                  "    TripDepartment,",
                                  "    %CommunityKey,",
                                  "    %DateKey,",
                                  "    TripReportYear,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "    TripViewPOCURL,",
                                  "    TripPOCURL,",
                                  "    TripCommPOCURL,",
                                  "    UserDepartment,",
                                  "    UserJobCode,",
                                  "    UserJobTitle",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactCommunityTripReportPOC.qvd]",
                                  "(qvd)",
                                  "Where NOT(WildMatch(TripReport, \u0027Acquisitions\u0027, \u0027DDCM Community Business Care Review\u0027, \u0027Human Resources\u0027, \u0027Community Sales Promoter Update\u0027));",
                                  "// AND (UserJobCode = \u0027CULSPC\u0027 OR UserJobCode = \u0027DIVFSD\u0027 OR UserJobCode=\u0027FSDIR\u0027 OR UserJobCode=\u0027MGRCO\u0027 OR UserJobCode=\u0027RFSD\u0027 OR UserJobCode=\u0027SRFSD\u0027 OR UserJobCode=\u0027VPFS\u0027",
                                  "// \tOR UserJobCode = \u0027DIVDCM\u0027 OR UserJobCode = \u0027NALD\u0027 OR UserJobCode=\u0027NATTCD\u0027 OR UserJobCode=\u0027NDIRCD\u0027 OR UserJobCode=\u0027NDIRCM\u0027",
                                  "//     OR UserJobCode = \u0027NDLGOP\u0027 OR UserJobCode = \u0027RDLGOP\u0027 OR UserJobCode = \u0027ELSPEC\u0027 OR UserJobCode = \u0027MGRELO\u0027 OR UserJobCode=\u0027RELIND\u0027 OR UserJobCode=\u0027SRELDR\u0027",
                                  "//     OR UserJobCode = \u0027DIVMDR\u0027 OR UserJobCode = \u0027DIVPDR\u0027 OR UserJobCode = \u0027MNTSPL\u0027 OR UserJobCode = \u0027RMAINT\u0027 OR UserJobCode = \u0027SRMTDR\u0027 OR UserJobCode = \u0027REGVP\u0027 OR UserJobCode = \u0027BUSOSP\u0027 OR UserJobCode = \u0027DIRBOS\u0027);",
                                  "",
                                  "Store [TripPOC] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factCommunityTripReportPOC.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table TripPOC;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Community Trip Report",
        "LoadScriptContent":  [
                                  "$tab Community Trip Report",
                                  "/Step 1: Rename fields and set Aging POC flag.",
                                  "[TEMPfactCommunityTripReport]:",
                                  "LOAD",
                                  " \t\u0027https://intranet.atriacom.com/Application/QMS/TripReport/CreateTripReport?TripReportResponseID=\u0027\u0026ReviewID as [Edit Trip Report],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/ReadOnlyTripReport?TripReportResponseID=\u0027\u0026ReviewID as [Read Trip Report],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/TripReportDashboard?TripReportResponseID=\u0027\u0026ReviewID as [Trip Report Dashboard URL],",
                                  "    \u0027https://intranet.atriacom.com/Application/QMS/TripReport/TripReportProfile?TripReportResponseID=\u0027\u0026ReviewID as [Trip Report Profile URL],",
                                  "//     factCommunityTripReportID,",
                                  "    ReviewID as %TripReviewIDKey,",
                                  "//     TripReportID,",
                                  "    TripReport,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    YEAR(EffectiveDT) as TripReportYear,",
                                  "//     TripReportStatusID,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "    Summary as TripSummary,",
                                  "    POCID as TripPOCID,",
                                  "//     POCStatusID,",
                                  "\tPOCStatus,",
                                  "    IF(POCStatus=\u0027Open\u0027 and ( TripReport=\u0027Maintenance (Canada)\u0027 or TripReport=\u0027Maintenance 2018\u0027 or TripReport=\u0027Maintenance\u0027) and EffectiveDT\u003c= (Today()-60), \u00271\u0027,",
                                  "    \tIF(POCStatus=\u0027Open\u0027 and (TripReport\u003c\u003e\u0027Maintenance (Canada)\u0027 and TripReport\u003c\u003e\u0027Maintenance 2018\u0027 and TripReport\u003c\u003e\u0027Maintenance\u0027) and EffectiveDT\u003c= (Today()-30), \u00271\u0027, \u00270\u0027)) as AgingPOCFlg,",
                                  "    POCURL as TripViewPOCURL,",
                                  "    IF(ISNULL(POCID),NULL(),\u0027https://intranet.atriacom.com/Application/QMS/TripReport/PlanOfCorrectionAdministration?PlanOfCorrectionResponseID=\u0027\u0026POCID) as TripPOCURL,",
                                  "    IF(ISNULL(POCID),NULL(),\u0027https://intranet.atriacom.com/Application/QMS/TripReport/PlanOfCorrection?PlanOfCorrectionResponseID=\u0027\u0026POCID) as TripCommPOCURL,",
                                  "    Capitalize(CreateBy) as TripCreateBy,",
                                  "//     date(floor(CreateDT)) as TripCreateDT,",
                                  "   ModifyBy as ModifyBy,",
                                  "   date(floor(ModifyDT)) as ModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: grab Trip Report Department from List",
                                  "LEFT JOIN (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "    TripReport,",
                                  "    TripDepartment",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Trip Report Departments.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "/Step 3: Get Job Code, Title, Dept of user who created the trip report (used to determine if user is no longer in that positions, then give Region as the TripCreateBy.",
                                  "/\t\tRegion indicates that the Trip Report/Open POC does not have anyone working it and needs to be taken care of by the RVP or new regional in that position.",
                                  "LEFT JOIN (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where UserTypeID=1;",
                                  "",
                                  "/Step 4: For each trip department, load in all possible users so we can track who should be creating them but isn\u0027t.",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027Culinary\u0027 as TripReport,",
                                  "    \u0027Culinary\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027CULSPC\u0027, \u0027DIVFSD\u0027, \u0027MGRCO\u0027, \u0027RFSD\u0027, \u0027SRFSD\u0027, \u0027VPFS\u0027, \u0027NDIRCU\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027DDCM Visit Summary\u0027 as TripReport,",
                                  "    \u0027Care\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027DIVDCM\u0027, \u0027NALD\u0027, \u0027NATTCD\u0027, \u0027NDIRCD\u0027, \u0027NDIRCM\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027DDLGO Visit Summary\u0027 as TripReport,",
                                  "    \u0027Life Guidance\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027NDLGOP\u0027, \u0027RDLGOP\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027Engage Life\u0027 as TripReport,",
                                  "    \u0027Engage Life\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027ELSPEC\u0027, \u0027MGRELO\u0027, \u0027RELIND\u0027, \u0027SRELDR\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027Maintenance 2018\u0027 as TripReport,",
                                  "    \u0027Maintenance\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027DIVMDR\u0027, \u0027DIVPDR\u0027, \u0027MNTSPL\u0027, \u0027RMAINT\u0027, \u0027SRMTDR\u0027, \u0027CONSPM\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027RVP\u0027 as TripReport,",
                                  "    \u0027RVP\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027REGVP\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027Life Guidance RVP 2018\u0027 as TripReport,",
                                  "    \u0027Life Guidance RVP\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027REGVP\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "CONCATENATE (TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     \u0027Business Office\u0027 as TripReport,",
                                  "    \u0027Business Office\u0027 as TripDepartment,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle,",
                                  "    1 as HoldFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd)",
                                  "Where WildMatch(JobCode, \u0027BUSOSP\u0027, \u0027DIRBOS\u0027)",
                                  "\tAnd UserTypeID=1;",
                                  "",
                                  "LEFT Join (TEMPfactCommunityTripReport)",
                                  "LOAD * Inline [",
                                  "TripReport, SortOrder_TripReport",
                                  "Culinary, 1",
                                  "Engage Life, 2",
                                  "Maintenance 2018, 3",
                                  "Maintenance (Canada), 4",
                                  "DDLGO Visit Summary, 5",
                                  "DDCM Visit Summary, 6",
                                  "RVP, 7",
                                  "Human Resources, 8",
                                  "Acquisitions, 9",
                                  "Business Office, 10",
                                  "];",
                                  "",
                                  "LEFT Join (TEMPfactCommunityTripReport)",
                                  "LOAD * Inline [",
                                  "TripDepartment, SortOrder_Department",
                                  "Culinary, 1",
                                  "Engage Life, 2",
                                  "Maintenance, 3",
                                  "Life Guidance, 4",
                                  "Care, 5",
                                  "RVP, 6",
                                  "Human Resources, 7",
                                  "Acquisitions, 8",
                                  "Business Office, 9",
                                  "];",
                                  "",
                                  "LEFT JOIN(TEMPfactCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "Store [TEMPfactCommunityTripReport] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "drop table [TEMPfactCommunityTripReport];",
                                  "",
                                  "",
                                  "factCommunityTripReport:",
                                  "LOAD",
                                  "    TripCreateBy,",
                                  "    UserDepartment,",
                                  "    UserJobCode,",
                                  "    UserJobTitle,",
                                  "    TripDepartment,",
                                  "    TripReport,",
                                  "    \"Edit Trip Report\",",
                                  "    \"Read Trip Report\",",
                                  "    \"Trip Report Dashboard URL\",",
                                  "    \"Trip Report Profile URL\",",
                                  "    %TripReviewIDKey,",
                                  "    %CommunityKey,",
                                  "    %DateKey,",
                                  "    TripReportYear,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "    TripSummary,",
                                  "    TripPOCID,",
                                  "    POCStatus,",
                                  "    AgingPOCFlg,",
                                  "    TripViewPOCURL,",
                                  "    TripPOCURL,",
                                  "    TripCommPOCURL,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    SortOrder_TripReport,",
                                  "    SortOrder_Department,",
                                  "    HoldFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_TEMPfactCommunityTripReport.qvd] (qvd)",
                                  "Where NOT(WildMatch(TripReport, \u0027Acquisitions\u0027, \u0027DDCM Community Business Care Review\u0027, \u0027Human Resources\u0027, \u0027Community Sales Promoter Update\u0027));",
                                  "",
                                  "",
                                  "Store [factCommunityTripReport] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "drop table [factCommunityTripReport];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "CommunityToCorporation",
        "LoadScriptContent":  [
                                  "$tab CommunityToCorporation",
                                  "mstrCommunityToCorporation:",
                                  "LOAD",
                                  "//     mstrCommunityToCorporationID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CorporationID as [%OrganizationID]",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCommunityToCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrCommunityToCorporation] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCommunityToCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table mstrCommunityToCorporation;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "DD mstrJobCategory",
        "LoadScriptContent":  [
                                  "$tab DD mstrJobCategory",
                                  "/Department Director table based on Job Category.",
                                  "mstrJobCategoryDDTEMP:",
                                  "LOAD DISTINCT",
                                  "    MinString(JobCategory) as JobCategory,",
                                  "    JobCode,",
                                  "    JobTitle",
                                  "//     isCommunityDepartmentHeadFLG",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrJobCategory.qvd]",
                                  "(qvd)",
                                  "Where isCommunityDepartmentHeadFLG=1 //and JobCategory \u003c\u003e \u0027Senior Engage Life Director\u0027",
                                  "Group By JobCode, JobTitle;",
                                  "",
                                  "/Grab all possible Job Codes/Titles",
                                  "JOIN (mstrJobCategoryDDTEMP)",
                                  "LOAD",
                                  "DISTINCT",
                                  "    JOBCODE as JobCode,",
                                  "    JOBTITLE as JobTitle",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrEmployee.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store mstrJobCategoryDDTEMP into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrJobCategoryDDTEMP.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table mstrJobCategoryDDTEMP;",
                                  "",
                                  "/If not isCommunityDepartmentHeadFLG, i.e., not in the first load above with job category, then call it \"Frontline Staff.\"",
                                  "/\t\tNot strictly accurate to call all of these front line staff, but for the purposes of our labor apps this will work.",
                                  "mstrJobCategoryDD:",
                                  "LOAD IF(ISNULL(JobCategory), \u0027Frontline Staff\u0027, JobCategory) as JobCategory,",
                                  "JobCode,",
                                  "JobTitle",
                                  "From [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrJobCategoryDDTEMP.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store mstrJobCategoryDD into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrJobCategoryDD.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table mstrJobCategoryDD;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Department Directors",
        "LoadScriptContent":  [
                                  "$tab Department Directors",
                                  "JobCategories:",
                                  "LOAD",
                                  "    JobCode as DDJobCodes,",
                                  "    IF(WildMatch(JobCategory, \u0027Executive Director*\u0027),",
                                  "    \tIF(WildMatch(JobTitle, \u0027Assistant*\u0027, \u0027Asst*\u0027),",
                                  "        \t\u0027AED\u0027,",
                                  "            IF(WildMatch(JobTitle, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "            \t\u0027Sr ED\u0027,",
                                  "                \u0027ED\u0027",
                                  "\t\t\t)",
                                  "\t\t),",
                                  "        IF(WildMatch(JobCategory, \u0027Community Sales*\u0027),",
                                  "        \tIF(WildMatch(JobCategory, \u0027*Associate*\u0027),",
                                  "            \t\u0027CSA\u0027,",
                                  "                IF(WildMatch(JobTitle, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "                \t\u0027Sr CSD\u0027,",
                                  "                    IF(WildMatch(JobTitle, \u0027Director of Sales\u0027),",
                                  "                    \t\u0027Director of Sales\u0027,",
                                  "                        \u0027CSD\u0027",
                                  "\t\t\t\t\t)",
                                  "\t\t\t\t)",
                                  "\t\t\t),",
                                  "            IF(WildMatch(JobCategory, \u0027*Engage Life Director*\u0027),",
                                  "            \tIF(WildMatch(JobTitle, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "                \t\u0027Sr ELD\u0027,",
                                  "                    \u0027ELD\u0027",
                                  "\t\t\t\t),",
                                  "                IF(WildMatch(JobCategory, \u0027Community Business Director*\u0027),",
                                  "                \tIF(WildMatch(JobTitle, \u0027Assistant*\u0027, \u0027Asst*\u0027),",
                                  "                    \t\u0027Asst CBD\u0027,",
                                  "                        IF(WildMatch(JobTitle, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "                        \t\u0027Sr CBD\u0027,",
                                  "                            IF(WildMatch(JobTitle, \u0027Business Office Manager*\u0027),",
                                  "                            \t\u0027Business Office Manager\u0027,",
                                  "                                \u0027CBD\u0027",
                                  "\t\t\t\t\t\t\t)",
                                  "\t\t\t\t\t\t)",
                                  "\t\t\t\t\t),",
                                  "                    IF(WildMatch(JobCategory, \u0027Director of Culinary Services*\u0027, \u0027Senior Director of Culinary Services*\u0027) OR WildMatch(JobCode, \u0027ASTFSD\u0027),",
                                  "                    \tIF(WildMatch(JobCategory, \u0027Assistant*\u0027, \u0027Asst*\u0027),",
                                  "                        \t\u0027Asst DCS\u0027,",
                                  "                            IF(WildMatch(JobCategory, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "                            \t\u0027Sr DCS\u0027,",
                                  "                                \u0027DCS\u0027",
                                  "\t\t\t\t\t\t\t)",
                                  "\t\t\t\t\t\t),",
                                  "                        IF(WildMatch(JobCategory, \u0027Life Guidance Director*\u0027),",
                                  "                        \tIF(WildMatch(JobTitle, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "                            \t\u0027Sr LGD\u0027,",
                                  "                                \u0027LGD\u0027",
                                  "\t\t\t\t\t\t\t),",
                                  "                            IF(WildMatch(JobCategory, \u0027Maintenance Director*\u0027, \u0027Senior Maintenance Director*\u0027),",
                                  "                            \tIF(WildMatch(JobTitle, \u0027Senior*\u0027, \u0027Sr*\u0027),",
                                  "                                \t\u0027Sr MD\u0027,",
                                  "                                    \u0027MD\u0027",
                                  "\t\t\t\t\t\t\t\t),",
                                  "                                IF(WildMatch(JobCode, \u0027RESVDI\u0027),",
                                  "                                \t\u0027RSD\u0027,",
                                  "                                    IF(WildMatch(JobCode, \u0027ASTRSD\u0027),",
                                  "                                    \t\u0027Asst RSD\u0027",
                                  "\t\t\t\t\t\t\t\t\t)",
                                  "\t\t\t\t\t\t\t\t)",
                                  "\t\t\t\t\t\t\t)",
                                  "\t\t\t\t\t\t)",
                                  "\t\t\t\t\t)",
                                  "\t\t\t\t)",
                                  "\t\t\t)",
                                  "\t\t)",
                                  "\t) as JobAcronym",
                                  "                                ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_mstrJobCategory.qvd]",
                                  "(qvd)",
                                  "Where \tWildMatch(JobCategory, \u0027Executive Director*\u0027, \u0027Community Sales*\u0027, \u0027*Engage Life Director*\u0027, \u0027Community Business Director*\u0027, \u0027Director of Culinary Services*\u0027, ",
                                  "\t\t\u0027Senior Director of Culinary Services*\u0027, \u0027Life Guidance Director*\u0027, \u0027Maintenance Director*\u0027, \u0027Senior Maintenance Director*\u0027) ",
                                  "OR \t\tWildMatch(JobCode, \u0027ASTFSD\u0027);",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "/Table of all department directors based on mstrUser table.",
                                  "mstrDepartmentDirectors:",
                                  "LOAD ",
                                  "// mstrUserID, ",
                                  "// \tUserID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "// \tEmployee, ",
                                  "// \tUserTypeID, ",
                                  "// \tUserType, ",
                                  "// \tUserName as ED",
                                  "    IF(Not(IsNull(NickName)),NickName,RIGHT(Employee, Len(Employee)-FindOneOf(Employee,\u0027,\u0027))) \u0026 \u0027 \u0027 \u0026 LEFT(Employee, FindOneOf(Employee, \u0027,\u0027)-1) as EmployeeName,",
                                  "    Email,",
                                  "\tEMPLID, ",
                                  "// \tDepartment, ",
                                  "\tJobCode, ",
                                  "\tJobTitle",
                                  "// \tReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrUser.qvd](qvd)",
                                  "where \tExists(DDJobCodes, JobCode)",
                                  "       And UserTypeID=1 ;",
                                  "",
                                  "/ Joining to get Job Acronym",
                                  "Left Join (mstrDepartmentDirectors)",
                                  "LOAD DDJobCodes as JobCode,",
                                  "\tJobAcronym",
                                  "Resident JobCategories;",
                                  "Drop Table JobCategories;",
                                  "",
                                  "/ Joining to get Hire Date, Last Hire Date, Position Entry Date, and calculate Tenure.",
                                  "Left Join (mstrDepartmentDirectors)",
                                  "LOAD",
                                  "",
                                  "    EMPLID,",
                                  "//     COMPANY,",
                                  "//     %CommunityKey,",
                                  "//     FIRST_NAME,",
                                  "//     MIDDLE_NAME,",
                                  "//     LAST_NAME,",
                                  "//     ADDRESS1,",
                                  "//     ADDRESS2,",
                                  "//     CITY,",
                                  "//     STATE,",
                                  "//     POSTAL,",
                                  "//     EMAIL,",
                                  "//     PHONE,",
                                  "//     DeptID,",
                                  "//     DEPTNAME,",
                                  "//     DEPTNAME_ABBRV,",
                                  "//     JOBCODE,",
                                  "//     JOBTITLE,",
                                  "//     JOBTITLE_ABBRV,",
                                  "//     REG_TEMP,",
                                  "//     REG_TEMP_NAME,",
                                  "//     FULL_PART_TIME,",
                                  "//     FULL_PART_TIME_NAME,",
                                  "//     FLSA_STATUS,",
                                  "//     FLSA_STATUS_NAME,",
                                  "//     EMPL_TYPE,",
                                  "//     EMPL_TYPE_NAME,",
                                  "//     EMPL_CLASS,",
                                  "//     EMPL_CLASS_NAME,",
                                  "//     EMPL_STATUS,",
                                  "//     EMPL_STATUS_NAME,",
                                  "//     HR_STATUS,",
                                  "//     HR_STATUS_NAME,",
                                  "//     EFFDT,",
                                  "    HIRE_DT,",
                                  "    LAST_HIRE_DT,",
                                  "//     TERMINATION_DT,",
                                  "//     ACTION_DT,",
                                  "//     LASTUPDDTTM,",
                                  "//     JOB_ENTRY_DT,",
                                  "//     DEPT_ENTRY_DT,",
                                  "    POSITION_ENTRY_DT,",
                                  "    NUM((Today()-Date(Floor(HIRE_DT)))/365.25, \u0027##0.0\u0027) as [TENURE]",
                                  "//     REPORTS_TO,",
                                  "//     POSITION_NBR,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrEmployee.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrDepartmentDirectors] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrDepartmentDirectors.qvd]",
                                  "(qvd);",
                                  "drop Table mstrDepartmentDirectors;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "eLeadCreationJournalActivity",
        "LoadScriptContent":  [
                                  "$tab eLeadCreationJournalActivity",
                                  "/Table of all eLead Creation Activity (created by APFM, ASL.com, etc.) Used for Speed to Lead calculations",
                                  "eLeadCreationJournalActivity:",
                                  "LOAD",
                                  "    InquiryID as %InquiryID,",
                                  "//     factInquiryJournalActivityID,",
                                  "//     InquiryJournalID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//     TypeID,",
                                  "//     \"Type\",",
                                  "//     TypeCategoryID,",
                                  "//     TypeCategory,",
                                  "//     TypeCategorySEQ,",
                                  "    date(floor(EffectiveDT)) as eLeadCreationDT,",
                                  "    EffectiveTM as eLeadCreationTM,",
                                  "    Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027) as eLeadCreationTMHour,",
                                  "    Timestamp#(date(floor(EffectiveDT)) \u0026 \u0027 \u0027 \u0026 Time#(time(LEFT(EffectiveTM, 8), \u0027hh:mm:ss tt\u0027), \u0027hh:mm:ss TT\u0027) ,\u0027MM/DD/YYYY hh:mm:ss TT\u0027) as eLeadCreationDTandTM,",
                                  "    IF( hour(Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027)) \u003e=8",
                                  "    \tand hour(Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027))\u003c20, 1,0) as SpeedToLeadFlg,",
                                  "    IF( hour(Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027))\u003e=20, 1,0) as LateNightLeadFlg",
                                  "//     EffectiveDTChangeCount,",
                                  "//     Owner,",
                                  "//     CloseBy,",
                                  "//     CloseDT,",
                                  "//     CloseFlg,",
                                  "//     Objective,",
                                  "//     Note,",
                                  "//     ApplicationURL,",
                                  "//     ReplicaDT,",
                                  "//     \"MIN(InquiryJournalID)\"",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_FactELeadCreationJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [eLeadCreationJournalActivity] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factELeadCreationJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table eLeadCreationJournalActivity;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "factResidentMoveOut",
        "LoadScriptContent":  [
                                  "$tab factResidentMoveOut",
                                  "/Step 1: Move Out table, rename fields, create short name for Move Out Reason.",
                                  "[factResidentMoveOutTEMP]:",
                                  "LOAD",
                                  "//            factResidentMoveOutID, ",
                                  "               CommunityNumber as %CommunityKey, ",
                                  "               CustomerID as %CustomerIDKey, ",
                                  "//                LocationType, ",
                                  "               Location,",
                                  "               date(floor(MoveOutDT)) as %DateKey,",
                                  "//                IF(MoveOutReason like \u0027Acuity*\u0027, \u0027Acuity\u0027,",
                                  "//                IF(MoveOutReason like \u0027Financial*\u0027,\u0027Financial\u0027,MoveOutReason)) as MoveOutCategory,",
                                  "               IF(MoveOutReason like \u0027Acuity - Agressive Behavior\u0027, \u0027Aggressive Behavior\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Behavior\u0027, \u0027Behavior\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity ??? Dementia\u0027, \u0027Dementia\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Exit Seeking\u0027, \u0027Exit Seeking\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Injection/Accucheck\u0027, \u0027Injection/Accucheck\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Mobility\u0027, \u0027Mobility\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity ??? Other\u0027, \u0027Acuity - Other\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - Sexual Behavior\u0027, \u0027Sexual Behavior\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity - Sliding Scale\u0027, \u0027Sliding Scale\u0027,",
                                  "               IF(MoveOutReason like \u0027Acuity - State Prohibited\u0027, \u0027State Prohibited\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity - Suicidal\u0027, \u0027Suicidal\u0027, ",
                                  "               IF(MoveOutReason like \u0027Acuity - Wounds\u0027, \u0027Wounds\u0027,",
                                  "               IF(MoveOutReason like \u0027Financial - Out of Funds\u0027, \u0027Out of Funds\u0027,",
                                  "               IF(MoveOutReason like \u0027Financial ??? Rates\u0027, \u0027Rates\u0027, MoveOutReason)))))))))))))) as MoveOutReasonShort,",
                                  "               MoveOutReason as MoveOutReason,",
                                  "               Note as MoveOutNote",
                                  "// //            ReplicaDT   ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentMoveOut.qvd]",
                                  "(qvd)",
                                  "where MoveOutDT \u003e= \u0027$(vmindate2)\u0027;",
                                  "",
                                  "/Step 2: Grab Resident Name.",
                                  "Left Join (factResidentMoveOutTEMP)",
                                  "LOAD distinct",
                                  "//            KeyID, ",
                                  "               CustomerID as [%CustomerIDKey], ",
                                  "//            CommunityID, ",
                                  "// \t\t\t   CommunityNumber as %CommunityKey,",
                                  "//            InquiryID, ",
                                  "//            BillingID, ",
                                  "               Resident as Customer ",
                                  "//            Address1, ",
                                  "//            Address2, ",
                                  "//            City, ",
                                  "//            State, ",
                                  "//            PostalCode, ",
                                  "//            Country, ",
                                  "//            Longitude, ",
                                  "//            Latitude, ",
                                  "//            StatusID, ",
                                  "//            Gender, ",
                                  "//            BirthDT, ",
                                  "//            CreateDT, ",
                                  "//            ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 3: Grab move in date (based on customer and move out date).",
                                  "LEFT JOIN (factResidentMoveOutTEMP)",
                                  "LOAD",
                                  "//     ResidentLeaseSegmentID,",
                                  "//     LeaseID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(LeaseSegmentStartDT)) as MoveInDate,",
                                  "    Date(Floor(LeaseSegmentEndDT)) as %DateKey",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factLeaseSegment.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 4: grab move out category as determined by Sanela.",
                                  "LEFT JOIN (factResidentMoveOutTEMP)",
                                  "LOAD",
                                  "    MoveOutReason,",
                                  "    MoveOutCategory",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library\\Move Out Reasons.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet2);",
                                  "",
                                  "/Step 5: Calculate Day of Residence",
                                  "factResidentMoveOut:",
                                  "LOAD %DateKey-MoveInDate as DayofResidence,",
                                  "*",
                                  "Resident factResidentMoveOutTEMP;",
                                  "",
                                  "Store [factResidentMoveOut] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factResidentMoveOut.qvd]",
                                  "(qvd);",
                                  "drop table [factResidentMoveOut];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Generator List",
        "LoadScriptContent":  [
                                  "$tab Generator List",
                                  "/Step 1: Rename fields in Maintenance team\u0027s file",
                                  "GeneratorList:",
                                  "LOAD",
                                  "//     F1,",
                                  "    \"Location #\" as [%CommunityKey],",
                                  "//     Community,",
                                  "    Area,",
                                  "//     Address,",
                                  "//     City,",
                                  "//     County,",
                                  "//     State,",
                                  "//     Zip,",
                                  "//     Region,",
                                  "//     Country,",
                                  "//     Division,",
                                  "    \"# Buildings\" as Buildings,",
                                  "    \"# Stories\" as Stories,",
                                  "    Units,",
                                  "//     \"Sq Ft\",",
                                  "//     Acres,",
                                  "//     \"Year Built\",",
                                  "    Construction,",
                                  "    \"Elevated Community Peril",
                                  "(Hurricane - H, Flood/Storm",
                                  "Surge - S, ",
                                  "Wildfire - W, ",
                                  "Earthquake- Q, ",
                                  "Tornado - T, ",
                                  "Fire - F.)\" as ElevatedCommunityPeril,",
                                  "//     \"Miles from Shore\",",
                                  "//     \"Elevation (feet)\",",
                                  "//     \"Generator Model\",",
                                  "    \"Generator Size (KW)\" as GeneratorSize,",
                                  "    \"Generator Age (Years)\" as GeneratorAge,",
                                  "    \"Generator Year\" as GeneratorYear,",
                                  "//     \"Generator Fuel Type (D = Diesel, NG = Natural Gas)\",",
                                  "    \"Whole Community on generator\" as GeneratorCommunityStatus,",
                                  "//     \"Assorted Hall Lights\",",
                                  "//     \"Assorted Common Area Lights\",",
                                  "//     \"Assorted Receptacles\",",
                                  "//     \"Security System\",",
                                  "//     \"Electronic locks/doors/gates\",",
                                  "//     \"Public Address System\",",
                                  "//     \"Fire Alarm Panel\",",
                                  "//     \"Fire Pump\",",
                                  "//     \"Septic Pump\",",
                                  "//     \"Dry Sprinkler Compressor\",",
                                  "//     Elevator,",
                                  "//     Phones,",
                                  "//     \"E-Call (Lifeline)\",",
                                  "//     \"Boilers/Water Heaters\",",
                                  "//     \"Circulation Pumps\",",
                                  "//     \"Apartment HVAC\",",
                                  "//     \"Apartment Receptacles\",",
                                  "//     \"Common Area HVAC\",",
                                  "//     \"Kitchen HVAC\",",
                                  "//     \"Cooking Equipment*\",",
                                  "//     \"W/I Cooker and Freezer\",",
                                  "//     \"Hood Exhaust - Kitchen\",",
                                  "//     \"Make-up Air\",",
                                  "//     \"Exhaust Fan Other\",",
                                  "//     Dishwasher,",
                                  "    \"Tank Size\" as TankSize,",
                                  "    \"Consumption per Hour at 75% Load\" as Consumption,",
                                  "    \"# Hours 1 Tank of Fuel Runs\" as HoursPerTank",
                                  "//     Notes,",
                                  "//     \"Number of Elevators on Generator\",",
                                  "//     \"Received New  Survey\"",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_GeneratorList.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [GeneratorList] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_GeneratorList.qvd]",
                                  "(qvd);",
                                  "drop Table GeneratorList;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Incident",
        "LoadScriptContent":  [
                                  "$tab Incident",
                                  "/Step 1: rename and format",
                                  "mstrIncident:",
                                  "LOAD",
                                  "// \tmstrIncidentID,",
                                  "    ",
                                  "\tIncidentVersion,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    IncidentID,",
                                  "    Date(Floor(IncidentDT)) as %DateKey,",
                                  "    Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027) as IncidentTM,",
                                  "    Time(MakeTime(hour(time(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027),\u0027hh:mm TT\u0027))), \u0027h:mm TT\u0027) as IncidentHour,",
                                  "    ",
                                  "    Timestamp(IncidentDT \u0026 \u0027 \u0027 \u0026IncidentTM,\u0027MM/DD/YYYY hh:mm TT\u0027) as IncidentDTandTime,",
                                  "    ",
                                  "\tIF(hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027)) \u003e= 7 ",
                                  "    and hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003c= 14, \u0027First\u0027,",
                                  "    IF(hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003e=15 ",
                                  "    and hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003c=22, \u0027Second\u0027,",
                                  "    IF(hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003c=6 ",
                                  "    or hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027)) \u003e=23, \u0027Third\u0027))) as IncidentShift,",
                                  "    ",
                                  "    IncidentReportDateTime,",
                                  "    IncidentCategory,",
                                  "    IncidentType,",
                                  "    ",
                                  "    IF(IncidentType = \u0027Critical\u0027, \u00271\u0027,",
                                  "    IF(IncidentType = \u0027Non Critical\u0027, \u00272\u0027,",
                                  "    IF(IncidentType = \u0027Non Critical - State Reportable\u0027, \u00273\u0027))) as IncidentPriority,",
                                  "    ",
                                  "    HasAttachmentFlg,",
                                  "    IncidentStatus,",
                                  "    FallFlg,",
                                  "    MedicationErrorFlg,",
                                  "    AbuseFlg,",
                                  "    PropertyFlg,",
                                  "    ExposureFlg,",
                                  "    BehaviorFlg,",
                                  "    ElopementFlg,",
                                  "    AccidentFlg,",
                                  "    InjuryFlg,",
                                  "    IllnessFlg,",
                                  "\tOutcomeDeathFlg,",
                                  "    OutcomeHospitalFlg,",
                                  "    OutcomeUnconsciousFlg,",
                                  "    OutcomeAdverseDrugFlg,",
                                  "    OutcomeNoMedicalTreatmentFlg,",
                                  "    OutcomeMedicalTreatmentFlg,",
                                  "    OutcomeFirstAidFlg,",
                                  "    OutcomeAdverseFamilyReactionFlg,",
                                  "    OutcomeResidentRefusedTreatmentFlg,",
                                  "    OutcomeOtherFlg,",
                                  "    OutcomeEMSFlg,",
                                  "    OutcomeEMTTransportFlg,",
                                  "\tOutcomeFamilyTransportFlg,",
                                  "    OutcomePendingFlg,",
                                  "    UntypedFlg",
                                  " ",
                                  "   FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrIncident.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: grab resident name and BillingID",
                                  "LEFT JOIN (mstrIncident)",
                                  "LOAD",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    \"Resident\" as ResidentName,",
                                  "    BillingID as ResidentID",
                                  "    ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [mstrIncident] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrIncident.qvd]",
                                  "(qvd);",
                                  "drop Table mstrIncident;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "IsEleadFlg",
        "LoadScriptContent":  [
                                  "$tab IsEleadFlg",
                                  "/List of all eLead Organizations (so we can exclude in our journal activity and create accurate eLead Flags.",
                                  "eLeadOrganization:",
                                  "LOAD eLeadOrganizationList as eLeadOrganizationList Inline [",
                                  "eLeadOrganizationList",
                                  "",
                                  "APlaceForMom",
                                  "Atriaseniorliving.Com",
                                  "Real page chat (asl.Com)",
                                  "Atria Senior Living",
                                  "Caring.Com",
                                  "My Senior Care",
                                  "OurParents",
                                  "Seniorliving.Net",
                                  "Sitestaff (asl.Com)",
                                  "GladwellSeniorLiving.com",
                                  "HolidayTouch.com",
                                  "];",
                                  "",
                                  "Concatenate(eLeadOrganization)",
                                  "LOAD distinct CreateBy as eLeadOrganizationList;",
                                  "SQL SELECT distinct CreateBy FROM BusinessData.CRM.tblInquiryJournal where ELeadFlg = 1",
                                  "UNION",
                                  "SELECT distinct CreateBy FROM BusinessData.CRM.tblInquiry where ELeadFlg = 1;",
                                  "",
                                  "Concatenate(eLeadOrganization)",
                                  "LOAD Capitalize(eLeadOrganizationList) as eLeadOrganizationList",
                                  "Resident eLeadOrganization;",
                                  "",
                                  "/List of all \"focus\" eLead organizations for use in our Atria Website Analytics app.",
                                  "eLeadFocusOrganization:",
                                  "LOAD eLeadFocusOrganizationList as eLeadFocusOrganizationList Inline [",
                                  "eLeadFocusOrganizationList",
                                  "",
                                  "APlaceForMom",
                                  "Atriaseniorliving.Com",
                                  "Real page chat (asl.Com)",
                                  "Atria Senior Living",
                                  "Caring.Com",
                                  "Sitestaff (asl.Com)",
                                  "GladwellSeniorLiving.com",
                                  "HolidayTouch.com",
                                  "];",
                                  "",
                                  "Concatenate(eLeadFocusOrganization)",
                                  "LOAD Capitalize(eLeadFocusOrganizationList) as eLeadFocusOrganizationList",
                                  "Resident eLeadFocusOrganization;",
                                  "",
                                  "/List of all Atria Website organizations so we can have an accurate AtriaWebsite Flag.",
                                  "AtriaWebsite:",
                                  "LOAD AtriaWebsiteList as AtriaWebsiteList Inline [",
                                  "AtriaWebsiteList",
                                  "",
                                  "Atriaseniorliving.Com",
                                  "Real page chat (asl.Com)",
                                  "Atria Senior Living",
                                  "Sitestaff (asl.Com)",
                                  "GladwellSeniorLiving.com",
                                  "HolidayTouch.com",
                                  "];",
                                  "",
                                  "Concatenate(AtriaWebsite)",
                                  "LOAD Capitalize(AtriaWebsiteList) as AtriaWebsiteList",
                                  "Resident AtriaWebsite;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Main",
        "LoadScriptContent":  [
                                  "$tab Main",
                                  "SET ThousandSep=\u0027,\u0027;",
                                  "SET DecimalSep=\u0027.\u0027;",
                                  "SET MoneyThousandSep=\u0027,\u0027;",
                                  "SET MoneyDecimalSep=\u0027.\u0027;",
                                  "SET MoneyFormat=\u0027$#,##0.00;($#,##0.00)\u0027;",
                                  "SET TimeFormat=\u0027hh:mm:ss.mmm\u0027;",
                                  "SET DateFormat=\u0027M/D/YYYY\u0027;",
                                  "SET TimestampFormat=\u0027M/D/YYYY h:mm:ss[.fff] TT\u0027;",
                                  "SET FirstWeekDay=0;",
                                  "SET BrokenWeeks=1;",
                                  "SET ReferenceDay=0;",
                                  "SET FirstMonthOfYear=1;",
                                  "SET CollationLocale=\u0027en-US\u0027;",
                                  "SET CreateSearchIndexOnReload=0;",
                                  "SET MonthNames=\u0027Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec\u0027;",
                                  "SET LongMonthNames=\u0027January;February;March;April;May;June;July;August;September;October;November;December\u0027;",
                                  "SET DayNames=\u0027Mon;Tue;Wed;Thu;Fri;Sat;Sun\u0027;",
                                  "SET LongDayNames=\u0027Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday\u0027;",
                                  "Let vToday=Today();",
                                  "let vmindate=date(Yearstart(Today(),-2));",
                                  "let vmindate2=date(Yearstart(Today(),-3));",
                                  "let vminfiscalyear=Year(Today());",
                                  "",
                                  "let vComplianceMax_2020 = 1.02;",
                                  "let vComplianceMin_2020 = .98;",
                                  "let vComplianceMax_220401 = 1.05;",
                                  "let vComplianceMin_220401 = .98;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "mstrB2B",
        "LoadScriptContent":  [
                                  "$tab mstrB2B",
                                  "rename fields",
                                  "mstrCorporation:",
                                  "LOAD",
                                  "//     mstrCorporationID,",
                                  "    CorporationID as %OrganizationID,",
                                  "    Corporation as Organization,",
                                  "    Status as OrganizationStatus,",
                                  "    CorporationType as B2BType,",
                                  "    CategoryType as B2BCategoryType,",
                                  "    Category as B2BCategory,",
                                  "    IsEleadFlg as IsEleadCorporationFlg,",
                                  "\tAddress1 as B2BAddress1, ",
                                  "// \tAddress2, ",
                                  "// \tCity, ",
                                  "\tState as CommunityState, ",
                                  "// \tPostalCode, ",
                                  "// \tCountry, ",
                                  "   Latitude,",
                                  "   Longitude,",
                                  "// GeoMakePoint(Latitude,Longitude) as [B2B Location],",
                                  "\tCompetitorID,",
                                  "//     PhoneWork as B2BPhoneWork,",
                                  "//     PhoneCell as B2BPhoneCell,",
                                  "//     PhoneFax as B2BPhoneFax,",
                                  "Priority,",
                                  "OutreachFrequency,",
                                  "    NICID",
                                  "//     MSA,",
                                  "//     InboundCount as B2BInboundCount,",
                                  "//     LastInboundDT as B2BLastInboundDT,",
                                  "//     OutboundCount as B2BOutboundCount,",
                                  "//     LastOutboundDT as B2BLastOutboundDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [mstrCorporation] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "drop table [mstrCorporation];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "mstrB2BContact",
        "LoadScriptContent":  [
                                  "$tab mstrB2BContact",
                                  "/rename fields. only active contacts.",
                                  "mstrContact:",
                                  "LOAD",
                                  "//     mstrContactID,",
                                  "    ContactID,",
                                  "    CorporationID as [%OrganizationID],",
                                  "    Contact,",
                                  "    Title,",
                                  "    Suffix,",
                                  "//     Status,",
                                  "    Address1 as ContactAddress1,",
                                  "    Address2 as ContactAddress2,",
                                  "    City as ContactCity,",
                                  "    State as ContactState,",
                                  "    PostalCode as ContactPostalCode,",
                                  "//     Country,",
                                  "//     Latitude,",
                                  "//     Longitude,",
                                  "//     GooglePlaceID,",
                                  "    PhoneWork as ContactPhoneWork,",
                                  "    PhoneCell as ContactPhoneCell,",
                                  "    PhoneHome as ContactPhoneHome,",
                                  "    Priority as ContactPriority,",
                                  "//     InboundCount,",
                                  "//     LastInboundDT,",
                                  "//     OutboundCount,",
                                  "//     LastOutboundDT,",
                                  "    lower(Email) as ContactEmail,",
                                  "    ApplicationURL",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrContact.qvd]",
                                  "(qvd)",
                                  "where Status=\u0027Active\u0027;",
                                  "",
                                  "Store [mstrContact] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "drop table [mstrContact];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "No. of Residents and Units",
        "LoadScriptContent":  [
                                  "$tab No. of Residents and Units",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "/Step 1: All residents every day",
                                  "ResidentTable:",
                                  "LOAD",
                                  "//     ResidentRoomID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     ProductInventoryID,",
                                  "    date(floor(EffectiveDt)) as %DateKey,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     RoomNumber,",
                                  "//     PayorID,",
                                  "//     Payor,",
                                  "//     \"Rate\",",
                                  "//     EventType,",
                                  "    IsPhysicalPresentFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentRoom.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: Aggregate by day by community",
                                  "NoResidents:",
                                  "Load",
                                  "%DateKey,",
                                  "%CommunityKey,",
                                  "Count ([%CustomerIDKey]) as NoCustomers",
                                  "Resident ResidentTable ",
                                  "Group By [%CommunityKey],[%DateKey];",
                                  "",
                                  "/Step 2.1 join count of residents excluding STL",
                                  "Left Join (NoResidents)",
                                  "Load",
                                  "%DateKey,",
                                  "%CommunityKey,",
                                  "Count ([%CustomerIDKey]) as NoCustomersPresent",
                                  "Resident ResidentTable ",
                                  "Where IsPhysicalPresentFlg=1",
                                  "Group By [%CommunityKey],[%DateKey];",
                                  "",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [NoResidents] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_NoResidents.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NoResidents];",
                                  "drop table ResidentTable;",
                                  "",
                                  "",
                                  "",
                                  "/Step 1: All rooms every day",
                                  "UnitsTable:",
                                  "LOAD distinct",
                                  "//     ResidentRoomID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     ProductInventoryID,",
                                  "    date(floor(EffectiveDt)) as %DateKey,",
                                  "//     CustomerID as [%CustomerIDKey]",
                                  "    RoomNumber",
                                  "//     PayorID,",
                                  "//     Payor,",
                                  "//     \"Rate\",",
                                  "//     EventType,",
                                  "//     IsPhysicalPresentFlg,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factResidentRoom.qvd]",
                                  "(qvd);",
                                  "",
                                  "/Step 2: Aggregate by day by community",
                                  "NoUnits:",
                                  "Load",
                                  "%DateKey,",
                                  "%CommunityKey,",
                                  "Count (RoomNumber) as OccupiedUnits",
                                  "Resident UnitsTable ",
                                  "Group By [%CommunityKey],[%DateKey];",
                                  "",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [NoUnits] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_OccupiedUnits.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NoUnits];",
                                  "drop table UnitsTable;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "OneStream",
        "LoadScriptContent":  [
                                  "$tab OneStream",
                                  "/Essentially pivoting the data. OneStream gives us one line for the account, scenario, etc. for each year, with the M1, M2, M3 as columns. We are pivoting...",
                                  "/\t...so that each month in the year has its own line. Also, subtracting month1 from month2, month2 from month3, etc. to get the actual value for that month specifically.",
                                  "OneStream:",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),1,1),0))) as %DateKey,",
                                  "    M1Value as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),2,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM2Value,(M2Value-M1Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),3,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM3Value,(M3Value-M2Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),4,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM4Value,(M4Value-M3Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),5,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM5Value,(M5Value-M4Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),6,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM6Value,(M6Value-M5Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),7,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM7Value,(M7Value-M6Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),8,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM8Value,(M8Value-M7Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),9,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM9Value,(M9Value-M8Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),10,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM10Value,(M10Value-M9Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),11,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027),",
                                  "    \tM11Value,(M11Value-M10Value)) as Amount,",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Concatenate(OneStream)",
                                  "LOAD",
                                  "    %CommunityCode,",
                                  "    %CommunityKey,",
                                  "    CommunityDescription,",
                                  "    Scenario,",
                                  "    ScenarioDescription,",
                                  "    CurrencyIDMember,",
                                  "    Account,",
                                  "    AccountDescription,",
                                  "    Department,",
                                  "    DepartmentDescription,",
                                  "    UD2,",
                                  "    UD2Description,",
                                  "    Date(Floor(MonthEnd(MakeDate(Num#(\"Year\"),12,1),0))) as %DateKey,",
                                  "    If(Num#(Account)\u003c400000 or Left(Account,4)=\u0027AR_P\u0027 or Match(Account, \u0027BAL_CALC\u0027, \u0027BMISCORE\u0027, \u0027CURRENTRE\u0027, \u0027EMPHDCT\u0027, \u0027PSELF\u0027, \u0027TOTRES_EOM\u0027, \u0027UNITS_EOM\u0027),",
                                  "    \tM12Value, IF(Match(Account, \u0027CUSTSAT\u0027, \u0027EMPLOYSAT\u0027, \u0027QASCORE\u0027), 0, (M12Value-M11Value))) as Amount, //QE and CSS/ESS are loaded only twice per year for March and September. December is an average of the two scores from the year.",
                                  "    If(Match([%CommunityKey],\u002728681\u0027,\u002710174\u0027,\u002710184\u0027,\u002710121\u0027),\u00271\u0027,\u00270\u0027) as [AlternativeRevenueEntity]",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_OneStreamExtract.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [OneStream] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_OneStream.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop Table [OneStream];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "PSFIN Culinary Spend",
        "LoadScriptContent":  [
                                  "$tab PSFIN Culinary Spend",
                                  "[temp_PeopleSoftData]:",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Total Food Expense (excl Mktg \u0026 EL)\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT,",
                                  "\u0027600105\u0027, \u0027600110\u0027, \u0027600115\u0027, \u0027600125\u0027, \u0027600130\u0027,",
                                  "\u0027600140\u0027, \u0027600141\u0027, \u0027600142\u0027, \u0027600143\u0027, \u0027600144\u0027, ",
                                  "\u0027600145\u0027, \u0027600146\u0027, \u0027600147\u0027, \u0027600148\u0027, \u0027600149\u0027, ",
                                  "\u0027600150\u0027)",
                                  ";",
                                  "",
                                  "Concatenate(temp_PeopleSoftData)",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Total Food Expense (excl Mktg \u0026 EL)\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT, \u0027600100\u0027) and DEPTID \u003c\u003e \u0027104\u0027",
                                  ";",
                                  "",
                                  "Concatenate(temp_PeopleSoftData)",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Total Food Expense (excl Mktg \u0026 EL)\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT, \u0027600120\u0027) and DEPTID \u003c\u003e \u0027104\u0027 and DEPTID \u003c\u003e \u0027103\u0027",
                                  ";",
                                  "",
                                  "Concatenate(temp_PeopleSoftData)",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Total Other Kitchen Expense\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT,",
                                  "\u0027610100\u0027, \u0027610110\u0027, \u0027610120\u0027, \u0027610130\u0027, \u0027610140\u0027,",
                                  "\u0027610160\u0027, \u0027610170\u0027, \u0027610180\u0027, \u0027610184\u0027, \u0027610190\u0027, ",
                                  "\u0027621150\u0027, \u0027621900\u0027, \u0027621901\u0027, \u0027621903\u0027, \u0027622900\u0027,",
                                  "\u0027760105\u0027)",
                                  ";",
                                  "",
                                  "Concatenate(temp_PeopleSoftData)",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Total Other Kitchen Expense\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT, \u0027611100\u0027, \u0027611115\u0027, \u0027760100\u0027, \u0027760104\u0027, \u0027631100\u0027) and DEPTID = \u0027108\u0027",
                                  ";",
                                  "",
                                  "Concatenate(temp_PeopleSoftData)",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Total Wages\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT,",
                                  "\u0027500110\u0027, \u0027500100\u0027, \u0027513888\u0027, \u0027513900\u0027, \u0027500120\u0027,",
                                  "\u0027500130\u0027, \u0027500140\u0027, \u0027500141\u0027, \u0027500150\u0027, \u0027511120\u0027,",
                                  "\u0027510100\u0027, \u0027510110\u0027, \u0027512100\u0027, \u0027513100\u0027, \u0027513904\u0027,",
                                  "\u0027513903\u0027, \u0027513120\u0027, \u0027511100\u0027, \u0027512120\u0027, \u0027513140\u0027,",
                                  "\u0027512110\u0027, \u0027513110\u0027, \u0027513130\u0027, \u0027511110\u0027, \u0027512130\u0027,",
                                  "\u0027513901\u0027, \u0027513902\u0027, \u0027513150\u0027)",
                                  "And DEPTID = \u0027108\u0027",
                                  ";",
                                  "",
                                  "",
                                  "Concatenate(temp_PeopleSoftData)",
                                  "Load",
                                  "\tDrillBackJournalDetailID as PSDetailsID,",
                                  "    BUSINESS_UNIT as %CommunityKey,",
                                  "    JOURNAL_ID as JournalID,",
                                  "    Date(Floor(JOURNAL_DATE)) as %DateKey,",
                                  "    LINE_DESCR as Description,",
                                  "    DESCR as DescriptionDetails,",
                                  "    ACCOUNT as Account,",
                                  "    DEPTID as Department,",
                                  "    MONETARY_AMOUNT as PSAmount,",
                                  "    VENDOR_NAME as VendorName,",
                                  "    \u0027Revenue\u0027 as AccountRollup",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_PSFINCulinarySpend.qvd]",
                                  "(qvd)",
                                  "Where Match(ACCOUNT, \u0027460230\u0027, \u0027462100\u0027, \u0027462105\u0027, \u0027462110\u0027, \u0027462120\u0027, \u0027462130\u0027, \u0027462140\u0027)",
                                  ";",
                                  "",
                                  "Store [temp_PeopleSoftData] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_PSFINCulinarySpend.qvd](qvd);",
                                  "drop table [temp_PeopleSoftData];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "RAM",
        "LoadScriptContent":  [
                                  "$tab RAM",
                                  "/Step 1: Pivoting to get one line per community with all of the positions listed below.",
                                  "RAM:",
                                  "LOAD [%CommunityKey]",
                                  "Resident mstrCommunityHomeCare;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as QED, Concat(distinct UserName, \u0027, \u0027) as QEDUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u00272\u0027 and Role=\u0027QED\u0027",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as DDCM, Concat(distinct UserName, \u0027, \u0027) as DDCMUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u00271\u0027 and Role=\u0027Regional Care Director\u0027",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as BOS, Concat(distinct UserName, \u0027, \u0027) as BOSUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u002718\u0027 and Role=\u0027BOS\u0027",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as DDLGO, Concat(distinct UserName, \u0027, \u0027) as DDLGOUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u002717\u0027 and Role=\u0027Regional Life Guidance Director\u0027",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as DMD, Concat(distinct UserName, \u0027, \u0027) as DMDUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u00275\u0027 and WildMatch(Role, \u0027Regional Maintenance Director\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as DELID, Concat(distinct UserName, \u0027, \u0027) as DELIDUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u00274\u0027 and WildMatch(Role, \u0027EL Specialist\u0027, \u0027DELD\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as DDCS, Concat(distinct UserName, \u0027, \u0027) as DDCSUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID = \u00273\u0027 and WildMatch(Role, \u0027Regional Culinary Director\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as HRD, Concat(distinct UserName, \u0027, \u0027) as HRDUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where Role=\u0027HRD\u0027",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as RecruiterDeptHead, Concat(distinct UserName, \u0027, \u0027) as RecruiterDeptHeadUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002713\u0027 and ChannelID=\u002746\u0027 and Role=\u0027Recruiter\u0027",
                                  "Group By CommunityNumber;",
                                  "",
                                  "// LEFT JOIN (RAM)",
                                  "// LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as RecruiterFrontline, Concat(distinct UserName, \u0027, \u0027) as RecruiterFrontlineUserName",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "// (qvd)",
                                  "// Where Role=\u0027Recruiter\u0027 and NetworkID=\u002713\u0027 and ChannelID=\u002749\u0027",
                                  "// Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as BOA, Concat(distinct UserName, \u0027, \u0027) as BOAUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002728\u0027 and ChannelID=\u002736\u0027 and WildMatch(Role,\u0027BOA\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as OpsCounsel, Concat(distinct UserName, \u0027, \u0027) as OpsCounselUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002730\u0027 and ChannelID=\u002740\u0027 and WildMatch(Role,\u0027Ops Counsel\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as OpsParalegal, Concat(distinct UserName, \u0027, \u0027) as OpsParalegalUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002730\u0027 and ChannelID=\u002741\u0027 and WildMatch(Role,\u0027Ops Paralegal\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "// LEFT JOIN (RAM)",
                                  "// LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as MktgSpecialist, Concat(distinct UserName, \u0027, \u0027) as MktgSpecialistUserName",
                                  "// FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "// (qvd)",
                                  "// Where WildMatch(Role,\u0027Mktg Specialist\u0027)",
                                  "// Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as VPSales, Concat(distinct UserName, \u0027, \u0027) as VPSalesUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002732\u0027 and WildMatch(ChannelID,\u002745\u0027, \u002768\u0027, \u002769\u0027) and WildMatch(Role,\u0027VP, Sales\u0027) ",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as SalesSpecialist, Concat(distinct UserName, \u0027, \u0027) as SalesSpecialistUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002732\u0027 and WildMatch(ChannelID,\u002772\u0027) and WildMatch(Role,\u0027Sales Specialist\u0027) ",
                                  "Group By CommunityNumber;",
                                  "",
                                  "LEFT JOIN (RAM)",
                                  "LOAD CommunityNumber as [%CommunityKey], Concat(distinct Employee, \u0027, \u0027) as DSD, Concat(distinct UserName, \u0027, \u0027) as DSDUserName",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_RAM.qvd]",
                                  "(qvd)",
                                  "Where NetworkID=\u002732\u0027 and WildMatch(ChannelID,\u002745\u0027, \u002768\u0027, \u002769\u0027) and WildMatch(Role,\u0027DSD\u0027)",
                                  "Group By CommunityNumber;",
                                  "",
                                  "",
                                  "Store [RAM] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_RAM.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop Table [RAM];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Resident Discovery",
        "LoadScriptContent":  [
                                  "$tab Resident Discovery",
                                  "discovery_generic: ",
                                  "Generic LOAD\t%CustomerIDKey,\t",
                                  "\t\t\t\t%CommunityKey,",
                                  "\t\t\t\tQuestion, ",
                                  "                Concat(EmptyIsNull(Answer), \u0027, \u0027) as Answer ",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract/QVD_Extract_ResidentDiscovery.qvd] (qvd) GROUP BY %CustomerIDKey, %CommunityKey, Question;",
                                  "",
                                  "fact_table: LOAD %CustomerIDKey FROM [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd] (qvd);",
                                  "",
                                  "FOR i = NoOfTables()-1 to 0 STEP -1;",
                                  "\tLET vTable=TableName($(i));",
                                  "    IF WildMatch(\u0027$(vTable)\u0027,\u0027discovery_generic*\u0027) THEN",
                                  "    LEFT JOIN (fact_table) LOAD * RESIDENT [$(vTable)];",
                                  "\tDROP TABLE [$(vTable)];",
                                  "    ENDIF ",
                                  "NEXT i",
                                  "store fact_table into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_ResidentDiscovery.qvd] (qvd);"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Responsible Party",
        "LoadScriptContent":  [
                                  "$tab Responsible Party",
                                  "mstrResponsibleParty:",
                                  "LOAD",
                                  "//     KeyID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    ResidentContactID,",
                                  "    ResponsibleParty,",
                                  "    Address1,",
                                  "    Address2,",
                                  "    City,",
                                  "    State,",
                                  "    PostalCode,",
                                  "    Country,",
                                  "    PhoneHome,",
                                  "    PhoneWork,",
                                  "    PhoneCell,",
                                  "    lower(Email) as Email,",
                                  "//     Longitude,",
                                  "//     Latitude,",
                                  "//     Gender,",
                                  "    RelationToCustomer",
                                  "//     CreateDT,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrResponsibleParty.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrResponsibleParty] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrResponsibleParty.qvd]",
                                  "(qvd);",
                                  "drop Table [mstrResponsibleParty];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Score Card",
        "LoadScriptContent":  [
                                  "$tab Score Card",
                                  "/Calculations to correct for outlier conversions (see explanations below)",
                                  "factScoreCard:",
                                  "LOAD",
                                  "//     factScoreCardID,",
                                  "//     EffectiveDT,",
                                  "//     EffectiveDTPreviousPeriodEnd,",
                                  "//     EffectivePreviousMonthEnd,",
                                  "//     EffectiveDTMonthName,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//     CommunityName,",
                                  "//     Community,",
                                  "//     Company,",
                                  "//     division,",
                                  "//     SVP,",
                                  "//     region,",
                                  "//     RVP,",
                                  "    UnitCapacity,",
                                  "    UnitVacancyCurrentPeriod,",
                                  "//     UnitActualCurrentPeriod,",
                                  "    UnitPercentageActualCapacityCurrentPeriod,",
                                  "//     UnitActualPreviousPeriod,",
                                  "    UnitPercentageActualCapacityPreviousPeriod,",
                                  "//     UnitActualPreviousMonth,",
                                  "//     UnitPercentageActualCapacityPreviousMonth,",
                                  "//     UnitActual365High,",
                                  "//     UnitPercentageActualCapacity365High,",
                                  "    InquiryTargetCurrentMonth,",
                                  "/ IF Inquiry to Tour \u003c 40%, then take InquiryTourTargetCurrentMonthNEW (calculated below) and divide by 40%",
                                  "/\telse if Inquiry to Tour \u003e 60%, then take InquiryTourTargetCurrentMonthNEW (calculated below) and divide by 60%",
                                  "/\t\telse take InquiryTourTargetCurrentMonthNEW (calculated below) and divide by Inquiry to Tour Conversion calculated in the Score Card --Attempting to correct for outliers",
                                  "    if(InquiryToTourConversionPercentageCurrentMonth\u003c40",
                                  "    \t\t,(if(inquiryTourToMoveInConversionPercentageCurrentMonth\u003c20,UnitMoveinTargetCurrentMonth/.20, ",
                                  "    \t\t\tif(inquiryTourToMoveInConversionPercentageCurrentMonth\u003e50, UnitMoveinTargetCurrentMonth/.50, InquiryTourTargetCurrentMonth)))/.40, ",
                                  "     if(InquiryToTourConversionPercentageCurrentMonth\u003e60",
                                  "    \t\t,(if(inquiryTourToMoveInConversionPercentageCurrentMonth\u003c20,UnitMoveinTargetCurrentMonth/.20, ",
                                  "    \t\t\tif(inquiryTourToMoveInConversionPercentageCurrentMonth\u003e50, UnitMoveinTargetCurrentMonth/.50, InquiryTourTargetCurrentMonth)))/.60,  ",
                                  "             (if(inquiryTourToMoveInConversionPercentageCurrentMonth\u003c20,UnitMoveinTargetCurrentMonth/.20, ",
                                  "    \t\t\tif(inquiryTourToMoveInConversionPercentageCurrentMonth\u003e50, UnitMoveinTargetCurrentMonth/.50, InquiryTourTargetCurrentMonth)))",
                                  "                /(InquiryToTourConversionPercentageCurrentMonth/100))) as InquiryTargetCurrentMonthNew,",
                                  "//     InquiryActualCurrentMonth,",
                                  "//     InquiryActualPortfolioRank,",
                                  "    InquiryForecastCurrentMonth,",
                                  "    InquiryTourTargetCurrentMonth,",
                                  "/ IF Tour to Move In \u003c 20%, then divide Move In Target by 20%",
                                  "/\telse if Tour to Move In \u003e 50%, then divide Move In Target by 50%",
                                  "/\t\telse use the InquiryTourTarget calculated in the Score Card --Attempting to correct for outliers",
                                  "    if(inquiryTourToMoveInConversionPercentageCurrentMonth\u003c20,UnitMoveinTargetCurrentMonth/.20, ",
                                  "    \tif(inquiryTourToMoveInConversionPercentageCurrentMonth\u003e50, UnitMoveinTargetCurrentMonth/.50, InquiryTourTargetCurrentMonth)) as InquiryTourTargetCurrentMonthNew,",
                                  "//     InquiryTourActualCurrentMonth,",
                                  "//     InquiryTourActualPortfolioRank,",
                                  "    InquiryTourForecastCurrentMonth,",
                                  "    InquiryToTourConversionPercentageCurrentMonth,",
                                  "    inquiryTourToMoveInConversionPercentageCurrentMonth,",
                                  "    UnitMoveinTargetCurrentMonth,",
                                  "//     UnitMoveinActualCurrentMonth,",
                                  "    UnitMoveinForecastCurrentMonth,",
                                  "    UnitMoveOutTargetCurrentMonth,",
                                  "//     UnitMoveOutActualCurrentMonth,",
                                  "    UnitMoveOutForecastCurrentMonth,",
                                  "//     UnitActualForecastNextMonth00,",
                                  "//     UnitActualForecastNextMonth01,",
                                  "//     UnitActualForecastNextMonth02,",
                                  "//     UnitActualForecastNextMonth00MonthName,",
                                  "//     UnitActualForecastNextMonth01MonthName,",
                                  "//     UnitActualForecastNextMonth02MonthName,",
                                  "//     ResidentActualShortTermLeaveCurrentPeriod,",
                                  "    InquiryTourPastDueCurrentMonth,",
                                  "//     UnitMoveOutScheduledCurrentMonth,",
                                  "//     UnitReservationActualCurrentMonth,",
                                  "//     UnitReservationPastDueCurrentMonth,",
                                  "//     InquiryWithoutActivityCurrentMonth,",
                                  "//      InquiryByMonthHistoricalAverage,",
                                  "     InquiryTourByMonthHistoricalAverage,",
                                  "    UnitMoveInByMonthHistoricalAverage,",
                                  "    UnitMoveOutByMonthHistoricalAverage",
                                  "//     ProfessionalReferralAgencyCount,",
                                  "//     ProfessionalReferralB2BCount,",
                                  "//     InquiryForecastCurrentMonthTemperature,",
                                  "//     InquiryTourForecastCurrentMonthTemperature,",
                                  "//     UnitMoveinForecastCurrentMonthTemperature,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factScoreCard.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [factScoreCard] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factScoreCard.qvd]",
                                  "(qvd);",
                                  "drop Table factScoreCard;"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Section Access Load",
        "LoadScriptContent":  [
                                  "$tab Section Access Load",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "UserNameAccessList:",
                                  "LOAD UserNameAccessList as UserNameAccessList Inline [",
                                  "UserNameAccessList",
                                  "",
                                  "Vincent.Turner",
                                  "Jeanette.Garcia",
                                  "Karen.Sheean",
                                  "];",
                                  "",
                                  "Omit:",
                                  "Load",
                                  "UserName as CorporateUsers",
                                  ";sql select distinct UserName FROM AtriaDW.Master.mstrUser",
                                  "Where",
                                  "JobCode In (Select JobCode from AtriaDW.Master.mstrJobCategory where PropertyTypeID in (2, 3, 4))",
                                  "and CommunityNumber in (Select CommunityNumber from BusinessData.ARM.tblCommunity where PropertyTypeID in (2, 3, 4))",
                                  "and UserTypeID = 1",
                                  ";",
                                  "",
                                  "",
                                  "Security:",
                                  "//Loading all users with ATRIA User Directory",
                                  "Load \u0027USER\u0027 as ACCESS,",
                                  "\tUserID, ",
                                  "    UserName, ",
                                  "    \u0027ATRIA\\\u0027 \u0026 Upper(UserName) as USERID, ",
                                  "    DeptID, ",
                                  "    JobCode,",
                                  "    SVPFlg,",
                                  "    IF(WildMatch(JobCode, \u0027BIPMGR\u0027, \u0027BUSYAN\u0027) AND DeptID = 213, 1, 0) as BITeamFlg,",
                                  "    If(Exists(CorporateUsers,UserName),1,0) as CorporateOmitFlg",
                                  "Where Not(Exists(UserNameAccessList, UserName));",
                                  "SELECT",
                                  "   mstrUser.UserID,",
                                  "   mstrUser.UserName,",
                                  "   mstrUser.CommunityNumber,",
                                  "   mstrUser.Email,",
                                  "   mstrEmployee.DeptID, //used in Help Desk Tickets app and Sales Key Indicator Leaderboard app",
                                  "   mstrUser.JobCode, //used in Sales Key Indicator Leaderboard app",
                                  "   mstrSVPJobCategory.SVPFlg //used in SalesKey Indicator Leaderboard app",
                                  "FROM AtriaDW.Master.mstrUser",
                                  "Left Join \tAtriaDW.HumanResource.mstrEmployee",
                                  "ON \t\t\tmstrEmployee.EMPLID = mstrUser.EMPLID",
                                  "Left Join\t(Select Distinct JobCode, 1 as SVPFlg FROM AtriaDW.Master.mstrJobCategory where JobCategoryID = 23) mstrSVPJobCategory",
                                  "ON\t\t\tmstrSVPJobCategory.JobCode = mstrUser.JobCode",
                                  ";",
                                  "",
                                  "Concatenate(Security)",
                                  "//Loading all users again with HRCHOME User Directory",
                                  "LOAD distinct ACCESS,",
                                  "\tUserID,",
                                  "    \u0027HRCHOME\\\u0027 \u0026 Upper(UserName) as USERID,",
                                  "    DeptID,",
                                  "    JobCode,",
                                  "    SVPFlg,",
                                  "    BITeamFlg,",
                                  "    If(Exists(CorporateUsers,UserName),1,0) as CorporateOmitFlg",
                                  "Resident Security",
                                  "Where Not(Exists(UserNameAccessList, UserName));",
                                  "",
                                  "",
                                  "",
                                  "Drop Field UserName from Security;",
                                  "drop table Omit;",
                                  "",
                                  "Concatenate(Security)",
                                  "//Loading with old logic for individuals where the same username exists for two different people in Atria and Holiday to prevent access issues.",
                                  "Load \u0027USER\u0027 as ACCESS,",
                                  "\tUserID,",
                                  "    IF(WildMatch(CommunityNumber, 10705, 10143, 10144) or WildMatch(Email, \u0027*Holiday*\u0027), \u0027HRCHOME\\\u0027, \u0027ATRIA\\\u0027) \u0026 Upper(UserName) as USERID, ",
                                  "    DeptID,",
                                  "    JobCode,",
                                  "    SVPFlg,",
                                  "    IF(WildMatch(JobCode, \u0027BIPMGR\u0027, \u0027BUSYAN\u0027) AND DeptID = 213, 1, 0) as BITeamFlg,",
                                  "    0 as CorporateOmitFlg",
                                  "Where Exists(UserNameAccessList, UserName);",
                                  "SELECT",
                                  "   mstrUser.UserID,",
                                  "   mstrUser.UserName,",
                                  "   mstrUser.CommunityNumber,",
                                  "   mstrUser.Email,",
                                  "   mstrEmployee.DeptID, //used in Help Desk Tickets app and Sales Key Indicator Leaderboard app",
                                  "   mstrUser.JobCode, //used in Sales Key Indicator Leaderboard app",
                                  "   mstrSVPJobCategory.SVPFlg //used in SalesKey Indicator Leaderboard app",
                                  "FROM AtriaDW.Master.mstrUser",
                                  "Left Join \tAtriaDW.HumanResource.mstrEmployee",
                                  "ON \t\t\tmstrEmployee.EMPLID = mstrUser.EMPLID",
                                  "Left Join\t(Select Distinct JobCode, 1 as SVPFlg FROM AtriaDW.Master.mstrJobCategory where JobCategoryID = 23) mstrSVPJobCategory",
                                  "ON\t\t\tmstrSVPJobCategory.JobCode = mstrUser.JobCode",
                                  ";",
                                  "",
                                  "",
                                  "",
                                  "//These are all the communities the users have access to see",
                                  "Left Join(Security)",
                                  "Load UserID,Num#(CommunityNumber) as COMMUNITYNUMBER;",
                                  "SELECT",
                                  "\tUserID, ",
                                  "\tCommunityNumber ",
                                  "FROM AtriaDW.Master.mstrUserToCommunity;",
                                  "",
                                  "//Add users who only have Glennis AD to section access.",
                                  "Glennis:",
                                  "Load \u0027USER\u0027 as ACCESS,",
                                  "// \tUserID,",
                                  "    \u0027GLENNIS\\\u0027 \u0026 Upper(UserName) as USERID, ",
                                  "    \u0027213\u0027 as DeptID,",
                                  "    NULL() as JobCode,",
                                  "    0 as SVPFlg,",
                                  "    0 as BITeamFlg",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/.xls Library/Glennis AD Users.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "Join(Glennis)",
                                  "LOAD distinct COMMUNITYNUMBER",
                                  "Resident Security;",
                                  "",
                                  "Concatenate(Security)",
                                  "LOAD *",
                                  "Resident Glennis;",
                                  "Drop Table Glennis;",
                                  "",
                                  "",
                                  "",
                                  "LIB CONNECT TO \u0027AtriaDW\u0027;",
                                  "",
                                  "//We are adding any admin users for Qlik\u0027s loading purposes",
                                  "Concatenate(Security)",
                                  "Load * Inline [",
                                  "ACCESS,USERID,COMMUNITYNUMBER",
                                  "ADMIN,INTERNAL\\SA_SCHEDULER,*",
                                  "];",
                                  "",
                                  "",
                                  "// Drop Field UserID from Security;",
                                  "",
                                  "store Security into [lib://DataShare (atria_sanela.graziose)/QVD Transform/QVD_Transform_SectionAccess.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Short Term Leave",
        "LoadScriptContent":  [
                                  "$tab Short Term Leave",
                                  "/Step 1: Only NULL ReturnDT, include outbound location",
                                  "mstrSTL:",
                                  "LOAD",
                                  "//    factShortTermLeaveID,",
                                  "    ShortTermLeaveID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "//    DepartureDT,",
                                  "//    ReturnDT,",
                                  "//    Note,",
                                  "    OutboundLocation",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrSTL.qvd]",
                                  "(qvd)",
                                  "where isNull(ReturnDT);",
                                  "",
                                  "/Step 2: Grab StatusID.... should we really grab Status?",
                                  "Left Join (mstrSTL)",
                                  "LOAD",
                                  "//  KeyID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "//  CommunityID,",
                                  "//    CommunityNumber as %CommunityKey",
                                  "//  InquiryID,",
                                  "//  BillingID,",
                                  "//    \"Resident\"",
                                  "//  Address1,",
                                  "//  Address2,",
                                  "//  City,",
                                  "//  State,",
                                  "//  PostalCode,",
                                  "//  Country,",
                                  "//  Longitude,",
                                  "//  Latitude,",
                                  "  StatusID",
                                  "//  Gender,",
                                  "//  date(floor(BirthDT))as DOB,",
                                  "//  Age(today(),BirthDT)as Age",
                                  "//  CreateDT,",
                                  "//  ReplicaDT",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrSTL] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_mstrSTL.qvd]",
                                  "(qvd);",
                                  "drop Table [mstrSTL];"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "tab_order.txt",
        "LoadScriptContent":  [
                                  "Main%tab_file_order_divider%Section Access Load%tab_file_order_divider%Communities%tab_file_order_divider%Communities (with Home Care)%tab_file_order_divider%Active Status%tab_file_order_divider%Department Directors%tab_file_order_divider%RAM%tab_file_order_divider%IsEleadFlg%tab_file_order_divider%    1st of Month   NICMAP Portfolios%tab_file_order_divider%  NIC CBSA Trends%tab_file_order_divider%DD mstrJobCategory%tab_file_order_divider%factResidentMoveOut%tab_file_order_divider%  1st of Month   Unit Occupancy By Month%tab_file_order_divider%Unit Occupancy Forecast%tab_file_order_divider%mstrB2B%tab_file_order_divider%mstrB2BContact%tab_file_order_divider%CommunityToCorporation%tab_file_order_divider%1.1 TEMPTourConfirmation%tab_file_order_divider%1.2 Journal Activity%tab_file_order_divider%1.3 Last Journal Activity%tab_file_order_divider%1.4 Next Journal Activity%tab_file_order_divider%1.5 Next Journal Closing Activity%tab_file_order_divider%1.6 First Journal Activity%tab_file_order_divider%eLeadCreationJournalActivity%tab_file_order_divider%2.1 B2B Activity%tab_file_order_divider%2.2 Last B2B Activity%tab_file_order_divider%2.3 Next B2B Activity%tab_file_order_divider%Community Trip Report%tab_file_order_divider%Community Trip Report Detail with Type%tab_file_order_divider%Community Trip Report POC%tab_file_order_divider%Community Review%tab_file_order_divider%Community Review Score with Date%tab_file_order_divider%3.1 Detail with Review Round%tab_file_order_divider%3.2 Placeholder- Detail with Review Round%tab_file_order_divider%4.1 Resident Assessed Care Type%tab_file_order_divider%4.2 Resident Assessed Med Level%tab_file_order_divider%No. of Residents and Units%tab_file_order_divider%4.3 Most Effective Billed Care%tab_file_order_divider%4.4 RentRoll%tab_file_order_divider%4.5 Past and Current Residents%tab_file_order_divider%4.6 Product Inventory (after Rent Roll)%tab_file_order_divider%4.7 Active Employees%tab_file_order_divider%4.8 iPod Tasks%tab_file_order_divider%Care Concierge%tab_file_order_divider%Incident%tab_file_order_divider%Short Term Leave%tab_file_order_divider%Responsible Party%tab_file_order_divider%Generator List%tab_file_order_divider%Score Card%tab_file_order_divider%5.1 Scheduled Move Out%tab_file_order_divider%6.0 Database Advancements%tab_file_order_divider%6.1 factProductPricing EXTRACT%tab_file_order_divider%6.2  Inquiry By Referral Source%tab_file_order_divider%6.3  Competitors%tab_file_order_divider%6.4 Reservation Key Table (RVP Approval)%tab_file_order_divider%6.5  Revenue%tab_file_order_divider%6.6  Reservations%tab_file_order_divider%6.7 Tour Activity%tab_file_order_divider%6.8 store JournalActivity%tab_file_order_divider%Resident Discovery%tab_file_order_divider%OneStream%tab_file_order_divider%PSFIN Culinary Spend"
                              ]
    },
    {
        "App":  "Atria-Transform",
        "Section":  "Unit Occupancy Forecast",
        "LoadScriptContent":  [
                                  "$tab Unit Occupancy Forecast",
                                  "/Rename fields",
                                  "factUnitOccupancyForecastByOperator:",
                                  "LOAD ",
                                  "//  UnitOccupancyByMonthID,",
                                  "// \tUnitOccupancyForecastByOperatorID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tdate(floor(EffectiveDT)) as %DateKey, ",
                                  "\tRVPMoveIn as M_RVPForecastedIns, ",
                                  "\tRVPMoveOut as M_RVPForecastedOuts, ",
                                  "\tRVPAdjustment as M_RVPForecastedAdj, ",
                                  "\tEDMoveIn as M_EDForecastedIns, ",
                                  "\tEDMoveOut as M_EDForecastedOuts, ",
                                  "\tEDAdjustment as M_EDForecastedAdj",
                                  "// \tReplicaDT",
                                  "",
                                  "FROM [lib://DataShare (atria_sanela.graziose)/QVD Extract\\QVD_Extract_factUnitOccupancyForecastByOperator.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [factUnitOccupancyForecastByOperator] into [lib://DataShare (atria_sanela.graziose)/QVD Transform\\QVD_Transform_factUnitOccupancyForecastByOperator.qvd]",
                                  "(qvd);",
                                  "drop table [factUnitOccupancyForecastByOperator];"
                              ]
    }
]
