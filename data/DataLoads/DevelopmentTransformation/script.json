[
    {
        "App":  "DevelopmentTransformation",
        "Section":  "1.1 TEMPTourConfirmation",
        "LoadScriptContent":  [
                                  "///$tab 1.1 TEMPTourConfirmation",
                                  "////We need to be able to determine if there was a confirmation call/text/lm/email day of or day before a tour",
                                  "////Step 1: Count all closed confirmation activities through yesterday and open for the next 7 days by CustomerID. This section gives us Confirm Count day of.",
                                  "TEMPJournal:",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  "    Count(InquiryJournalID) as ConfirmCount",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "where ",
                                  "((Date(Floor(EffectiveDT))\u003e=Date(Floor(Today()-4)) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()-1)) and CloseFlg=1)",
                                  "or",
                                  "(Date(Floor(EffectiveDT))\u003e=Date(Floor(Today())) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()+7)) and CloseFlg=0))",
                                  "and WildMatch(JournalQlikCategory, \u0027Telephone\u0027, \u0027Email\u0027)",
                                  "Group By CustomerID, EffectiveDT;",
                                  "",
                                  "////Step 2: Do the same but this time we are giving the Confirm count to the next day, not day of the activity.",
                                  "Concatenate(TEMPJournal)",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    date(floor(EffectiveDT+1)) as %DateKey,",
                                  "    Count(InquiryJournalID) as ConfirmCount",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd)",
                                  "where ",
                                  "((Date(Floor(EffectiveDT))\u003e=Date(Floor(Today()-4)) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()-1)) and CloseFlg=1)",
                                  "or",
                                  "(Date(Floor(EffectiveDT))\u003e=Date(Floor(Today())) and Date(Floor(EffectiveDT))\u003c=Date(Floor(Today()+6)) and CloseFlg=0))",
                                  "and WildMatch(JournalQlikCategory, \u0027Telephone\u0027, \u0027Email\u0027)",
                                  "Group By CustomerID, EffectiveDT;",
                                  "",
                                  "////Step 3: By Customer, By Day give 1,0 flag if they had an activity that would count as a tour confirmation for that day. ",
                                  "////\t\tCreate Recent Tour Flg so we can join correctly to the Journal Activity table.",
                                  "TEMPJournal2:",
                                  "LOAD",
                                  "1 as RecentTourFlg,",
                                  "%CustomerIDKey,",
                                  "%DateKey,",
                                  "IF(SUM(ConfirmCount)\u003e0, 1, 0) as ConfirmationFlg",
                                  "Resident TEMPJournal",
                                  "Group By %CustomerIDKey, %DateKey;",
                                  "Drop Table TEMPJournal;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "1.2 Journal Activity",
        "LoadScriptContent":  [
                                  "///$tab 1.2 Journal Activity",
                                  "////Step 1: Rename fields and do the following:",
                                  "////\t\t1. Create Recent Tour Flag so we can appropriately join to TourConfirmation Table",
                                  "////\t\t2. Create JournalTypeErrorFlg",
                                  "JournalActivity:",
                                  "//factInquiryJournalActivity",
                                  "LOAD",
                                  "\tIF(PlannedTourFlg=1 and Date(Floor(EffectiveDT)) \u003e=Date(Floor(Today()-3)) ",
                                  "    \tand Date(Floor(EffectiveDT)) \u003c=Date(Floor(Today()+7)) and ISNULL(JournalStatusChangeReasonID), 1,0) as RecentTourFlg, //Not Cancelled/No Show",
                                  " \tInquiryJournalID, ",
                                  "// \tCommunityID, ",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "\tInquiryID as %InquiryID, ",
                                  " \tCustomerID as %CustomerIDKey, ",
                                  "// \tTypeID, ",
                                  "\tType as JournalType, ",
                                  "// \tTypeCategoryID, ",
                                  "\tTypeCategory as JournalTypeCategory, ",
                                  "\tTypeCategorySEQ as Sequence,",
                                  "    IF(TypeCategorySEQ=1, \u0027Initial\u0027, \u0027Additional\u0027) as SequenceName,",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  " \tTIME(LEFT(EffectiveTM, 8), \u0027h:mm TT\u0027) as JournalTime, ",
                                  "    Timestamp#(date(floor(EffectiveDT)) \u0026 \u0027 \u0027 \u0026 Time#(time(LEFT(EffectiveTM, 8), \u0027hh:mm:ss tt\u0027), \u0027hh:mm:ss TT\u0027) ,\u0027MM/DD/YYYY hh:mm:ss TT\u0027) as JournalDTandTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Capitalize(Owner) as JournalOwner,",
                                  "// \tAutoNumber(date(floor(EffectiveDT)) \u0026 EffectiveTM) as JournalSequence,",
                                  "    Capitalize(CloseBy) as JournalClosedBy, ",
                                  "\tDate(Floor(CloseDT)) as JournalClosedDt, ",
                                  "\tCloseFlg as JournalClosedFlg, ",
                                  "//  \tObjective as JournalObjective,",
                                  "// \tIF(WildMatch(TypeID, 47), replace(Note,\u0027\u0026#39;\u0027,chr(39)), NULL()) as JournalNote,",
                                  "// \tReplicaDT",
                                  "    \u0027$(InquirerDashboard)\u0027 \u0026 InquiryID \u0026 \u0027/\u0027 \u0026 CommunityNumber \u0026 \u0027?CustomerID=\u0027 \u0026 CustomerID as [Inquirer Dashboard],",
                                  "//     JournalStatusChangeReasonID,",
                                  "    IF(ISNULL(JournalStatusChangeReasonID), 0, 1) as JournalStatusChangeFlg,",
                                  "    JournalStatusChangeReason,",
                                  "    JournalQlikCategory,",
                                  "    PlannedTourFlg,",
                                  "    TelephoneCallFlg,",
                                  "    ScheduledTourFlg,",
                                  "    Coalesce(ELeadFlg, 0) as ELeadFlg",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "////Step 2: Get the Journal Create and Modify info for use in the Call Center Analysis app.",
                                  "Left Join(JournalActivity)",
                                  "LOAD distinct InquiryJournalID,",
                                  "    DATE(FLOOR(CreateDT)) as JournalCreateDT,",
                                  "    Capitalize(CreateBy) as JournalCreateBy,",
                                  "    DATE(FLOOR(ModifyDT)) as JournalModifyDT,",
                                  "    Capitalize(ModifyBy) as JournalModifyBy;",
                                  "SQL SELECT InquiryJournalID,",
                                  "    CreateDT,",
                                  "    CreateBy,",
                                  "    ModifyDT,",
                                  "    ModifyBy",
                                  "FROM $(vBusinessData).CRM.tblInquiryJournal;",
                                  "",
                                  "",
                                  "",
                                  "////Step 7: Left Join to get the tour confirmation information.",
                                  "Left Join (JournalActivity)",
                                  "LOAD * Resident TEMPJournal2;",
                                  "Drop Table TEMPJournal2;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "1.3 Last Journal Activity",
        "LoadScriptContent":  [
                                  "///$tab 1.3 Last Journal Activity",
                                  "////Detrmine the most recent activity (non-Mass Email) by InquiryID and CommunityNumber",
                                  "LastJournalActivity:",
                                  "Load %CommunityKey, [%InquiryID],LastValue(JournalType) as lastStep, LastValue (%DateKey) as LastStepDate, LastValue(JournalDTandTM) as LastContactDate",
                                  "\t, LastValue(JournalType) \u0026\u0027 \u0027 \u0026 LastValue(%DateKey) as LastStepAndDT, LastValue(JournalQlikCategory) as LastStepQlikCategory",
                                  "// , LastValue(JournalStatusChangeFlg) as JournalStatusChangeFlg",
                                  "Resident JournalActivity ",
                                  "Where JournalClosedFlg=1 and [%DateKey]\u003c=\u0027$(vToday)\u0027 and NOT(Match(JournalType, \u0027Mass Email\u0027)) and ELeadFlg=0 ",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "drop field LastContactDate from LastJournalActivity;",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [LastJournalActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_LastJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [LastJournalActivity];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "1.4 Next Journal Activity",
        "LoadScriptContent":  [
                                  "///$tab 1.4 Next Journal Activity",
                                  "////Determine the next upcoming open activity by InquiryID and CommunityNumber",
                                  "NextJournalActivity:",
                                  "Load %CommunityKey, [%InquiryID],FirstValue(JournalType) as NextStep, FirstValue (%DateKey) as NextStepDate, FirstValue(JournalDTandTM) as NextContactDate, FirstValue(JournalType) \u0026 \u0027 \u0027 \u0026 FirstValue(%DateKey) as NextStepAndDT",
                                  "Resident JournalActivity ",
                                  "Where JournalClosedFlg=0 and [%DateKey]\u003e=\u0027$(vToday)\u0027 and ELeadFlg=0",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "",
                                  "drop field NextContactDate from NextJournalActivity;",
                                  "// drop table [JournalActivity];",
                                  "",
                                  "Store [NextJournalActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_NextJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NextJournalActivity];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "1.5 First Journal Activity",
        "LoadScriptContent":  [
                                  "///$tab 1.5 First Journal Activity",
                                  "////Determine the First (non-eLead create) activity by InquiryID and CommunityNumber",
                                  "tempfirst:",
                                  "load %CommunityKey, %InquiryID, JournalType, %DateKey, JournalOwner, JournalClosedFlg, JournalDTandTM\t//\tkeys",
                                  "resident JournalActivity\t//\tuse journalactivity to feed",
                                  "where JournalClosedFlg=1 and [%DateKey]\u003c=\u0027$(vToday)\u0027  and JournalType\u003c\u003e \u0027Mass Email\u0027 and ELeadFlg=0",
                                  "// \tand (NOT(Match(JournalType, \u0027Scheduled Tour\u0027, \u0027Unscheduled Tour\u0027, \u0027Virtual Tour\u0027)) or (Match(JournalType, \u0027Scheduled Tour\u0027, \u0027Unscheduled Tour\u0027, \u0027Virtual Tour\u0027) and JournalStatusChangeFlg=0)) //NOT TESTED this works if we need to exclude tours that were cancelled/no show. waiting for confirmation from Sanela that this logic would be correct.",
                                  "",
                                  "order by %CommunityKey, %InquiryID, %DateKey asc;",
                                  "",
                                  "",
                                  "FirstJournalActivity:",
                                  "Load %CommunityKey, [%InquiryID],FirstValue(JournalType) as FirstStep, FirstValue (%DateKey) as FirstStepDate, FirstValue(JournalDTandTM) as FirstContactDate",
                                  "Resident tempfirst ",
                                  "Where [%DateKey]\u003c=\u0027$(vToday)\u0027",
                                  "Group By %CommunityKey, %InquiryID",
                                  "Order By JournalDTandTM;",
                                  "",
                                  "Store [FirstJournalActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_FirstJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table tempfirst;",
                                  "",
                                  "drop table [FirstJournalActivity];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "2.1 B2B Activity",
        "LoadScriptContent":  [
                                  "///$tab 2.1 B2B Activity",
                                  "////Step 1: rename fields, only include objective and note for professional outreach",
                                  "[factContactJournalActivity]:",
                                  "LOAD",
                                  "    \u0027$(ContactDashboard)\u0027 \u0026 ContactID as ContactDashboard,",
                                  "//     factContactJournalActivityID,",
                                  "    ContactJournalID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CorporationID as %OrganizationID,",
                                  "    ContactID,",
                                  "//     TypeID,",
                                  "    \"Type\" as JournalType,",
                                  "//     TypeCategoryID,",
                                  "//    TypeCategory as JournalTypeCategory,",
                                  "    TypeCategorySEQ as Sequence,",
                                  "    IF(TypeCategorySEQ=1, \u0027Initial\u0027, \u0027Additional\u0027) as SequenceName,",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    EffectiveTM as JournalTime,",
                                  "    Capitalize(Owner) as JournalOwner,",
                                  "    CloseBy as JournalClosedBy,",
                                  "    CloseFlg as JournalClosedFlg,",
                                  "    IF(WildMatch(JournalQlikCategory, \u0027Professional Outreach\u0027), Objective, NULL()) as Objective,",
                                  "    IF(WildMatch(JournalQlikCategory, \u0027Professional Outreach\u0027), Note, NULL()) as Note,",
                                  "    JournalQlikCategory",
                                  "//     ReplicaDT as ContactJournalActivityReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factContactJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 2: grab descriptive info about the organization",
                                  "Left Join(factContactJournalActivity)",
                                  "LOAD",
                                  "    %OrganizationID,",
                                  "    Organization,",
                                  "    OrganizationStatus,",
                                  "    B2BType,",
                                  "    B2BCategoryType,",
                                  "    B2BCategory,",
                                  "    IsEleadCorporationFlg,",
                                  "    CompetitorID,",
                                  "    Priority,",
                                  "    OutreachFrequency,",
                                  "    NICID",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "////Step 3: grab descriptive info about that contact",
                                  "Left Join(factContactJournalActivity)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Contact,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    ContactPhoneWork,",
                                  "    ContactPhoneCell,",
                                  "    ContactPhoneHome,",
                                  "    ContactPriority,",
                                  "    ContactEmail",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "",
                                  "Store [factContactJournalActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_factContactJournalActivity.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "2.3 Next B2B Activity",
        "LoadScriptContent":  [
                                  "///$tab 2.3 Next B2B Activity",
                                  "////Next upcoming open activity by organization",
                                  "NextB2BActivity:",
                                  "Load [%OrganizationID],FirstValue(JournalType) as B2BNextStep, FirstValue (%DateKey) as B2BNextStepDate, FirstValue (Objective) as B2BNextStepObjective",
                                  "Resident factContactJournalActivity ",
                                  "Where JournalClosedFlg=0 and [%DateKey]\u003e=\u0027$(vToday)\u0027",
                                  "Group By %OrganizationID",
                                  "Order By %DateKey;",
                                  "",
                                  "drop table [factContactJournalActivity];",
                                  "",
                                  "Store [NextB2BActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_NextB2BActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [NextB2BActivity];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "3.1 Detail with Review Round",
        "LoadScriptContent":  [
                                  "///$tab 3.1 Detail with Review Round",
                                  "////Rename indicators and sections as need (want to make sure we aggregate sections that are used for multiple residents)",
                                  "Detail:",
                                  "LOAD",
                                  "//     factCommunityReviewDetailID,",
                                  "    ReviewID as [%ReviewIDKey],",
                                  "    ResponseID,",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    IndicatorID,",
                                  "    Indicator as [IndicatorDept],",
                                  "    SectionID,",
                                  "    Section as ReviewSection,",
                                  "    QuestionID as ReviewQuestionID,",
                                  "//     QuestionNumber,",
                                  "//     Question as ReviewQuestion,",
                                  "    QuestionScore,",
                                  "//     AnswerID,",
                                  "    Answer as ReviewAnswer,",
                                  "    AnswerScore, ",
                                  "    \"Comment\" as ReviewComment",
                                  "//     CreateBy as ReviewDetailCreateBy,",
                                  "//     date(floor(CreateDT)) as [%DateKey]",
                                  "//     ModifyBy as ReviewDetailModifyBy",
                                  "//     date(floor(ModifyDT)) as ReviewDetailModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReviewDetail.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Later the PTC load has some Custom items, want them to be able to left join to the detail table. ",
                                  "Concatenate(Detail)",
                                  "LOAD DISTINCT",
                                  "//     factCommunityReviewDetailID,",
                                  "    ReviewID as [%ReviewIDKey],",
                                  "    \u0027Custom\u0027 as ResponseID",
                                  "//     CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReview.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Only want Closed/Whatever is included in the CommunityReview load.",
                                  "INNER JOIN(Detail)",
                                  "LOAD",
                                  "\tReviewDashboard,",
                                  "    %ReviewIDKey,",
                                  "    [%CommunityKey],",
                                  "    ReviewStatus,",
                                  "    [%DateKey],",
                                  "    ReviewYear,",
                                  "    ReviewRound,",
                                  "    ReviewYearAndRound,",
                                  "    ReviewPOCID,",
                                  "    POCStatus,",
                                  "    ReviewPOCURL,",
                                  "    ReviewCreateBy,",
                                  "    MostEffectiveFlg",
                                  "//     CreateDT,",
                                  "//     ModifyBy,",
                                  "//     ModifyDT,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityReview.qvd]",
                                  "(qvd);",
                                  "",
                                  "//// Want to use Current wording for the Questions, not wording when they were asked. Also combining questions that are asked for multiple residents/apartments.",
                                  "Left Join(Detail)",
                                  "LOAD",
                                  "    QuestionID as ReviewQuestionID,",
                                  "    Question as ReviewQuestion",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_QEtblQuestion.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "////Grabbing Current IndicatorID, not IndicatorID at time it was asked.",
                                  "Left Join(Detail)",
                                  "LOAD QuestionID as ReviewQuestionID,",
                                  "    IndicatorID as CurrentIndicatorID;",
                                  "SQL SELECT tblQuestionExtension.QuestionExtensionID,",
                                  "    QuestionID,",
                                  "    SurveyID,",
                                  "    IndicatorID",
                                  "FROM $(vBusinessData).QMS.tblQuestionExtension",
                                  "left join (",
                                  "\tSelect \tQuestionExtensionID,",
                                  "    \t\tIndicatorID ",
                                  "\tFROM $(vBusinessData).QMS.lnkScoreIndicatorToQuestion) lnkScoreIndicatorToQuestion",
                                  "ON lnkScoreIndicatorToQuestion.QuestionExtensionID = tblQuestionExtension.QuestionExtensionID",
                                  ";",
                                  "",
                                  "////Grabbing Current SectionID, not SectionID at time it was asked.",
                                  "Left Join(Detail)",
                                  "LOAD QuestionID as ReviewQuestionID,",
                                  "    SectionID as CurrentSectionID;",
                                  "SQL SELECT tblQuestionExtension.QuestionExtensionID,",
                                  "    QuestionID,",
                                  "    SurveyID,",
                                  "    SectionID",
                                  "FROM $(vBusinessData).QMS.tblQuestionExtension",
                                  "left join (",
                                  "\tSelect\tQuestionExtensionID,",
                                  "    \t\tSectionExtensionID",
                                  "\tFROM\t$(vBusinessData).QMS.lnkQuestionToSection) lnkQuestionToSection",
                                  "ON lnkQuestionToSection.QuestionExtensionID = tblQuestionExtension.QuestionExtensionID",
                                  "left join (",
                                  "\tSelect \tSectionExtensionID,",
                                  "    \t\tSectionID ",
                                  "\tFROM $(vBusinessData).QMS.tblSectionExtension) tblSectionExtension",
                                  "ON tblSectionExtension.SectionExtensionID = lnkQuestionToSection.SectionExtensionID",
                                  ";",
                                  "",
                                  "////Grabbing Current Indicator Name",
                                  "Left Join(Detail)",
                                  "LOAD IndicatorID as CurrentIndicatorID,",
                                  "    Indicator as [CurrentIndicatorDept];",
                                  "SQL SELECT IndicatorID,",
                                  "    \"Indicator\"",
                                  "FROM $(vBusinessData).QMS.luScoreIndicator;",
                                  "",
                                  "////Grabbing Current Section Name (and renaming to aggregate if the section is duplicated for multiple residents)",
                                  "Left Join(Detail)",
                                  "LOAD SectionID as CurrentSectionID,",
                                  "    SectionName as CurrentReviewSection;",
                                  "SQL SELECT SectionID,",
                                  "    SectionName",
                                  "FROM $(vBusinessData).QMS.tblSection;",
                                  "",
                                  "",
                                  "",
                                  "////Grabbing ChoiceTypeID (Pass/No Pass, etc.)",
                                  "Left Join(Detail)",
                                  "LOAD",
                                  "    ChoiceTypeID,",
                                  "    QuestionID as ReviewQuestionID",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_QElnkQuestionToChoiceType.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Joing PTC information to the question",
                                  "LEFT JOIN(Detail)",
                                  "LOAD",
                                  "    PlanOfCorrectionResponseId as POCResponseID,",
                                  "    PlanOfCorrectionId as ReviewPOCID,",
                                  "    IF(CustomFlg=1, \u0027Custom\u0027, CommunityReviewResponseId) as ResponseID,",
                                  "    PlanOfCorrectionResponseStatusId as PlanOfCorrectionResponseStatusID,",
                                  "    IF(Owner = 0, NULL(), Owner) as POCOwner,",
                                  "    Goal as POCGoal,",
                                  "    Result as POCResult,",
                                  "//     CreateDT,",
                                  "//     CreateBy,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     ActiveFlg,",
                                  "    Date(Floor(DueDt)) as POCDueDT",
                                  "//     QuestionID,",
                                  "//     CustomFlg",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReviewPOC.qvd]",
                                  "(qvd);",
                                  "",
                                  "////get status for the PTC line item",
                                  "LEFT JOIN(Detail)",
                                  "LOAD",
                                  "    PlanOfCorrectionResponseStatusID,",
                                  "    Status as POCResponseStatus",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_QEluPlanOfCorrectionResponseStatus.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [Detail] into [lib://DataShare/QVD Transform\\QVD_Transform_DetailWithReviewRound.qvd]",
                                  "(qvd);",
                                  "drop table Detail;",
                                  "",
                                  "End If"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "4.1 Resident Assessed Care Type",
        "LoadScriptContent":  [
                                  "///$tab 4.1 Resident Assessed Care Type",
                                  "////Step 1: Get most effective care assessment date by customer",
                                  "factResidentAssessedCareType:",
                                  "Load ",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as CareTypeAssessedDate,",
                                  "    Coalesce(CareTypeCode, CareType) as AssessedCareType,",
                                  "    Care as AssessedCareLevel,",
                                  "    PriceBase as AssessedCareRate,",
                                  "    CareHistoryID",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentCarePrimary.qvd]",
                                  "(qvd)",
                                  "Where factResidentCarePrimaryRank = 1;",
                                  "",
                                  "Store [factResidentAssessedCareType] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentCurrentAssessedCareType.qvd]",
                                  "(qvd);",
                                  "drop Table factResidentAssessedCareType;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "4.2 Resident Assessed Med Level",
        "LoadScriptContent":  [
                                  "///$tab 4.2 Resident Assessed Med Level",
                                  "////Step 1: Ancillary Care where SeriesID=1 i.e., Med Management",
                                  "MedManagement:",
                                  "LOAD * ",
                                  "",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentCareAncillary.qvd]",
                                  "(qvd)",
                                  "where SeriesID=1;",
                                  "",
                                  "////Step 2: Get most effective assessment date by customer",
                                  "factResidentCurrentMed:",
                                  "NoConcatenate",
                                  "Load DISTINCT",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as CareMedAssessedDate,",
                                  "    CareAncillary as AssessedMedLevel,",
                                  "    PriceBase as AssessedMedRate,",
                                  "    CareHistoryID",
                                  "Resident MedManagement",
                                  "Where factResidentCareAncillaryRank = 1;",
                                  "",
                                  "Drop Table MedManagement;",
                                  "Store [factResidentCurrentMed] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentCurrentAssessedMed.qvd]",
                                  "(qvd);",
                                  "drop Table factResidentCurrentMed;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "4.3 Most Effective Billed Care",
        "LoadScriptContent":  [
                                  "///$tab 4.3 Most Effective Billed Care",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "//// Step 1.1: Get all care history",
                                  "BilledCareTEMP:",
                                  "LOAD ResidentCarePrimaryID,",
                                  "//     CommunityID,",
                                  "    Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    CareID,",
                                  "    CareLevel as BilledCareLevel,",
                                  "    CareTypeID,",
                                  "    Coalesce(CareTypeCode,CareType) as BilledCareType",
                                  "//     \"Rate\",",
                                  "//     CreateDT,",
                                  "//     CreateBY,",
                                  "//     ModifyDT,",
                                  "//     ModifyBY,",
                                  "//     ActiveFlg;",
                                  "Where Ranking = 1;",
                                  "SQL SELECT ResidentCarePrimaryID,",
                                  "//     CommunityID,",
                                  "    EffectiveDT,",
                                  "    CustomerID,",
                                  "    tblResidentCarePrimary.CareID,",
                                  "    CareLevel,",
                                  "    luCare.CareTypeID,",
                                  "    CareType,",
                                  "    Code as CareTypeCode,",
                                  "    ActiveFlg,",
                                  "    Rank() OVER\t(PARTITION BY CustomerID order by CustomerID, EffectiveDT desc, ResidentCarePrimaryID desc) as Ranking",
                                  "FROM $(vBusinessData).ARM.tblResidentCarePrimary tblResidentCarePrimary",
                                  "Left Join \t(Select",
                                  "\t\t\t\t\tCareID",
                                  "                \t,CareLevel",
                                  "                \t,CareTypeID",
                                  "\t\t\tFROM\t$(vBusinessData).ARM.luCare) luCare",
                                  "ON\t\t\tluCare.CareID = tblResidentCarePrimary.CareID",
                                  "Left Join \t(Select",
                                  "\t\t\t\t\tCareTypeID",
                                  "                    ,CareType",
                                  "                    ,Code",
                                  "\t\t\tFROM\t$(vBusinessData).ARM.luCareType) luCareType",
                                  "ON\t\t\tluCareType.CareTypeID = luCare.CareTypeID",
                                  "Where ActiveFlg=1;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "4.4 RentRoll",
        "LoadScriptContent":  [
                                  "///$tab 4.4 RentRoll",
                                  "////Step 1: All residents with Moved In or Moved Back status (all current residents)",
                                  "TEMPvwCurrentResidents:",
                                  " LOAD",
                                  "//  KeyID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "//  CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//  InquiryID,",
                                  "  \tBillingID,",
                                  "    \"Resident\",",
                                  "    Status,",
                                  " Address1,",
                                  " Address2,",
                                  " City,",
                                  " State,",
                                  " PostalCode,",
                                  " Country,",
                                  "//  Longitude,",
                                  "//  Latitude,",
                                  " Gender,",
                                  " date(floor(BirthDT))as DOB",
                                  "//  Age(today(),BirthDT)as Age",
                                  "//  CreateDT,",
                                  "//  ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd)",
                                  "where StatusID=\u00276\u0027 or StatusID=\u00277\u0027;",
                                  "",
                                  "////Step 2: Get lowest possible service available at the community",
                                  "Left Join(TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    LowestService",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 3: Get relevant inquiry information (mostly used in the professional sales routing kit app)",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD ",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "\tReferralCategoryType as ReferralBucket, ",
                                  "\tReferralCategory,",
                                  "\tReferralSource as Organization,",
                                  "\tReferralSourceID as %OrganizationID,",
                                  "\tReferredBy,",
                                  "    ReferredByID as ContactID,",
                                  "   ",
                                  "    SecondaryReferralCategoryType as SecondaryReferralBucket,",
                                  "    SecondaryReferralSourceID as SecondaryOrganizationID,",
                                  "    SecondaryReferralSource as SecondaryOrganization,",
                                  "    SecondaryReferredBy",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 4: Get relevant information regarding the referral contact",
                                  "Left Join(TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 5: Get today\u0027s rent, payor type, etc. for current residents",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     ResidentRoomID,",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "    ProductInventoryID,",
                                  "//     EffectiveDt,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    RoomNumber,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    \"Rate\" as CurrentRent,",
                                  "//     EventType,",
                                  "    IsPhysicalPresentFlg",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentRoom.qvd]",
                                  "(qvd)",
                                  "where date(floor(EffectiveDt))= date(floor(today()));",
                                  "",
                                  "////Step 6: Get the assessed care information",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD DISTINCT",
                                  "    %CustomerIDKey,",
                                  "//     CareTypeDate,",
                                  "\tAssessedCareType,",
                                  "    AssessedCareLevel,",
                                  "    AssessedCareRate",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factResidentCurrentAssessedCareType.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 7: Get assessed med information",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD Distinct",
                                  "\t%CustomerIDKey,",
                                  "    AssessedMedLevel,",
                                  "    AssessedMedRate",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factResidentCurrentAssessedMed.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 8: Get billed care information",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD [%CustomerIDKey],",
                                  "\tBilledCareLevel,",
                                  "    BilledCareType",
                                  "Resident BilledCareTEMP;",
                                  "",
                                  "",
                                  "////Step 9: Get current street and selling rate for their current room",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     mstrProductInventoryID,",
                                  "//     CommunityID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    PriceSpecial as SpecialRate,",
                                  "    PriceBase as StreetRate,",
                                  "    RoomTypeStyleCode",
                                  "    ",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 10: Get move in date",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    DATE(MAX(FLOOR(MoveInDt))) as MoveInDt",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID;",
                                  "",
                                  "////Step 11: Get lease start DT, which can be different than move in date.",
                                  "LEFT JOIN (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     ResidentLeaseSegmentID,",
                                  "//     LeaseID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(MAX(Floor(LeaseSegmentStartDT))) as LeaseSegmentStartDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factLeaseSegment.qvd]",
                                  "(qvd)",
                                  "Group By CustomerID;",
                                  "",
                                  "////Step 12: Grab the scheduled move out date (if it exists for the customer)",
                                  "Left Join (TEMPvwCurrentResidents)",
                                  "LOAD",
                                  "//     factResidentMoveOutScheduleID,",
                                  "//     ResidentMoveOutScheduleID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     MoveOutDT as %DateKey,",
                                  "    Date(Floor(MoveOutDT)) as ScheduledMoveOutDT",
                                  "//     Date(Floor(NoticeDT)) as ScheduledMoveOutNoticeDT,",
                                  "//     OutboundCategory as LostCategory, ",
                                  "// \tOutboundLocationID as LostLocationID,",
                                  "//     OutboundLocation as LostLocation,",
                                  "//     OutboundLocationType as LostLocationType,",
                                  "//     OutboundInfluence as MoveOutReason,",
                                  "//     Note as ScheduledMoveOutNote,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 13: rename fields. If no assessment is available, assume lowest service level at the community.",
                                  "vwCurrentResidents:",
                                  "LOAD",
                                  "\t\u0027$(RMSLeaseManagement)\u0027 \u0026 %CustomerIDKey as RMSLeaseManagement,",
                                  "    \u0027$(CMSResidentDashboard)\u0027 \u0026 %CommunityKey \u0026 \u0027\u0026CustomerID=\u0027 \u0026 [%CustomerIDKey] as CMSResidentDashboard,",
                                  "\t%CustomerIDKey,",
                                  "    %CommunityKey,",
                                  "  \tBillingID,",
                                  "    \"Resident\",",
                                  "    ReferralBucket,",
                                  "    ReferralCategory,",
                                  "\tOrganization,",
                                  "\t%OrganizationID,",
                                  "\tReferredBy,",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    ProductInventoryID,",
                                  "    RoomNumber,",
                                  "    PayorType,",
                                  "    CurrentRent,",
                                  "    SpecialRate,",
                                  "    StreetRate,",
                                  "    RoomTypeStyleCode,",
                                  "    AssessedCareRate,",
                                  "    AssessedMedRate,",
                                  "    IsPhysicalPresentFlg,",
                                  "    Coalesce(AssessedCareType, LowestService) as AssessedCareType,",
                                  "    Coalesce(AssessedCareLevel, LowestService) as AssessedCareLevel,",
                                  "    Coalesce(AssessedMedLevel, LowestService) as AssessedMedLevel,",
                                  "    Status,",
                                  "    IF(ISNULL(MoveInDt), LeaseSegmentStartDT, MoveInDt) as MoveInDt,",
                                  "    ScheduledMoveOutDT,",
                                  "    Address1,",
                                  "    Address2,",
                                  "\tCity,",
                                  "    State,",
                                  "\tPostalCode,",
                                  " \tCountry,",
                                  "    Gender,",
                                  "    DOB,",
                                  "    BilledCareType,",
                                  "    BilledCareLevel",
                                  "Resident TEMPvwCurrentResidents;",
                                  "",
                                  "Store [vwCurrentResidents] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrRentRoll.qvd]",
                                  "(qvd);",
                                  "drop Table [vwCurrentResidents];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "4.5 Product Inventory (after Rent Roll)",
        "LoadScriptContent":  [
                                  "///$tab 4.5 Product Inventory (after Rent Roll)",
                                  "////Renaming fields and cleaning up dates.",
                                  "[mstrProductInventory]:",
                                  "    LOAD",
                                  "// \tCommunityID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tProductInventoryID, ",
                                  "\tProductNumber as RoomNumber, ",
                                  "\tRoomType, ",
                                  "// \tRoomTypeStyle, ",
                                  "// \tRoomTypeCode, ",
                                  "\tRoomTypeStyleCode, ",
                                  "// \tCareType, ",
                                  "\tCareTypeCode as CareType, ",
                                  "    GrossUnitArea,",
                                  "\tIsOccupiedFlg, ",
                                  "\tIsReservedFlg, ",
                                  "    If (IsReservedFlg=1,\u0027Reserved\u0027,\u0027Not Reserved\u0027) as ReservedStatus,",
                                  "\tIsVacancyScheduledFlg,",
                                  "    IsSemiPrivateResidentFlg,",
                                  "\tdate(floor(VacancyScheduledDT)) as VacancyScheduledDT, ",
                                  "//\tVacantDT, ",
                                  "\tDayVacantCount as M_DaysVacant, ",
                                  "\tIsRoomReadyFlg, ",
                                  "    If (IsRoomReadyFlg=1,\u0027Rent Ready\u0027,\u0027Not Rent Ready\u0027) as RentReadyStatus,",
                                  "\tGrade, ",
                                  "\tPriceBase as StreetRate, ",
                                  "\tPriceSpecial as SpecialRate,",
                                  "    SemiPrivateRate as SemiRate,",
                                  "    DailyRate as RespiteRate,",
                                  "\tisModelRoomFlg as IsModelRoomFlg,",
                                  "    IsOfflineFlg, ",
                                  "\tDate(Floor(OfflineDT)) as OfflineDT, ",
                                  "\tOfflineReason, ",
                                  "\tOfflineNote, ",
                                  "\tDATE(FLOOR(OnlineDT)) as OnlineDT, ",
                                  "\tDate(Floor(OnlineDTEstimate)) as OnlineDTEstimate, ",
                                  "\tOnlineReason,",
                                  "    Note as RoomNote",
                                  "//\tReplicaDT",
                                  "",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [mstrProductInventory] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "drop table [mstrProductInventory];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "5.1 Scheduled Move Out",
        "LoadScriptContent":  [
                                  "///$tab 5.1 Scheduled Move Out",
                                  "////Step 1: rename fields",
                                  "factResidentMoveOutSchedule:",
                                  "LOAD",
                                  "//     factResidentMoveOutScheduleID,",
                                  "//     ResidentMoveOutScheduleID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    MoveOutDT as %DateKey,",
                                  "    Date(Floor(MoveOutDT)) as ScheduledMoveOutDT,",
                                  "    Date(Floor(NoticeDT)) as ScheduledMoveOutNoticeDT,",
                                  "    OutboundCategory as LostCategory, ",
                                  "\tOutboundLocationID as LostLocationID,",
                                  "    OutboundLocation as LostLocation,",
                                  "    OutboundLocationType as LostLocationType,",
                                  "    OutboundInfluence as MoveOutReason,",
                                  "    Note as ScheduledMoveOutNote,",
                                  "\t\u0027$(RMSLeaseManagement)\u0027 \u0026 CustomerID as RMSLeaseManagement",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 2: grab resident name",
                                  "LEFT JOIN (factResidentMoveOutSchedule)",
                                  "LOAD distinct",
                                  "//            KeyID, ",
                                  "               CustomerID as [%CustomerIDKey], ",
                                  "//            CommunityID, ",
                                  "// \t\t\t   CommunityNumber as %CommunityKey,",
                                  "//            InquiryID, ",
                                  "//            BillingID, ",
                                  "               Resident",
                                  "//            Address1, ",
                                  "//            Address2, ",
                                  "//            City, ",
                                  "//            State, ",
                                  "//            PostalCode, ",
                                  "//            Country, ",
                                  "//            Longitude, ",
                                  "//            Latitude, ",
                                  "//            StatusID, ",
                                  "//            Gender, ",
                                  "//            BirthDT, ",
                                  "//            CreateDT, ",
                                  "//            ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [factResidentMoveOutSchedule] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentMoveOutSchedule.qvd]",
                                  "(qvd);",
                                  "drop Table factResidentMoveOutSchedule;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.0 Database Advancements",
        "LoadScriptContent":  [
                                  "///$tab 6.0 Database Advancements",
                                  "////Step 1: Create list of all Community + InquiryID + CustomerID combinations",
                                  "IncludeKey:",
                                  "LOAD",
                                  "    CommunityNumber \u0026 \u0027\u0026\u0027 \u0026 InquiryID \u0026 \u0027\u0026\u0027 \u0026 CustomerID as IncludeKey",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "////Step 2.1: Determine most relevant inquiry history record for each effective date. ",
                                  "TEMPInquiryHistoryMostEffective:",
                                  "LOAD ",
                                  "    InquiryID as %InquiryID,",
                                  "    CommunityID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "    StatusID,",
                                  "    Date(CreateDT) as CreateDT,",
                                  "    InquiryHistoryID",
                                  "Where Ranking=1;",
                                  "SQL SELECT InquiryHistoryID,",
                                  "\tInquiryID,",
                                  "\tCommunityID,",
                                  "    CustomerID,",
                                  "    EffectiveDT,",
                                  "    StatusID,",
                                  "    CreateDT,",
                                  "    Rank() OVER",
                                  "\t\t\t\t(PARTITION BY CommunityID, InquiryID, CustomerID, Cast(EffectiveDT as date) order by CommunityID, InquiryID, CustomerID, CreateDT desc, InquiryHistoryID desc) as Ranking",
                                  "FROM $(vBusinessData).CRM.tblInquiryHistory;",
                                  "",
                                  "////Step 2.2: grab community number",
                                  "Inner Join (TEMPInquiryHistoryMostEffective)",
                                  "LOAD CommunityID,",
                                  "    CommunityNumber as [%CommunityKey];",
                                  "SQL SELECT CommunityID, CommunityNumber",
                                  "FROM $(vInsightsData)Master.mstrCommunity;",
                                  "",
                                  "////Step 2.3: grab status",
                                  "Inner Join (TEMPInquiryHistoryMostEffective)",
                                  "LOAD ResidentStatusID as StatusID,",
                                  "    ResidentStatus as Status;",
                                  "SQL SELECT ResidentStatusID,",
                                  "    ResidentStatus",
                                  "FROM $(vBusinessData).ARM.luResidentStatus;",
                                  "",
                                  "////Step 2.4: grab status rank",
                                  "Left Join (TEMPInquiryHistoryMostEffective)",
                                  "LOAD",
                                  "    StatusID,",
                                  "//     Status,",
                                  "    StatusRank",
                                  "FROM [lib://DataShare/.xls Library\\Sales\\Inquiry Status Rank.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "////Step 3: filter to only those in IncludeKey",
                                  "InquiryHistoryMostEffective:",
                                  "LOAD [%CommunityKey] \u0026 \u0027\u0026\u0027 \u0026 %InquiryID \u0026 \u0027\u0026\u0027 \u0026 %CustomerIDKey as Key,",
                                  "\t[%InquiryID],",
                                  "    [%CommunityKey],",
                                  "    [%CustomerIDKey],",
                                  "    EffectiveDT,",
                                  "    CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    StatusID,",
                                  "    Status,",
                                  "    StatusRank",
                                  "Resident TEMPInquiryHistoryMostEffective",
                                  "where Exists(IncludeKey, [%CommunityKey] \u0026 \u0027\u0026\u0027 \u0026 %InquiryID \u0026 \u0027\u0026\u0027 \u0026 %CustomerIDKey);",
                                  "Drop Table TEMPInquiryHistoryMostEffective;",
                                  "",
                                  "",
                                  "",
                                  "Store InquiryHistoryMostEffective into [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd](qvd);",
                                  "Drop Table InquiryHistoryMostEffective;",
                                  "",
                                  "Drop Table IncludeKey;",
                                  "",
                                  "",
                                  "////Step 4: Get most effective status one week ago",
                                  "OneWeekPriorStatus:",
                                  "LOAD",
                                  "//     StatusID,",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    EffectiveDT as LastStatusEffectiveDT,",
                                  "//     CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    Status as StatusLastWeek,",
                                  "    StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd);",
                                  "",
                                  "Inner Join (OneWeekPriorStatus)",
                                  "LOAD",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as LastStatusEffectiveDT",
                                  "//     CreateDT,",
                                  "//     InquiryHistoryID,",
                                  "//     Status as StatusLastWeek,",
                                  "//     StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd)",
                                  "where EffectiveDT \u003c= Date(Floor(Date(Today()-7)))",
                                  "group by %InquiryID, [%CommunityKey], [%CustomerIDKey];",
                                  "",
                                  "",
                                  "////Step 5: Get most effective status 30 Days ago",
                                  "ThirtyDaysPriorStatus:",
                                  "NoConcatenate",
                                  "LOAD",
                                  "//     StatusID,",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    EffectiveDT as LastStatusEffectiveDT,",
                                  "//     CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    Status as Status30Days,",
                                  "    StatusRank as StatusRank30Days",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd);",
                                  "",
                                  "Inner Join (ThirtyDaysPriorStatus)",
                                  "LOAD",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as LastStatusEffectiveDT",
                                  "//     CreateDT,",
                                  "//     InquiryHistoryID,",
                                  "//     Status as StatusLastWeek,",
                                  "//     StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd)",
                                  "where EffectiveDT \u003c= Date(Floor(Date(Today()-30)))",
                                  "group by %InquiryID, [%CommunityKey], [%CustomerIDKey];",
                                  "",
                                  "",
                                  "////Step 6: Get most effective status 90 Days ago",
                                  "NinetyDaysPriorStatus:",
                                  "NoConcatenate",
                                  "LOAD",
                                  "//     StatusID,",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    EffectiveDT as LastStatusEffectiveDT,",
                                  "//     CreateDT,",
                                  "    InquiryHistoryID,",
                                  "    Status as Status90Days,",
                                  "    StatusRank as StatusRank90Days",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd);",
                                  "",
                                  "Inner Join (NinetyDaysPriorStatus)",
                                  "LOAD",
                                  "// \tKey,",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    Date(Floor(Max(EffectiveDT))) as LastStatusEffectiveDT",
                                  "//     CreateDT,",
                                  "//     InquiryHistoryID,",
                                  "//     Status as StatusLastWeek,",
                                  "//     StatusRank as StatusRankLastWeek",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_InquiryHistoryMostEffective.qvd]",
                                  "(qvd)",
                                  "where EffectiveDT \u003c= Date(Floor(Date(Today()-90)))",
                                  "group by %InquiryID, [%CommunityKey], [%CustomerIDKey];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.1 factProductPricing EXTRACT",
        "LoadScriptContent":  [
                                  "///$tab 6.1 factProductPricing EXTRACT",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "////Grab room rate for every day. This is really an extraction step we do in Transformation due to timing of the tables replication.",
                                  "ProductPricing:",
                                  "LOAD factProductPricingID, ",
                                  "\tCommunityNumber, ",
                                  "\tProductInventoryID, ",
                                  "\tEffectiveDT, ",
                                  "\tPayorID, ",
                                  "\tPayor, ",
                                  "\tPriceBase, ",
                                  "\tPriceGross, ",
                                  "\tPriceSpecial, ",
                                  "    PriceMinimum,",
                                  "    PriceMaximum,",
                                  "\tIsExistFlg, ",
                                  "\tReplicatDT;",
                                  "",
                                  "SELECT *",
                                  "FROM $(vInsightsData)Pricing.factProductPricing",
                                  "where EffectiveDT\u003e=\u0027$(vmindate)\u0027;",
                                  "",
                                  "store [ProductPricing] into [lib://DataShare/QVD Extract\\QVD_Extract_factProductPricing.qvd](qvd);",
                                  "",
                                  "Drop Table [ProductPricing];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.2  Inquiry By Referral Source",
        "LoadScriptContent":  [
                                  "///$tab 6.2 *Inquiry By Referral Source",
                                  "////PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factProductPricing EXTRACT, SO IT MUST FOLLOW THAT SECTION.",
                                  "////Step 1.1: Rename fields. Create \"Status Category\" for use in Community Sales \u0026 Marketing app.",
                                  " factInquiryByReferral:",
                                  " LOAD ",
                                  "    \u0027$(InquirerDashboard)\u0027 \u0026 InquiryID \u0026 \u0027/\u0027 \u0026 CommunityNumber \u0026 \u0027?CustomerID=\u0027 \u0026 CustomerID as [Inquirer Dashboard],",
                                  "    CommunityNumber as %CommunityKey, ",
                                  "\tInquiryID AS %InquiryID, ",
                                  "\tdate(floor(InquiryDT)) as %DateKey, ",
                                  "    date(floor(InquiryDT)) as DateOfInquiry, ",
                                  "\tStatus, ",
                                  "    IF(Exists(ActiveStatusList, Status), \u0027Active\u0027, \u0027Inactive\u0027) as ActiveCRMStatus, ",
                                  "\tdate(floor(StatusDT))as InquiryStatusDate, ",
                                  "\tInquiry as InquiryName, ",
                                  "\tAddress1 as InquiryAddress, ",
                                  "\tAddress2 as InquiryAddress2, ",
                                  "\tCity as InquiryCity, ",
                                  "\tState as InquiryState, ",
                                  "// \tIF(PostalCode=\u0027\u0027, NULL(), IF(Country=\u0027CAN\u0027, LEFT(PostalCode, 7), LEFT(TRIM(PostalCode),5))) as InquiryPostalCode, ",
                                  "\tPostalCode as InquiryPostalCode,",
                                  "\tCountry as InquiryCountry, ",
                                  "\tlower(Email) as InquiryEmail,",
                                  "\tPhone as InquiryPhoneHome, ",
                                  "\tPhoneWork as InquiryPhoneWork, ",
                                  "\tPhoneCell as InquiryPhoneCell, ",
                                  "//\tLongitude as InquiryLongitude, ",
                                  "//\tLatitude as InquiryLatitude, ",
                                  "\tRelationToCustomer, ",
                                  "\tReferralCategoryType as ReferralBucket, ",
                                  "    IF(ReferralCategoryType=\u0027Professional - Clinical\u0027, \u0027Clinical\u0027,",
                                  "    IF(ReferralCategoryType=\u0027Professional - Non-Clinical\u0027, \u0027Non-Clinical\u0027,",
                                  "    IF(ReferralCategoryType=\u0027Professional - Organization/Non-Profit\u0027, \u0027Organization/Non-Profit\u0027,",
                                  "    IF(ReferralCategoryType=\u0027Professional - Faith Based\u0027, \u0027Faith Based\u0027, ReferralCategoryType)))) as ReferralBucketShort,",
                                  "\tReferralCategory, ",
                                  "// \tReferralType, ",
                                  "\tReferralSource as Organization,",
                                  "    ReferralSourceID as %OrganizationID,",
                                  "\tReferredBy, ",
                                  "    ReferredByID as ContactID,",
                                  "    ",
                                  "    SecondaryReferralCategoryType as SecondaryReferralBucket,",
                                  "    SecondaryReferralSourceID as SecondaryOrganizationID,",
                                  "    SecondaryReferralSource as SecondaryOrganization,",
                                  "    SecondaryReferredBy,",
                                  "",
                                  "//     date(floor(TourDT)) as InitialTourDate, ",
                                  "//\tTourType, ",
                                  "// \tCapitalize(TourOwner) as JournalOwner, ",
                                  "//\tTourInitialCount as M_InitialTourCount, ",
                                  "//\tTourAdditionalCount as M_AdditionalTourCount, ",
                                  "// \tTourCount as M_TotalTours, ",
                                  "// \tCallCount as M_TotalCalls, ",
                                  "\t    ",
                                  "\tIsSelfAssessmentFlg as IsSelfAssessment, ",
                                  "\tOutboundCategory as LostCategory, ",
                                  "\tOutboundLocationID as LostLocationID,",
                                  "    OutboundLocation as LostLocation,",
                                  "    OutboundInfluence as LostInfluence,",
                                  "    CompetitorRate,",
                                  "\tAllowContactPhoneFlg, ",
                                  "\tAllowContactMailFlg, ",
                                  "\tAllowContactEmailFlg, ",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "// \tBillingID, ",
                                  "\tLivingSituation, ",
                                  "\tCoalesce(CareTypeCode, CareType) as CareType, ",
                                  "\tPayorType,",
                                  "    Note as InquiryNote,",
                                  "\tRoomType, ",
                                  "\tdate(floor(MoveInDT)) as MoveInDate, ",
                                  "    Date(Floor(PhysicalMoveInDT)) as PhysicalMoveInDT,",
                                  "    IF((date(floor(TourDT))-date(floor(InquiryDT)))\u003e365,\u0027\u0027, IF(date(floor((TourDT))-date(floor(InquiryDT)))\u003c0,\u0027\u0027, date(floor(TourDT))-date(floor(InquiryDT)))) as M_InquiryToTourDays,",
                                  "//     IF((date(floor(MoveInDT))-date(floor(InquiryDT)))\u003e365,\u0027\u0027, IF(date(floor((MoveInDT))-date(floor(InquiryDT)))\u003c0,\u0027\u0027, date(floor(MoveInDT))-date(floor(InquiryDT)))) as M_InquiryToMoveInDays,",
                                  "//     IF((date(floor(MoveInDT))-date(floor(TourDT)))\u003e365, \u0027\u0027, IF(date(floor((MoveInDT))-date(floor(TourDT)))\u003c0, \u0027\u0027, date(floor(MoveInDT))-date(floor(TourDT)))) as M_TourToMoveInDays,",
                                  "\tCreateBy as InquiryCreateBy,",
                                  "    IF( Exists(eLeadOrganizationList, CreateBy) or IsEleadFlg = 1, 1, 0) as IsEleadFlg,",
                                  "    CreateDT as InquiryCreateDTandTM,",
                                  "\tdate(floor(CreateDT)) as InquiryCreateDT,",
                                  "//     time(CreateDT,\u0027hh:00 tt\u0027) as InquiryCreateTime",
                                  "    Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027) as InquiryCreateTime,",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=7 AND",
                                  "//     \thour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003c21 and Status\u003c\u003e \u0027Not Qualified\u0027, 1,0) as SpeedToLeadFlg",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=21, 1,0) as LateNightLeadFlg",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003c=7, \u0027Early Morning\u0027,",
                                  "//     \tIF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=19, \u0027Late Evening\u0027, ",
                                  "//     \tTime(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))) as InquiryCreatePeriod,",
                                  "//     IF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003c=7, 1,",
                                  "//     \tIF(hour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027))\u003e=19, 19, ",
                                  "//     \tHour(Time(MakeTime(hour(time(CreateDT,\u0027hh:mm tt\u0027))), \u0027h:mm tt\u0027)))) as InquiryCreatePeriodSort",
                                  "    ",
                                  "    HasBiographyNote,",
                                  "    HasObjectionNote,",
                                  "    HasDiscoveryNote,",
                                  "    HasCurrentLivingSituationNote,",
                                  "    HasWhatPromptedSearchNote,",
                                  "    HasBudgetNote,",
                                  "    HasRoomTypeNote,",
                                  "    HasTimeFrameNote",
                                  "// \tModifyBy, ",
                                  "// \tModifyDT,",
                                  "",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 1.2: We need the Min Inquiry DT, Tour Date, and counts of tours/calls based on InquiryID (table gives us these by customer).",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD distinct",
                                  "\tDate(Floor(Min(InquiryDT))) as MinInquiryDT,",
                                  "    Date(Floor(Min(TourDT))) as InitialTourDate,",
                                  "    SUM(TourCount) as M_TotalTours,",
                                  "    SUM(CallCount) as M_TotalCalls,",
                                  "    Min(CustomerID) as MinCustomerID,",
                                  "    InquiryID as [%InquiryID],",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd]",
                                  "(qvd)",
                                  "Group by InquiryID, CommunityNumber;    ",
                                  "",
                                  "////Step 1.3: Grab referral contact info",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    ContactID,",
                                  "    Title,",
                                  "    Suffix",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 1.4: Grab IsEleadCorporationFlg",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    %OrganizationID,",
                                  "    IsEleadCorporationFlg",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 1.5: Grab ForeignLeadID (APFM, Caring.com ID they use in their system)",
                                  "Left Join(factInquiryByReferral)",
                                  "Load ",
                                  "\tCommunityNumber as %CommunityKey, ",
                                  "\tInquiryID as %InquiryID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    ForeignLeadID as eLeadID",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrInquiry.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 1.6: Get Resident Name",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD distinct",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    \"Resident\",",
                                  "    Gender",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                                  "////Step 2.1:  Get maximum reservation for each customer (Blitz Lists)",
                                  "ReservationTEMP:",
                                  "LOAD DISTINCT",
                                  "//     MAX(ReservationID) as %ReservationIDKey,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    InquiryID as %InquiryID,",
                                  "   date(floor(max(ReservationDT))) as ReservationDT",
                                  "//     RoomNumber as DesiredRoomNumber,",
                                  "//     ProductInventoryID,",
                                  "//     date(floor(MAX(DesiredDT))) as DesiredDT",
                                  "//     DepositAmount,",
                                  "//     RoomRate",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factReservation.qvd]",
                                  "(qvd)",
                                  "Group By CommunityNumber, CustomerID, InquiryID;",
                                  "",
                                  "////Step 2.2: For the Max date, get the Max Reservation ID (to eliminate any duplicates. Otherwise, left joining to the inquiry table would create duplicate records).",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD DISTINCT",
                                  "    MAX(ReservationID) as %ReservationIDKey,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    InquiryID as %InquiryID,",
                                  "   date(floor(ReservationDT)) as ReservationDT",
                                  "//     RoomNumber as DesiredRoomNumber,",
                                  "//     ProductInventoryID,",
                                  "//     date(floor(DesiredDT)) as DesiredDT",
                                  "//     DepositAmount,",
                                  "//     RoomRate",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factReservation.qvd]",
                                  "(qvd)",
                                  "Group By CommunityNumber, CustomerID, InquiryID, ReservationDT;",
                                  "",
                                  "////Step 2.3: Now that we have most effective reservation, grab the desired room number, etc.",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD DISTINCT",
                                  "    ReservationID as %ReservationIDKey,",
                                  "//     CommunityNumber as %CommunityKey,",
                                  "//     CustomerID as %CustomerIDKey,",
                                  "//     InquiryID as %InquiryID,",
                                  "//    date(floor(ReservationDT)) as ReservationDT,",
                                  "    RoomNumber as DesiredRoomNumber,",
                                  "    ProductInventoryID as DesiredProductInventoryID,",
                                  "    date(floor(DesiredDT)) as DesiredDT,",
                                  "    DepositAmount,",
                                  "    RoomRate as ReservationRoomRate,",
                                  "    Payor as ReservationPayor",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factReservation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 2.5: For the desired room, grab today\u0027s street and selling rate.",
                                  "LEFT JOIN (ReservationTEMP)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID as DesiredProductInventoryID,",
                                  "//     Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     PayorID,",
                                  "    Payor as ReservationPayor,",
                                  "    PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    PriceSpecial as M_Selling",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd)",
                                  "where Date(Floor(EffectiveDT)) = Date(Floor(Today()));",
                                  "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////",
                                  "////Step 2.6: Join the Reservation info to the InquiryByReferral table. (Blitz Lists)",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD DISTINCT *",
                                  "Resident ReservationTEMP;",
                                  "Drop Table ReservationTEMP;",
                                  "",
                                  "",
                                  "////Step 3.4: Is the customer Auto Apply Move In? (Blitz Lists)",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     LeaseXml,",
                                  "//     CreateDT,",
                                  "    IsAutoApplyFlg",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_AutoApply.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 3.5: How many assessments? (Blitz Lists)",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    ResidentAssessmentCount,",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare/QVD Extract/QVD_Extract_ResidentAssessmentByCustomerCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "",
                                  "////Step 3.7: Most Recent Deposit Info",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD",
                                  "    Date(Floor(CreateDT)) as DepositMaxCreateDT,",
                                  "    DepositAmount as MaxDepositAmount,",
                                  "    IF(CloseFlg=1, \u0027Closed\u0027, \u0027Open\u0027) as MaxReservationCloseStatus,",
                                  "    Reason as MaxReservationCloseReason,",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    CommunityNumber as [%CommunityKey]",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd]",
                                  "(qvd)",
                                  "Where ReservationCreateRank=1;",
                                  "",
                                  "////Step 3.10: Get current status ranking for database advancements",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "//     StatusID,",
                                  "    Status,",
                                  "    StatusRank as StatusRankCurrent",
                                  "FROM [lib://DataShare/.xls Library\\Sales\\Inquiry Status Rank.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "////Step 3.11: Get Status and Status Rank from last week",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    LastStatusEffectiveDT,",
                                  "    StatusLastWeek,",
                                  "    StatusRankLastWeek",
                                  "Resident OneWeekPriorStatus;",
                                  "Drop Table OneWeekPriorStatus;",
                                  "",
                                  "////Step 3.12: Get Status and Status Rank from 30 days ago",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    LastStatusEffectiveDT,",
                                  "    Status30Days,",
                                  "    StatusRank30Days",
                                  "Resident ThirtyDaysPriorStatus;",
                                  "Drop Table ThirtyDaysPriorStatus;",
                                  "",
                                  "////Step 3.13: Get Status and Status Rank from 90 days ago",
                                  "Left Join (factInquiryByReferral)",
                                  "LOAD",
                                  "    %InquiryID,",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    LastStatusEffectiveDT,",
                                  "    Status90Days,",
                                  "    StatusRank90Days",
                                  "Resident NinetyDaysPriorStatus;",
                                  "Drop Table NinetyDaysPriorStatus;",
                                  "",
                                  "",
                                  "////Step 3.14: Flag potential duplicates",
                                  "Left Join(factInquiryByReferral)",
                                  "LOAD CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    IF(EmailCount \u003e CustomerCount, \u0027Email\u0027) \u0026 IF(EmailCount \u003e CustomerCount AND PhoneCount \u003e CustomerCount, \u0027 \u0026 \u0027) \u0026 IF(PhoneCount \u003e CustomerCount, \u0027Phone\u0027) as PotentialDuplicateReason",
                                  ";",
                                  "SQL Select Division",
                                  "\t,Region",
                                  "\t,CommunityName as Community",
                                  "\t,factInquiryByReferral.CommunityNumber",
                                  "\t,factInquiryByReferral.InquiryID",
                                  "\t,CustomerID",
                                  "\t,Inquiry",
                                  "\t,Status",
                                  "\t,CustomerCount",
                                  "\t,EmailCount",
                                  "\t,PhoneCount",
                                  "\t,factInquiryByReferral.Email",
                                  "\t,factInquiryByReferral.PhoneCell",
                                  "FROM $(vInsightsData)Sales.factInquiryByReferral",
                                  "",
                                  "Left Join\t(Select CommunityNumber, CommunityName, Region, Division from $(vInsightsData)Master.mstrCommunity) mstrCommunity",
                                  "on\t\t\tmstrCommunity.CommunityNumber = factInquiryByReferral.CommunityNumber",
                                  "",
                                  "Left Join\t(Select InquiryID, Count(*) as CustomerCount from $(vInsightsData)Sales.factInquiryByReferral where Status not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Deceased\u0027) group by InquiryID) Customer",
                                  "on\t\t\tCustomer.InquiryID = factInquiryByReferral.InquiryID",
                                  "",
                                  "Left Join\t(Select Email, Count(*) as EmailCount from $(vInsightsData)Sales.factInquiryByReferral where LEN(Email) \u003e 0 and Status not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Deceased\u0027)",
                                  "\t\t\t\t\tgroup by Email) Email",
                                  "on\t\t\tEmail.Email = factInquiryByReferral.Email",
                                  "",
                                  "Left Join\t(Select PhoneCell, Count(*) as PhoneCount from $(vInsightsData)Sales.factInquiryByReferral where LEN(PhoneCell) \u003e 0 and Status not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Deceased\u0027) ",
                                  "\t\t\t\t\tand PhoneCell not like \u0027% 555-%\u0027 and PhoneCell not in (Select distinct PhoneNumber1 FROM $(vBusinessData).ARM.tblCommunity where LEN(PhoneNumber1) \u003e 0) group by PhoneCell) Phone",
                                  "on\t\t\tPhone.PhoneCell = factInquiryByReferral.PhoneCell",
                                  "",
                                  "where\t\tStatus not in (\u0027Moved In\u0027, \u0027Moved Back\u0027, \u0027Deceased\u0027)",
                                  "and\t\t\t(EmailCount \u003e CustomerCount or PhoneCount \u003e CustomerCount);",
                                  "",
                                  "Store [factInquiryByReferral] into [lib://DataShare/QVD Transform\\QVD_Transform_TEMPfactInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "drop tables [factInquiryByReferral];//, match_questions_join, temp_match;",
                                  "",
                                  "////Step 5: Logic (mostly for our Blitz Lists in the Marketing Key Indicators app)",
                                  "factInquiryByReferralFINAL:",
                                  "LOAD * ,",
                                  "\tIF(NOT(ISNULL(InitialTourDate)), \u0027Toured\u0027, \u0027Not Toured\u0027) as TourFlg,",
                                  "    IF(Status=\u0027Reserved\u0027, IF(IsAutoApplyFlg=1, \u0027Yes\u0027, \u0027No\u0027), NULL()) as AutoApply",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_TEMPfactInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Fields IsAutoApplyFlg",
                                  "\t\t\t//HasMilitaryBranch_temp, HasHobbies_temp, HasLanguage_temp, HasOccupation_temp, HasPet_temp, HasReligion_temp ",
                                  "            from factInquiryByReferralFINAL;",
                                  "",
                                  "",
                                  "Store [factInquiryByReferralFINAL] into [lib://DataShare/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "drop tables [factInquiryByReferralFINAL];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.3 Reservation Key Table (RVP Approval)",
        "LoadScriptContent":  [
                                  "///$tab 6.3 Reservation Key Table (RVP Approval)",
                                  "/*",
                                  "The purpose of this script is to decide, based on a series of logic, which reservation record ties to the move in. Then we can grab the HasRVPApprovalFlg.",
                                  "CustomerID, ProductInventoryID, and RoomRate usually will work, but ocassionally a customer could have multiple reservations with those details. We can\u0027t always",
                                  "join on DesiredDT = MoveInDT because in many cases these will not match perfectly. Therefore, if CustomerID + ProductInventoryID + RoomRate has only one instance, link on",
                                  "this. If it has multiple instances, then use DesiredDT as well.",
                                  "*/",
                                  "////Step 1.1: Create the keys from business data",
                                  "TEMPKeyTable:",
                                  "LOAD distinct CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey",
                                  "\t,CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT)) as ReservationDupKey",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID);",
                                  "",
                                  "////Step 1.2: Get count of instances for CustomerID + ProductInventoryID + RoomRate",
                                  "TEMP2KeyTable:",
                                  "LOAD CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026 Num(RoomRate) as ReservationKey",
                                  "\t,COUNT(ReservationID) as CountRecords",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID)",
                                  "Group by CustomerID, ProductInventoryID, RoomRate;",
                                  "",
                                  "",
                                  "////Step 1.3: Left Join count",
                                  "Left Join (TEMPKeyTable)",
                                  "LOAD * Resident TEMP2KeyTable;",
                                  "store TEMPKeyTable into [lib://DataShare/QVD Transform\\QVD_Transform_ReservationKeys.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table TEMP2KeyTable;",
                                  "drop table TEMPKeyTable;",
                                  "",
                                  "////Step 2.1: If one instance, keep ReservationKey. If more than one instance, keep ReservationDupKey (with DesiredDT)",
                                  "TEMP3KeyTable:",
                                  "LOAD distinct IF(CountRecords=1, ReservationKey, NULL()) as ReservationKey,",
                                  "\tIF(CountRecords\u003e1, ReservationDupKey, NULL()) as ReservationDupKey",
                                  "From [lib://DataShare/QVD Transform\\QVD_Transform_ReservationKeys.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 2.2: Create Table with only one instance",
                                  "KeyTable:",
                                  "LOAD ReservationKey",
                                  "Resident TEMP3KeyTable",
                                  "Where NOT(ISNULL(ReservationKey));",
                                  "",
                                  "INNER Join(KeyTable)",
                                  "LOAD",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey,",
                                  "// \tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT)) as ReservationDupKey,",
                                  "    IF(Max(HasRVPApprovalFlg)=1, \u0027Approved\u0027, IF(Max(HasRVPApprovalFlg)=0, \u0027Not Approved\u0027, \u0027Unknown\u0027)) as HasRVPApprovalFlgOne,",
                                  "    Date(Floor(Min(CreateDT))) as CreateDTOne,",
                                  "    Concat(RoomRateDeviationReason, \u0027; \u0027) as RoomRateDeviationReason",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID)",
                                  "Group By CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate);",
                                  "",
                                  "////Step 2.3: Create Table with only multiple instances",
                                  "KeyTableDups:",
                                  "LOAD ReservationDupKey",
                                  "Resident TEMP3KeyTable",
                                  "Where NOT(ISNULL(ReservationDupKey));",
                                  "Drop Table TEMP3KeyTable;",
                                  "",
                                  "INNER Join(KeyTableDups)",
                                  "LOAD",
                                  "// \tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey,",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT)) as ReservationDupKey,",
                                  "    IF(Max(HasRVPApprovalFlg)=1, \u0027Approved\u0027, IF(Max(HasRVPApprovalFlg)=0, \u0027Not Approved\u0027, \u0027Unknown\u0027)) as HasRVPApprovalFlgDup,",
                                  "    Date(Floor(Min(CreateDT))) as CreateDTDup,",
                                  "    Concat(RoomRateDeviationReason, \u0027; \u0027) as RoomRateDeviationReason",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd]",
                                  "(qvd)",
                                  "where CloseFlg=1 and ISNULL(ReasonID)",
                                  "Group By CustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(DesiredDT));"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.4  Revenue",
        "LoadScriptContent":  [
                                  "///$tab 6.4 *Revenue",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "////PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factProductPricing EXTRACT AND THE factInquiryByReferral TRANSFORM, SO IT MUST FOLLOW THOSE SECTIONS.",
                                  "////Step 0.1: Rename fields",
                                  "TEMPKEYfactRevenueByMoveIn:",
                                  "LOAD ",
                                  "\tDISTINCT",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) as ReservationKey,",
                                  "\tCustomerID \u0026 \u0027 - \u0027 \u0026 ProductInventoryID \u0026 \u0027 - \u0027 \u0026  Num(RoomRate) \u0026 \u0027 - \u0027 \u0026 Date(Floor(MoveInDt)) as ReservationDupKey,",
                                  "//\tRevenueByMoveInID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tCustomerID as %CustomerIDKey, ",
                                  "// \tBillingID, ",
                                  "\tResident, ",
                                  "\tdate(Floor(MoveInDt)) as [%DateKey],",
                                  "    date(floor(monthstart(MoveInDt))) as MoveInMonthStartDT,",
                                  "    IF(ISNULL(PhysicalMoveInDT), Date(Floor(MoveInDt)), Date(Floor(PhysicalMoveInDT))) as PhysicalMoveInDT,",
                                  "\tdate(Floor(MoveOutDt)) as MoveOutDate, ",
                                  "//     Floor(MoveOutDt)-Floor(MoveInDt) as DaysOfResidency,",
                                  "\tDayOfResidence, ",
                                  "\tPayorType, ",
                                  "\tCoalesce(CareTypeCode, CareType) as CareType, ",
                                  "\tRoomType, ",
                                  "\tRoomTypeStyle, ",
                                  "\tProductInventoryID,",
                                  "\tRoomNumber, ",
                                  "//\tBedNumber, ",
                                  "\tRevenue as M_RevenueAtMaturity, ",
                                  "\tRoomRate, ",
                                  "\tHospitality as HospitalityTemp, ",
                                  "    FoodTaxCharge as FoodTaxChargeTemp,",
                                  "\tAutomatedMoveInCharge as AutomatedMoveInChargeTemp, ",
                                  "\tAMCConcession as M_AMCConcessionTemp, ",
                                  "//\tCareLevel, ",
                                  "\tCareRate, ",
                                  "//\tSeries, ",
                                  "//\tCareAncillary, ",
                                  "\tCareAncillaryRate, ",
                                  "\tOtherBilling as OtherBillingTemp, ",
                                  "\tMoveInIncentiveConcession as M_MoveInAllowanceTemp, ",
                                  "\tRecurringAllowance as M_RecurringAllowanceTemp, ",
                                  "\tIsLeaseVerifyFlg,",
                                  "    isSpecializedPayorProgramFlg,",
                                  "    \u0027$(RMSLeaseManagement)\u0027 \u0026 CustomerID as RMSLeaseManagement",
                                  "                \t",
                                  "//\tCreateBy, ",
                                  "// \tCreateDT ",
                                  "//\tModifyBy, ",
                                  "//\tModifyDT, ",
                                  "// \tReplicaDT as RevenueByMoveInReplicaDT",
                                  "",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 0.2: Grab the HasRVPApprovalFlg and original deposit create date from the Reservation Key Tables",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD distinct * Resident KeyTable;",
                                  "Drop Table KeyTable;",
                                  "",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD distinct * Resident KeyTableDups;",
                                  "Drop Table KeyTableDups;",
                                  "",
                                  "////TEMP GENERAL LEDGER",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "TEMPGeneralLedger:",
                                  "LOAD CommunityNumber as [%CommunityKey],",
                                  "    Date(Floor(EffectiveDT)) as EffectiveDT,",
                                  "    LedgerEntryID,",
                                  "    ActualCost,",
                                  "    MonthlyCost,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    ProcessFlg;",
                                  "SQL SELECT CommunityNumber,",
                                  "    EffectiveDT,",
                                  "    LedgerEntryID,",
                                  "    ActualCost,",
                                  "    MonthlyCost,",
                                  "    ActiveFLG,",
                                  "    CustomerID,",
                                  "    ProcessFlg",
                                  "FROM $(vBusinessData).ARM.tblGeneralLedger",
                                  "",
                                  "Left Join (Select CommunityNumber, CommunityID from $(vBusinessData).ARM.tblCommunity) tblCommunity",
                                  "ON tblCommunity.CommunityID = tblGeneralLedger.CommunityID",
                                  "",
                                  "Where ActiveFLG=1",
                                  ";",
                                  "",
                                  "Left Join (TEMPGeneralLedger)",
                                  "LOAD [%CommunityKey],",
                                  "\t[%CustomerIDKey],",
                                  "    [%DateKey],",
                                  "    IF(ISNULL(MoveOutDate), Date(Floor(Date([%DateKey]+365))), MoveOutDate) as EndDT",
                                  "Resident TEMPKEYfactRevenueByMoveIn;",
                                  "",
                                  "",
                                  "TEMPGeneralLedger2:",
                                  "NoConcatenate",
                                  "LOAD *",
                                  "Resident TEMPGeneralLedger",
                                  "Where EffectiveDT\u003e= %DateKey and EffectiveDT \u003c= EndDT;",
                                  "Drop Table TEMPGeneralLedger;",
                                  "",
                                  "////Step 0.3: Calculate Hospitality",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as HospitalityDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM $(vBusinessData).BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM $(vBusinessData).BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (3)",
                                  "AND\t\t\tLedgerEntryID IN (65,66,86,126);",
                                  "",
                                  "////Step 0.4: Calculate FoodTaxCharge",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as FoodTaxChargeDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM $(vBusinessData).BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM $(vBusinessData).BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (3)",
                                  "AND\t\t\tLedgerEntryID IN (60,61);",
                                  "",
                                  "////Step 0.5: Calculate AutomatedMoveInCharge",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as AutomatedMoveInChargeDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM $(vBusinessData).BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM $(vBusinessData).BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (5)",
                                  "AND\t\t\tLedgerEntryID IN (7,58,81,91,127,161);",
                                  "",
                                  "////Step 0.6: Calculate AMCConcession",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD //MoveInRevenueID,",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    Date(Floor(MoveInDT)) as %DateKey,",
                                  "    SUM(AmountAtMaturity) as M_AMCConcessionDetail",
                                  "    Group By CustomerID, MoveInDT;",
                                  "SQL SELECT tblMoveInRevenue.MoveInRevenueID,",
                                  "    CustomerID,",
                                  "    MoveInDT,",
                                  "    RevenueEntryTypeID,",
                                  "    AmountAtMaturity,",
                                  "    LedgerEntryID,",
                                  "    ActiveFlg",
                                  "FROM $(vBusinessData).BonusPlan.tblMoveInRevenueDetail",
                                  "Inner Join (Select MoveInRevenueID, MoveInDT FROM $(vBusinessData).BonusPlan.tblMoveInRevenue where MoveInDT\u003e=\u0027$(vmindate2)\u0027) tblMoveInRevenue",
                                  "ON tblMoveInRevenue.MoveInRevenueID = tblMoveInRevenueDetail.MoveInRevenueID",
                                  "Where \t\tActiveFlg=1",
                                  "AND\t\t\tRevenueEntryTypeID IN (5)",
                                  "AND\t\t\tLedgerEntryID IN (33,59,82,89,128,162);",
                                  "",
                                  "",
                                  "////Step 0.7: Calculate OtherBilling",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as OtherBillingDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 4, 5, 15, 16, 17, 18, 19, 20, 35, 37, 40, 44, 46, 67, 71, 76, 84, 85, 94, 150, 158)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "////Step 0.8: Calculate MoveInIncentiveConcession",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_MoveInAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 97,100)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "////Step 0.9: Calculate M_RentAllowance",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_RentAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 101,143, 99, 163, 32, 142)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "////Step 0.10: Calculate M_RentRecurringAllowance",
                                  "//Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "//LOAD",
                                  "//    [%CustomerIDKey],",
                                  "//    %DateKey,",
                                  "//    SUM(ActualCost) as M_RentRecurringAllowanceDetail",
                                  "//Resident TEMPGeneralLedger2",
                                  "//Where WildMatch(LedgerEntryID, 99,163,32,142)",
                                  "//Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "////Step 0.11: Calculate M_CareAllowance",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_CareAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 25,47,124,29)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "",
                                  "////Step 0.12: Calculate M_CareRecurringAllowance",
                                  "//Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "//LOAD",
                                  "//    [%CustomerIDKey],",
                                  "//    %DateKey,",
                                  "//    SUM(ActualCost) as M_CareRecurringAllowanceDetail",
                                  "//Resident TEMPGeneralLedger2",
                                  "//Where WildMatch(LedgerEntryID, 29)",
                                  "//Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "////Step 0.13: Calculate M_SupplementalAllowance",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_SupplementalAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 98)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "////Step 0.14: Calculate Pre-Move In Allowance",
                                  "Left Join (TEMPKEYfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    [%CustomerIDKey],",
                                  "    %DateKey,",
                                  "    SUM(ActualCost) as M_PreMoveInAllowanceDetail",
                                  "Resident TEMPGeneralLedger2",
                                  "Where WildMatch(LedgerEntryID, 349)",
                                  "Group By [%CustomerIDKey], %DateKey;",
                                  "",
                                  "Drop Table TEMPGeneralLedger2;",
                                  "",
                                  "",
                                  "////Step 1.1: set rvp approval and create date values",
                                  "TEMPfactRevenueByMoveIn:",
                                  "LOAD\t",
                                  "\tReservationKey,",
                                  "\tReservationDupKey,",
                                  "\t[%CommunityKey], ",
                                  "\t%CustomerIDKey, ",
                                  "\tResident, ",
                                  "\t[%DateKey],",
                                  "    PhysicalMoveInDT,",
                                  "    MoveInMonthStartDT,",
                                  "\tMoveOutDate, ",
                                  "\tDayOfResidence, ",
                                  "\tPayorType, ",
                                  "\tCareType, ",
                                  "\tRoomType, ",
                                  "    RoomTypeStyle,",
                                  "\tProductInventoryID,",
                                  "\tRoomNumber, ",
                                  "\tM_RevenueAtMaturity, ",
                                  "\tRoomRate, ",
                                  "\tCoalesce(HospitalityDetail, HospitalityTemp) as Hospitality, ",
                                  "\tCoalesce(FoodTaxChargeDetail, FoodTaxChargeTemp) as FoodTaxCharge, ",
                                  "\tCoalesce(AutomatedMoveInChargeDetail, AutomatedMoveInChargeTemp) as AutomatedMoveInCharge, ",
                                  "\tCoalesce(M_AMCConcessionDetail, M_AMCConcessionTemp) as M_AMCConcession, ",
                                  "\tCareRate, ",
                                  "\tCareAncillaryRate, ",
                                  "\tOtherBillingDetail as OtherBilling, ",
                                  "\tM_MoveInAllowanceDetail as M_MoveInAllowance, ",
                                  "\tM_RentAllowanceDetail as M_RentAllowance, ",
                                  "//    M_RentRecurringAllowanceDetail as M_RentRecurringAllowance,",
                                  "    M_CareAllowanceDetail as M_CareAllowance,",
                                  "//    M_CareRecurringAllowanceDetail as M_CareRecurringAllowance,",
                                  "    M_SupplementalAllowanceDetail as M_SupplementalAllowance,",
                                  "    M_PreMoveInAllowanceDetail as M_PreMoveInAllowance,",
                                  "\tIsLeaseVerifyFlg,",
                                  "    isSpecializedPayorProgramFlg,",
                                  "    IF(NOT(ISNULL(HasRVPApprovalFlgOne)), HasRVPApprovalFlgOne, IF(NOT(ISNULL(HasRVPApprovalFlgDup)), HasRVPApprovalFlgDup, \u0027Unknown\u0027)) as HasRVPApprovalFlg,",
                                  "    RoomRateDeviationReason,",
                                  "    Date(Floor(RangeMin(CreateDTOne, CreateDTDup))) as ReservationCreateDT,",
                                  "    RMSLeaseManagement",
                                  "Resident TEMPKEYfactRevenueByMoveIn;",
                                  "",
                                  "Drop Table TEMPKEYfactRevenueByMoveIn;",
                                  "",
                                  "////Step 1.2: Grab Street/Selling Rate of the room on the move in date.",
                                  "LEFT JOIN (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    PriceSpecial as M_Selling",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 1.5: Grab relevant inquiry information",
                                  "Left Join(TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %InquiryID,",
                                  "    %CustomerIDKey,",
                                  "    ContactID,",
                                  "    DateOfInquiry,",
                                  "    Status,",
                                  "    ActiveCRMStatus, ",
                                  "    InquiryPostalCode,",
                                  "    InquiryPhoneHome,",
                                  "    InquiryPhoneWork,",
                                  "    InquiryPhoneCell,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    %OrganizationID,",
                                  "    IsEleadCorporationFlg,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy,",
                                  "    IsSelfAssessment,",
                                  "    LostCategory,",
                                  "    InquiryCreateBy,",
                                  "    IsEleadFlg,",
                                  "    MinInquiryDT,",
                                  "    MinInquiryDT as MonthStartMinInquiryDT,//Database Advancements sheet to be in Sales VP app",
                                  "    InitialTourDate,",
                                  "    MinCustomerID,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    M_TotalTours,",
                                  "    [Inquirer Dashboard]",
                                  "//     M_ContactAttempts",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 1.6: Get Move Out information, if applicable",
                                  "Left Join(TEMPfactRevenueByMoveIn)",
                                  "LOAD ",
                                  "DISTINCT",
                                  "//     factResidentMoveOutID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "//     LocationType,",
                                  "    Location,",
                                  "    Date(Floor(MoveOutDT)+1) as MoveOutDate, ////Add 1 to the date so it matches with move out date in bonus plan (physical v. financial move out)",
                                  "    MoveOutReason,",
                                  "    Note as MoveOutNote",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentMoveOut.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join (TEMPfactRevenueByMoveIn)",
                                  "LOAD",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    DATE(FLOOR(BirthDT)) as DOB",
                                  "FROM [lib://DataShare/QVD Extract/QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "Left Join (TEMPfactRevenueByMoveIn)",
                                  "LOAD ",
                                  "\tCustomerID as [%CustomerIDKey],",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     RateLockID,",
                                  "    if(Status = \u0027Active\u0027 and RateLockEndDT\u003c Date(today()), \u0027End\u0027,Status) as RateLockStatus,",
                                  "//     RoomRate,",
                                  "//     RoomNumber,",
                                  "    Date(floor(RateLockStartDT)) as RateLockStartDT,",
                                  "    Date(floor(RateLockStartDT)) as [%DateKey],",
                                  "    if(Status = \u0027End\u0027 and RateLockEndDT \u003e Date(today()), Date(floor(ModifyDT)), Date(floor(RateLockEndDT))) as RateLockEndDT",
                                  "Where RateLockRank = 1;",
                                  "SQL SELECT factResidentRateLockID,",
                                  "    CustomerID,",
                                  "    CommunityNumber,",
                                  "    factResidentRateLock.RateLockID,",
                                  "    Status,",
                                  "    RoomRate,",
                                  "    RoomNumber,",
                                  "    RateLockStartDT,",
                                  "    RateLockEndDT,",
                                  "    ModifyDT,",
                                  "    Rank() Over (partition by CommunityNumber, CustomerID order by factResidentRateLock.RateLockID desc) as RateLockRank",
                                  "FROM $(vInsightsData)Resident.factResidentRateLock",
                                  "left join (SELECT RateLockID, ModifyDT FROM $(vBusinessData).ARM.tblRateLock) tblRateLock",
                                  "on tblRateLock.RateLockID = factResidentRateLock.RateLockID",
                                  ";",
                                  "",
                                  "",
                                  "",
                                  "Store [TEMPfactRevenueByMoveIn] into [lib://DataShare/QVD Transform\\QVD_Transform_TEMPfactRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [TEMPfactRevenueByMoveIn];",
                                  "",
                                  "",
                                  "////Step 2: Create Variances for Compliance",
                                  "TEMP2factRevenueByMoveIn:",
                                  "Load",
                                  "*,",
                                  "\tFloor(Age(%DateKey, DOB), 1) as AgeAtMoveIn,",
                                  "\tIF(MonthStartMinInquiryDT\u003cMoveInMonthStartDT or ISNULL(MinInquiryDT), \u0027Database\u0027, \u0027Newly Acquired\u0027) as DatabaseMoveInFlg,",
                                  "    RangeSum(RoomRate , Hospitality , FoodTaxCharge) as M_MoveInRate,",
                                  "    IF((date(floor(%DateKey))-date(floor(MinInquiryDT)))\u003e365,\u0027\u0027, IF(date(floor((%DateKey))-date(floor(MinInquiryDT)))\u003c0,\u0027\u0027, date(floor(%DateKey))-date(floor(MinInquiryDT)))) as M_InquiryToMoveInDays,",
                                  "    IF((date(floor(%DateKey))-date(floor(InitialTourDate)))\u003e365, \u0027\u0027, IF(date(floor((%DateKey))-date(floor(InitialTourDate)))\u003c0, \u0027\u0027, date(floor(%DateKey))-date(floor(InitialTourDate)))) as M_TourToMoveInDays",
                                  "",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_TEMPfactRevenueByMoveIn.qvd]",
                                  "(qvd); ",
                                  "",
                                  "Drop Fields ReservationKey, ReservationDupKey, DOB from TEMP2factRevenueByMoveIn;",
                                  "",
                                  "",
                                  "factRevenueByMoveIn:",
                                  "NoConcatenate",
                                  "LOAD ",
                                  "*,",
                                  "\tRound(M_MoveInRate / M_Selling, .01) as CompliancePercent,",
                                  "    IF(M_Selling = 0 or ISNULL(M_Selling), ",
                                  "    \t\u0027Unknown\u0027,",
                                  "    \tIF(Round((M_MoveInRate / M_Selling), .01) \u003e= \u0027$(vMinCompliance)\u0027 and Round((M_MoveInRate / M_Selling), .01) \u003c= \u0027$(vMaxCompliance)\u0027, ",
                                  "    \t\t\u0027Compliant\u0027,",
                                  "    \t\tIF(Round((M_MoveInRate / M_Selling), .01) \u003c \u0027$(vMinCompliance)\u0027, ",
                                  "            \t\u0027Discount\u0027,",
                                  "                \u0027Upsell\u0027",
                                  "\t\t\t)",
                                  "\t\t)",
                                  "\t) as ComplianceCategory,",
                                  "    \u0027$(vMinCompliance)\u0027 as MinCompliance,",
                                  "    \u0027$(vMaxCompliance)\u0027 as MaxCompliance",
                                  "Resident TEMP2factRevenueByMoveIn;",
                                  "Drop Table TEMP2factRevenueByMoveIn;",
                                  "\t",
                                  "",
                                  "Store [factRevenueByMoveIn] into [lib://DataShare/QVD Transform\\QVD_Transform_factRevenueByMoveIn.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [factRevenueByMoveIn];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.5  Reservations",
        "LoadScriptContent":  [
                                  "///$tab 6.5 *Reservations",
                                  "////PLEASE NOTE: THIS SCRIPT IS DEPENDENT ON THE factProductPricing EXTRACT, SO IT MUST FOLLOW THAT SECTION.",
                                  "////Step 1: Rename fields and clean up date format",
                                  "mstrReservation:",
                                  "LOAD",
                                  "//     factReservationID,",
                                  "    ReservationID as [%ReservationIDKey],",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    ReservationDT,",
                                  "//     Level,",
                                  "    RoomNumber,",
                                  "//     BedNumber,",
                                  "    ProductInventoryID,",
                                  "    Date(Floor(DesiredDT)) as %DateKey,",
                                  "    DepositAmount,",
                                  "    RoomRate,",
                                  "    Payor as PayorType,",
                                  "    Date(Floor(CompleteAssessmentDT)) as CompleteAssessmentDT,",
                                  "    Date(Floor(PendingAssessmentDT)) as PendingAssessmentDT,",
                                  "    Date(Floor(PendingMoveInDT)) as PendingMoveInDT // Pending Transactions on RMS Home page",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factReservation.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 2: grab resident name and statusid (should we really grab status?)",
                                  "Left Join (mstrReservation)",
                                  "LOAD distinct",
                                  "//            KeyID, ",
                                  "               CustomerID as [%CustomerIDKey], ",
                                  "//            CommunityID, ",
                                  "// \t\t\t   CommunityNumber as %CommunityKey,",
                                  "//            InquiryID, ",
                                  "//            BillingID, ",
                                  "               Resident as Customer",
                                  "//            Address1, ",
                                  "//            Address2, ",
                                  "//            City, ",
                                  "//            State, ",
                                  "//            PostalCode, ",
                                  "//            Country, ",
                                  "//            Longitude, ",
                                  "//            Latitude, ",
                                  "//             StatusID ",
                                  "//            Gender, ",
                                  "//            BirthDT, ",
                                  "//            CreateDT, ",
                                  "//            ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Step 3: Grab Street/Selling Rate today for the reservation based on payor type of the reservation.",
                                  "LEFT JOIN (mstrReservation)",
                                  "LOAD",
                                  "//     factProductPricingID,",
                                  "//     CommunityNumber,",
                                  "    ProductInventoryID,",
                                  "//     Date(Floor(EffectiveDT)) as %DateKey,",
                                  "//     PayorID,",
                                  "    Payor as PayorType,",
                                  "    PriceBase as M_Street,",
                                  "//     PriceGross,",
                                  "    PriceSpecial as M_Selling",
                                  "//     IsExistFlg,",
                                  "//     ReplicatDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factProductPricing.qvd]",
                                  "(qvd)",
                                  "where Date(Floor(EffectiveDT)) = Date(Floor(Today()));",
                                  "",
                                  "////Step 4: Grab Create DT for the reservation (ReservationDT is actually the ModifyDT)",
                                  "LEFT JOIN (mstrReservation)",
                                  "LOAD",
                                  "    ReservationID as [%ReservationIDKey],",
                                  "    Date(Floor(CreateDT)) as ReservationCreateDT,",
                                  "    Note as ReservationNote,",
                                  "    RateLockFlg,",
                                  "    IF(WildMatch(RateLockFlg, 1), \u0027Yes\u0027, \u0027No\u0027) as RateLock,",
                                  "    Date(Floor(RateLockEndDT)) as RateLockEndDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 5: Grab Room Type",
                                  "LEFT JOIN (mstrReservation)",
                                  "LOAD",
                                  "    ProductInventoryID,",
                                  "    RoomType,",
                                  "    RoomTypeStyle,",
                                  "    RoomTypeCode,",
                                  "    RoomTypeStyleCode,",
                                  "    CareTypeCode as CareType",
                                  "FROM [lib://DataShare/QVD Extract/QVD_Extract_mstrProductInventory.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 6: Grab Referral Information",
                                  "Left Join(mstrReservation)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %InquiryID,",
                                  "    %CustomerIDKey,",
                                  "    DateOfInquiry,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    %OrganizationID,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrReservation] into [lib://DataShare/QVD Transform\\QVD_Transform_factReservation.qvd]",
                                  "(qvd);",
                                  "drop Table [mstrReservation];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.6 Tour Activity",
        "LoadScriptContent":  [
                                  "///$tab 6.6 Tour Activity",
                                  "////Step 1: Rename fields",
                                  "factInquiryTourActivity:",
                                  "LOAD",
                                  "    factInquiryTourActivityID,",
                                  "    InquiryJournalID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    InquiryID as [%InquiryID],",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  " \tEffectiveTM as JournalTime,",
                                  "    Objective,",
                                  "    FollowUpInquiryJournalID,",
                                  "    FollowUpJournalTypeID,",
                                  "    Date(Floor(FollowUpEffectiveDT)) as FollowUpEffectiveDT,",
                                  "    isTourCloseFlg,",
                                  "    isFollowUpCloseFlg,",
                                  "    MessageStateID,",
                                  "    MessageState,",
                                  "    MessageColor,",
                                  "    MessageDescription,",
                                  "    \u0027$(InquirerDashboard)\u0027 \u0026 InquiryID \u0026 \u0027/\u0027 \u0026 CommunityNumber \u0026 \u0027?CustomerID=\u0027 \u0026 CustomerID as [Inquirer Dashboard]",
                                  "",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryTourActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 2: Grab information from factInquiryByReferral",
                                  "Left Join(factInquiryTourActivity)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    %InquiryID,",
                                  "    Status,",
                                  "    %OrganizationID,",
                                  "    ContactID,",
                                  "    \"Inquirer Dashboard\",",
                                  "    DateOfInquiry,",
                                  "    ActiveCRMStatus,",
                                  "    InquiryName,",
                                  "    InquiryAddress,",
                                  "    InquiryAddress2,",
                                  "    InquiryCity,",
                                  "    InquiryState,",
                                  "    InquiryPostalCode,",
                                  "    InquiryCountry,",
                                  "    InquiryEmail,",
                                  "    InquiryPhoneHome,",
                                  "    InquiryPhoneWork,",
                                  "    InquiryPhoneCell,",
                                  "    RelationToCustomer,",
                                  "    ReferralBucket,",
                                  "    ReferralBucketShort,",
                                  "    ReferralCategory,",
                                  "    Organization,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralBucket,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization,",
                                  "    SecondaryReferredBy,",
                                  "    IsSelfAssessment,",
                                  "    LostCategory,",
                                  "    AllowContactMailFlg,",
                                  "    CareType,",
                                  "    RoomType,",
                                  "    InquiryCreateBy,",
                                  "    IsEleadFlg,",
                                  "    InquiryCreateTime",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [factInquiryTourActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_factInquiryTourActivity.qvd]",
                                  "(qvd);",
                                  "drop table [factInquiryTourActivity];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "6.7 store JournalActivity",
        "LoadScriptContent":  [
                                  "///$tab 6.7 store JournalActivity",
                                  "/// grab pertinent information now that factInquiryByReferral transformation is completed.",
                                  "Left Join(JournalActivity)",
                                  "LOAD",
                                  "    %CommunityKey,",
                                  "    %CustomerIDKey,",
                                  "    %InquiryID,",
                                  "    Status,",
                                  "    %OrganizationID,",
                                  "    ContactID,",
                                  "    \"Inquirer Dashboard\",",
                                  "    DateOfInquiry,",
                                  "    ActiveCRMStatus,",
                                  "    InquiryName,",
                                  "    InquiryAddress,",
                                  "    InquiryAddress2,",
                                  "    InquiryCity,",
                                  "    InquiryState,",
                                  "    InquiryPostalCode,",
                                  "    InquiryCountry,",
                                  "    InquiryEmail,",
                                  "    InquiryPhoneHome,",
                                  "    InquiryPhoneWork,",
                                  "    InquiryPhoneCell,",
                                  "    RelationToCustomer,",
                                  "    ReferralBucket as ReferralBucketTemp,",
                                  "    ReferralBucketShort as ReferralBucketShortTemp,",
                                  "    ReferralCategory as ReferralCategoryTemp,",
                                  "    Organization as OrganizationTemp,",
                                  "    ReferredBy as ReferredByTemp,",
                                  "    SecondaryReferralBucket as SecondaryReferralBucketTemp,",
                                  "    SecondaryOrganizationID,",
                                  "    SecondaryOrganization as SecondaryOrganizationTemp,",
                                  "    SecondaryReferredBy as SecondaryReferredByTemp,",
                                  "    IsSelfAssessment,",
                                  "    LostCategory,",
                                  "    LostInfluence,",
                                  "    AllowContactPhoneFlg,",
                                  "    AllowContactMailFlg,",
                                  "    AllowContactEmailFlg,",
                                  "    CareType,",
                                  "    RoomType,",
                                  "    MoveInDate,",
                                  "    InquiryCreateBy,",
                                  "    IsEleadFlg,",
                                  "    InquiryCreateTime,",
                                  "    Title,",
                                  "    Suffix,",
                                  "    IsEleadCorporationFlg,",
                                  "    eLeadID",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_factInquiryByReferral.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Field ELeadFlg from JournalActivity; //dropping journal elead source flag to avoid confusion with inquiry IsEleadFlg",
                                  "",
                                  "JournalActivityFINAL:",
                                  "NoConcatenate",
                                  "LOAD \t\tIF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, ReferralBucketTemp) as ReferralBucket, ",
                                  "\t\t\tIF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, ReferralBucketShortTemp) as ReferralBucketShort,",
                                  "            IF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, ReferralCategoryTemp) as ReferralCategory,",
                                  "            IF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, OrganizationTemp) as Organization,",
                                  "            IF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, ReferredByTemp) as ReferredBy,",
                                  "            IF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, SecondaryReferralBucketTemp) as SecondaryReferralBucket,",
                                  "            IF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, SecondaryOrganizationTemp) as SecondaryOrganization,",
                                  "            IF(ISNULL(ReferralBucketTemp), \u0027Inquired prior to \u0027 \u0026 \u0027$(vmindate2)\u0027, SecondaryReferredByTemp) as SecondaryReferredBy,",
                                  "\t* ",
                                  "Resident JournalActivity;",
                                  "Drop Table JournalActivity;",
                                  "Drop Fields ReferralBucketTemp,",
                                  "\t\t\tReferralBucketShortTemp,",
                                  "            ReferralCategoryTemp,",
                                  "            OrganizationTemp,",
                                  "            ReferredByTemp,",
                                  "            SecondaryReferralBucketTemp,",
                                  "            SecondaryOrganizationTemp,",
                                  "            SecondaryReferredByTemp",
                                  "            from JournalActivityFINAL;",
                                  "",
                                  "////Needed Journal Note above to get the Journal Length Flg (are we still using this field?), but don\u0027t want to load into our final Journal Transform QVD because of space",
                                  "// drop Field JournalLengthFlg From  JournalActivity;",
                                  "Store [JournalActivityFINAL] into [lib://DataShare/QVD Transform\\QVD_Transform_JournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table [JournalActivityFINAL];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Active Status",
        "LoadScriptContent":  [
                                  "///$tab Active Status",
                                  "ActiveStatus:",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "LOAD ResidentStatus as ActiveStatusList;",
                                  "SQL SELECT luResidentStatus.ResidentStatusID,",
                                  "    ResidentStatus,",
                                  "    luResidentStatus.ActiveFlg",
                                  "FROM $(vBusinessData).ARM.luResidentStatus",
                                  "Inner Join (Select ResidentStatusID FROM $(vBusinessData).Core.lnkResidentStatusToCategory where ActiveFlg=1 and ResidentStatusCategoryID=3) lnkResidentStatusToCategory",
                                  "on lnkResidentStatusToCategory.ResidentStatusID = luResidentStatus.ResidentStatusID",
                                  "Where luResidentStatus.ActiveFlg=1",
                                  ";",
                                  "",
                                  "store [ActiveStatus] into [lib://DataShare/QVD Extract\\QVD_Extract_ActiveStatus.qvd](qvd);",
                                  "// drop table ActiveStatus;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "ADL",
        "LoadScriptContent":  [
                                  "///$tab ADL",
                                  "map_service_code: mapping LOAD ServiceCodeID, Description as ServiceCodeDescription; SQL SELECT * FROM $(vBusinessData).ACM.luServiceCode Where ActiveFlg = 1;",
                                  "",
                                  "// map_adl_type: mapping LOAD ADLTypeID, ADLType as ADLTypeTemp",
                                  "// FROM [lib://DataShare/QVD Extract\\QVD_Extract_luADLType.qvd] (qvd);",
                                  "",
                                  "map_process_reason: mapping LOAD ResidentADLProcessReasonID, ResidentADLProcessReason;",
                                  "SQL SELECT",
                                  "\tResidentADLProcessReasonID,",
                                  "\tResidentADLProcessReason",
                                  "FROM $(vBusinessData).CareManagement.luResidentADLProcessReason",
                                  "WHERE ActiveFlg = 1;",
                                  "",
                                  "fact_ADL:",
                                  "LOAD  ResidentADLID as ADLID, ",
                                  "      %CustomerIDKey,",
                                  "      Description as TaskDescription,",
                                  "      Date(Floor(ADLDT)) as %DateKey,",
                                  "      Hour(TimeStamp(ADLDT)) as ADLHour,",
                                  "      Trim(Timestamp(ADLDT, \u0027h:00 TT\u0027)) as TaskHour, ",
                                  "      ADLDT,",
                                  "      Date(Floor(CreateDT)) as ADLTaskCreateDT,",
                                  "      ADLTime,",
                                  "      Date(Floor(ExpireDT)) as ADLTaskExpireDT,",
                                  "      ADLTypeID,",
                                  "      ApplyMap(\u0027map_service_code\u0027, ServiceCodeID) as ServiceCodeDescription,",
                                  "      ApplyMap(\u0027map_process_reason\u0027, ResidentADLProcessReasonID) as ResidentADLProcessReason,",
                                  "      IF(ADLDT \u003e Now(), 1, 0) as UpcomingTaskFlg,",
                                  "      IF(WeekStart(Date(ADLDT)) = WeekStart(Today()), 1, 0) as TaskCurrentWeekFlg,",
                                  "      ADLStatusID,",
                                  "      ADLType,",
                                  "      ServiceCodeID,",
                                  "      CommunityResourceRoleID,",
                                  "      IF(IsNull(CommunityResourceRoleID),1,0) as UnassignedFlg, ",
                                  "      IF(Date(Floor(ADLDT)) = Today(), 1, 0) as TaskTodayFlg,",
                                  "      IF(HOUR(ADLDT) \u003e= 7 AND HOUR(ADLDT) \u003c= 14, \u0027Day\u0027,",
                                  "      IF(HOUR(ADLDT) \u003e= 15 AND HOUR(ADLDT) \u003c= 22, \u0027Evening\u0027,",
                                  "      IF(HOUR(ADLDT) \u003e= 23 OR HOUR(ADLDT) \u003c= 6, \u0027Night\u0027,\u0027\u0027))) as TaskShift,",
                                  "      CommunityResourceRole ",
                                  "      WHERE not isNull(ResidentADLID);",
                                  "SQL SELECT DISTINCT",
                                  "ResidentADLID,",
                                  "tblResidentADL.CustomerID AS \"%CustomerIDKey\",",
                                  "tblResidentADL.CommunityID,",
                                  "tblResidentADL.Description,",
                                  "ADLDT,",
                                  "tblResidentADL.CreateBy,",
                                  "",
                                  "tblResidentADL.CreateDT,",
                                  "ExpireDT,",
                                  "tblResidentADL.ADLTime,",
                                  "ResidentADLProcessReasonID,",
                                  "ADLTypeID,",
                                  "ADLStatusID,",
                                  "tblResidentADL.ServiceCodeID,",
                                  "tblResidentADL.CommunityResourceRoleID,",
                                  "CASE \tWHEN $(vBusinessData).ACM.tblResidentADL.ADLTypeID = 1 THEN \u0027Resident Assessed Task\u0027 ",
                                  " \t\tWHEN $(vBusinessData).ACM.tblResidentADL.ADLTypeID = 2 AND $(vBusinessData).ACM.tblResidentADL.CustomScheduleADLID IS NULL THEN \u0027Resident Ad-Hoc Task\u0027 ",
                                  " \t\tWHEN $(vBusinessData).ACM.tblResidentADL.ADLTypeID = 2 AND $(vBusinessData).ACM.tblResidentADL.CustomScheduleADLID IS NOT NULL THEN \u0027Resident Additional Task\u0027",
                                  "\t\tELSE \u0027Community Task\u0027 END AS ADLType,",
                                  "",
                                  "CASE\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002707:00:00.0000000\u0027 AND \u002714:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentADL.CommunityResourceRoleID IS NOT NULL AND tblResidentScheduleADL.ResourceRole IS NOT NULL THEN tblResidentScheduleADL.ResourceRole + \u0027 Days\u0027",
                                  "\t\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002715:00:00.0000000\u0027 AND \u002722:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentADL.CommunityResourceRoleID IS NOT NULL AND tblResidentScheduleADL.ResourceRole IS NOT NULL THEN tblResidentScheduleADL.ResourceRole + \u0027 Evenings\u0027",
                                  "\t\tWHEN (CAST(ADLDT AS TIME) BETWEEN \u002723:00:00.0000000\u0027 AND \u002723:45:00.0000000\u0027 OR CAST(ADLDT AS TIME) BETWEEN \u002700:00:00.0000000\u0027 AND \u002706:45:00.0000000\u0027) AND tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentADL.CommunityResourceRoleID IS NOT NULL AND tblResidentScheduleADL.ResourceRole IS NOT NULL THEN tblResidentScheduleADL.ResourceRole + \u0027 Nights\u0027",
                                  "\t\tWHEN tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentScheduleADL.ResourceRole IS NULL THEN \u0027Unassigned\u0027",
                                  "\t\tELSE tblCommunityResourceRole.ResourceRole END AS CommunityResourceRole",
                                  "FROM $(vBusinessData).ACM.tblResidentADL",
                                  "LEFT JOIN\t$(vBusinessData).ACM.tblCommunityResourceRole tblCommunityResourceRole",
                                  "ON\t\t\ttblCommunityResourceRole.CommunityResourceRoleID = tblResidentADL.CommunityResourceRoleID",
                                  "LEFT JOIN\t$(vBusinessData).ACM.trnResidentScheduleADL tblResidentScheduleADL",
                                  "ON\t\t\ttblResidentScheduleADL.ResidentScheduleID = tblResidentADL.ResidentScheduleID AND tblResidentScheduleADL.ModelQuestionID = tblResidentADL.ModelQuestionID AND tblResidentScheduleADL.ModelAnswerID = tblResidentADL.ModelAnswerID",
                                  "LEFT JOIN   $(vBusinessData).ACM.luResourceRole",
                                  "ON\t\t\tluResourceRole.ResourceRoleID = tblCommunityResourceRole.ResourceRoleID",
                                  "",
                                  "WHERE CAST(ADLDT AS DATE) \u003e=\u0027$(vmindatetasks)\u0027 and CAST(ADLDT AS DATE) \u003c=\u0027$(vmaxdatetasks)\u0027",
                                  "AND tblResidentADL.ActiveFlg = 1",
                                  "",
                                  "",
                                  "UNION",
                                  "",
                                  "SELECT DISTINCT",
                                  "ResidentADLID,",
                                  "trnResidentADL.CustomerID AS \"%CustomerIDKey\",",
                                  "trnResidentADL.CommunityID,",
                                  "trnResidentADL.Description,",
                                  "ADLDT,",
                                  "trnResidentADL.CreateBy,",
                                  "trnResidentADL.CreateDT,",
                                  "ExpireDT,",
                                  "trnResidentADL.ADLTime,",
                                  "ResidentADLProcessReasonID,",
                                  "ADLTypeID,",
                                  "ADLStatusID,",
                                  "trnResidentADL.ServiceCodeID,",
                                  "trnResidentADL.CommunityResourceRoleID,",
                                  "CASE \tWHEN $(vBusinessData).ACM.trnResidentADL.ADLTypeID = 1 THEN \u0027Resident Assessed Task\u0027 ",
                                  "\t\tWHEN $(vBusinessData).ACM.trnResidentADL.ADLTypeID = 2 AND $(vBusinessData).ACM.trnResidentADL.CustomScheduleADLID IS NULL THEN \u0027Resident Ad-Hoc Task\u0027 ",
                                  "\t\tWHEN $(vBusinessData).ACM.trnResidentADL.ADLTypeID = 2 AND $(vBusinessData).ACM.trnResidentADL.CustomScheduleADLID IS NOT NULL THEN \u0027Resident Additional Task\u0027",
                                  "\t\tELSE \u0027Community Task\u0027 END AS ADLType,",
                                  "",
                                  "CASE\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002707:00:00.0000000\u0027 AND \u002714:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentADL.CommunityResourceRoleID IS NOT NULL AND tblResidentScheduleADL.ResourceRole IS NOT NULL THEN tblResidentScheduleADL.ResourceRole + \u0027 Days\u0027",
                                  "\t\tWHEN CAST(ADLDT AS TIME) BETWEEN \u002715:00:00.0000000\u0027 AND \u002722:45:00.0000000\u0027 AND tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentADL.CommunityResourceRoleID IS NOT NULL AND tblResidentScheduleADL.ResourceRole IS NOT NULL THEN tblResidentScheduleADL.ResourceRole + \u0027 Evenings\u0027",
                                  "\t\tWHEN (CAST(ADLDT AS TIME) BETWEEN \u002723:00:00.0000000\u0027 AND \u002723:45:00.0000000\u0027 OR CAST(ADLDT AS TIME) BETWEEN \u002700:00:00.0000000\u0027 AND \u002706:45:00.0000000\u0027) AND tblCommunityResourceRole.ResourceRole IS NULL AND trnResidentADL.CommunityResourceRoleID IS NOT NULL AND tblResidentScheduleADL.ResourceRole IS NOT NULL THEN tblResidentScheduleADL.ResourceRole + \u0027 Nights\u0027",
                                  "\t\tWHEN tblCommunityResourceRole.ResourceRole IS NULL AND tblResidentScheduleADL.ResourceRole IS NULL THEN \u0027Unassigned\u0027",
                                  "\t\tELSE tblCommunityResourceRole.ResourceRole END AS CommunityResourceRole",
                                  "FROM $(vBusinessData).ACM.trnResidentADL",
                                  "",
                                  "LEFT JOIN\t$(vBusinessData).ACM.tblCommunityResourceRole tblCommunityResourceRole",
                                  "ON\t\t\ttblCommunityResourceRole.CommunityResourceRoleID = trnResidentADL.CommunityResourceRoleID",
                                  "LEFT JOIN\t$(vBusinessData).ACM.trnResidentScheduleADL tblResidentScheduleADL",
                                  "ON\t\t\ttblResidentScheduleADL.ResidentScheduleID = trnResidentADL.ResidentScheduleID AND tblResidentScheduleADL.ModelQuestionID = trnResidentADL.ModelQuestionID AND tblResidentScheduleADL.ModelAnswerID = trnResidentADL.ModelAnswerID",
                                  "LEFT JOIN   $(vBusinessData).ACM.luResourceRole",
                                  "ON\t\t\tluResourceRole.ResourceRoleID = tblCommunityResourceRole.ResourceRoleID",
                                  "",
                                  "WHERE CAST(ADLDT AS DATE) \u003e=\u0027$(vmindatetasks)\u0027 and CAST(ADLDT AS DATE) \u003c=\u0027$(vmaxdatetasks)\u0027",
                                  "AND trnResidentADL.ActiveFlg = 1;",
                                  "",
                                  "LEFT JOIN(fact_ADL)",
                                  "LOAD ADLID,",
                                  "\t IF(WildMatch(ADLID, \u0027*7*\u0027),\u0027Desktop\u0027, \u0027Mobile\u0027) as Application, ",
                                  "     Capitalize(Replace(EmplUserName, \u0027,\u0027,\u0027 \u0027)) as Employee,",
                                  "     Title as TaskTitleTemp,",
                                  "     Date(Floor(ProcessDT)) as ProcessDT,",
                                  "     Date(Floor(ProcessLastDT)) as ProcessLastDT,",
                                  "     Date(Floor(ExpireDT)) as TaskExpireDT",
                                  "WHERE Exists(ADLID);",
                                  "",
                                  "SQL SELECT ",
                                  "\tResidentADLID AS ADLID,",
                                  "    Title,",
                                  "    ProcessDT,",
                                  "    ProcessLastDT,",
                                  "    ExpireDT,",
                                  "    ApplicationID,",
                                  "    EmplUserName",
                                  "FROM $(vBusinessData).ACM.tblResidentADL",
                                  "WHERE CAST(ADLDT AS DATE) \u003e=\u0027$(vmindatetasks)\u0027 and CAST(ADLDT AS DATE) \u003c=\u0027$(vmaxdatetasks)\u0027 and ActiveFlg = 1",
                                  "UNION",
                                  "SELECT ",
                                  "\tResidentADLID AS ADLID,",
                                  "    Title,",
                                  "    ProcessDT,",
                                  "    ProcessLastDT,",
                                  "    ExpireDT,",
                                  "    ApplicationID,",
                                  "    EmplUserName",
                                  "FROM $(vBusinessData).ACM.trnResidentADL",
                                  "WHERE CAST(ADLDT AS DATE) \u003e=\u0027$(vmindatetasks)\u0027 and CAST(ADLDT AS DATE) \u003c=\u0027$(vmaxdatetasks)\u0027 and ActiveFlg = 1;",
                                  "",
                                  "STORE [fact_ADL] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentADL.qvd](qvd);",
                                  "",
                                  "factUnassessedTaskStartDT:",
                                  "LOAD %CustomerIDKey,",
                                  "\t ApplyMap(\u0027map_service_code\u0027, ServiceCodeID) as ServiceCodeDescription,",
                                  "     Date(Floor(FirstOccurrenceDT)) as FirstOccurrenceDT",
                                  "WHERE Exists(%CustomerIDKey);",
                                  "",
                                  "SQL SELECT CustomerID as \"%CustomerIDKey\", ",
                                  "\t\t   ServiceCodeID, ",
                                  "\t\t   Min(ADLDT) as FirstOccurrenceDT ",
                                  "\tFROM $(vBusinessData).ACM.tblResidentADL",
                                  "\tWHERE ADLTypeID = 2",
                                  "\tGROUP BY CustomerID, ServiceCodeID;",
                                  "    ",
                                  "STORE [factUnassessedTaskStartDT] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentADLStart.qvd](qvd);",
                                  "",
                                  "DROP TABLES fact_ADL, factUnassessedTaskStartDT;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Assessment History",
        "LoadScriptContent":  [
                                  "///$tab Assessment History",
                                  "// Load resident care extract",
                                  "initResidentCare: LOAD * FROM [lib://DataShare/QVD Extract/QVD_Extract_factResidentCarePrimary.qvd] (qvd);",
                                  "",
                                  "// Load ancillary care (med level only)",
                                  "LEFT JOIN (initResidentCare) LOAD CareHistoryID, CareAncillary FROM [lib://DataShare/QVD Extract/QVD_Extract_factResidentCareAncillary.qvd] (qvd)",
                                  "WHERE WildMatch(CareAncillary, \u0027Med*\u0027);",
                                  "",
                                  "// Flag for changes in care",
                                  "tempResidentCare: ",
                                  "LOAD distinct\tCustomerID as %CustomerIDKey, ",
                                  "\t\t\t\tCare,",
                                  "                CareAncillary,",
                                  "\t\t\t\tDate(Floor(EffectiveDT)) as %DateKey, ",
                                  "                CustomerID\u0026\u0027 | \u0027\u0026Num(Date(Floor(EffectiveDT))) as %AssessmentKey,",
                                  "                If(Previous(Care) = Care, 0, 1) as ChangeFlg,",
                                  "                If(Previous(CareAncillary) = CareAncillary, 0, 1) as AncillaryChangeFlg",
                                  "resident initResidentCare order by CustomerID, EffectiveDT asc ;",
                                  "DROP TABlE initResidentCare;",
                                  "",
                                  "// Join on assessment date and customer ID for pending assessments",
                                  "left join (tempResidentCare)",
                                  "LOAD ",
                                  "     [%CustomerIDKey]\u0026\u0027 | \u0027\u0026Num(Date(Floor(CreateDT))) as %AssessmentKey,",
                                  "\t PendingFlg;",
                                  "SQL SELECT CustomerID as \"%CustomerIDKey\", ",
                                  "\t\t   CreateDT, ",
                                  "\t\t   PendingFlg ",
                                  "\tFROM $(vBusinessData).ACM.wrkResidentAssessment",
                                  "    where ActiveFlg = 1;",
                                  "",
                                  "// Join on assessment date and customer ID for assessment details and next date",
                                  "left join (tempResidentCare)",
                                  "LOAD ",
                                  "     [%CustomerIDKey]\u0026\u0027 | \u0027\u0026Num(Date(Floor(AssessmentDT))) as %AssessmentKey,",
                                  "\t Date(Floor(AssessmentNextDT)) as AssessmentNextDT,",
                                  "     AssessmentType;",
                                  "SQL SELECT CustomerID as \"%CustomerIDKey\", ",
                                  "\t\t   AssessmentNextDT,",
                                  "           AssessmentDT,",
                                  "           AssessmentType",
                                  "\tFROM $(vBusinessData).ACM.tblResidentAssessment a",
                                  "    left join $(vBusinessData).ACM.luAssessmentType l on a.AssessmentTypeID = l.AssessmentTypeID ",
                                  "    where a.ActiveFlg = 1;",
                                  "    ",
                                  "// flag most current assessment",
                                  "temp_assessment: ",
                                  "LOAD %CustomerIDKey, ",
                                  "\t MAX(%DateKey) as %DateKey, ",
                                  "\t 1 as MostRecentAssessmentFlg",
                                  "Resident tempResidentCare ",
                                  "GROUP BY [%CustomerIDKey]; ",
                                  "Left join (tempResidentCare) load * Resident temp_assessment;",
                                  "",
                                  "//final fact",
                                  "factResidentAssessment: ",
                                  "LOAD *, ",
                                  "\t if(MostRecentAssessmentFlg = 1 and AssessmentNextDT \u003c Today(), 1, 0) as PastDueFlg, ",
                                  "     if(MostRecentAssessmentFlg = 1 and AssessmentNextDT \u003c= Today() + 14 and AssessmentNextDT \u003e Today(), 1, 0) as UpcomingFlg",
                                  "Resident tempResidentCare ",
                                  "Where %DateKey \u003e= Today() - 365; ",
                                  "",
                                  "Store [factResidentAssessment] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentAssessment.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop tables tempResidentCare, temp_assessment, factResidentAssessment;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Care Variance",
        "LoadScriptContent":  [
                                  "///$tab Care Variance",
                                  "map_care: mapping LOAD *; SQL SELECT CareID, CareLevel FROM $(vBusinessData).ARM.luCare;",
                                  "map_service: mapping LOAD *; SQL SELECT ServiceID, Service FROM $(vBusinessData).ARM.luService;",
                                  "map_ancillary_care: mapping LOAD *; SQL SELECT CareAncillaryID, CareAncillary FROM $(vBusinessData).ARM.luCareAncillary;",
                                  "map_series: mapping LOAD *; SQL SELECT SeriesID, Series FROM $(vBusinessData).ARM.luSeries;",
                                  "",
                                  "",
                                  "wrkCareVariance: ",
                                  "LOAD CustomerID as \"%CustomerIDKey\",",
                                  "     Date(Floor(AssessedEffectiveDT)) as AssessedEffectiveDT, ",
                                  "     ApplyMap(\u0027map_service\u0027, AssessedServiceID) as AssessedService,",
                                  "     ApplyMap(\u0027map_care\u0027, AssessedCareID) as AssessedCare,",
                                  "     AssessedRate,",
                                  "     Date(Floor(BilledEffectiveDT)) as BilledEffectiveDT, ",
                                  "     ApplyMap(\u0027map_service\u0027, BilledServiceID) as BilledService,",
                                  "     ApplyMap(\u0027map_care\u0027, BilledCareID) as BilledCare,",
                                  "     BilledRate,",
                                  "     VarianceFlg,",
                                  "     \u0027Primary\u0027 as Type; ",
                                  "SQL SELECT * FROM $(vBusinessData).ARM.wrkResidentCareVariance WHERE ActiveFlg = 1;",
                                  "",
                                  "Concatenate (wrkCareVariance)",
                                  "LOAD CustomerID as \"%CustomerIDKey\",",
                                  "     Date(Floor(AssessedEffectiveDT)) as AssessedEffectiveDT, ",
                                  "     ApplyMap(\u0027map_series\u0027, AssessedSeriesID) as AssessedSeries,",
                                  "     ApplyMap(\u0027map_ancillary_care\u0027, AssessedAncillaryCareID) as AssessedAncillaryCare,",
                                  "     AssessedRate,",
                                  "     Date(Floor(BilledEffectiveDT)) as BilledEffectiveDT, ",
                                  "     ApplyMap(\u0027map_series\u0027, BilledSeriesID) as BilledSeries,",
                                  "     ApplyMap(\u0027map_ancillary_care\u0027, BilledAncillaryCareID) as BilledAncillaryCare,",
                                  "     BilledRate,",
                                  "     VarianceFlg,",
                                  "     \u0027Ancillary\u0027 as Type;",
                                  "SQL SELECT * FROM $(vBusinessData).ARM.wrkResidentAncillaryCareVariance where ActiveFlg = 1;",
                                  "",
                                  "factCareVariance: NoConcatenate LOAD * resident wrkCareVariance where AssessedEffectiveDT \u003e= Today() - 365; ",
                                  "",
                                  "Store [factCareVariance] into [lib://DataShare/QVD Transform\\QVD_Transform_factCareVariance.qvd](qvd);",
                                  "",
                                  "DROP TABLES wrkCareVariance, factCareVariance;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Communities",
        "LoadScriptContent":  [
                                  "///$tab Communities",
                                  "////Renaming fields",
                                  "[mstrCommunity]:",
                                  "LOAD",
                                  "    CommunityID, ",
                                  "    CommunityName, ",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//Keep the Num# in front of community number to change it from text to number    ",
                                  "    Num#(CommunityNumber) as COMMUNITYNUMBER,",
                                  "    Brand, ",
                                  "    Portfolio,",
                                  "\tDivision,",
                                  "    SVP,",
                                  "    Region,",
                                  "    RVP, ",
                                  "    Owner, ",
                                  "    Address as CommunityAddress, ",
                                  "    City as CommunityCity, ",
                                  "    State as CommunityState, ",
                                  "    PostalCode as CommunityPostalCode, ",
                                  "//            PhoneNumber, ",
                                  "    Country as CommunityCountry, ",
                                  "    Longitude, ",
                                  "    Latitude,",
                                  "\tGeoMakePoint(Latitude,Longitude) as GeoLocation,",
                                  "    IF(IsILFlg=1, \u0027IL\u0027, IF(IsALFlg=1, \u0027AL\u0027, IF(IsLGFlg=1, \u0027LG\u0027))) as LowestService,",
                                  "    IsILFlg, ",
                                  "    IsALFlg, ",
                                  "    IsLGFlg    ",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [mstrCommunity] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrCommunity.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Community Review Score with Date",
        "LoadScriptContent":  [
                                  "///$tab Community Review Score with Date",
                                  "////Format fields",
                                  "TempScores:",
                                  "LOAD",
                                  "//     factCommunityReviewScoreID,",
                                  "    ReviewID as %ReviewIDKey,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    IndicatorID,",
                                  "    Indicator as [IndicatorDept],",
                                  "    NUM(IndicatorPercent, \u0027#0\u0027) as IndicatorPercent,",
                                  "    FirstImpressionScore",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReviewScore.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "////Only include scores from Reviews that are closed.",
                                  "INNER JOIN(TempScores)",
                                  "LOAD",
                                  "//     factCommunityReviewID,",
                                  "    ReviewDashboard,",
                                  "    %ReviewIDKey,",
                                  "//     CommunityNumber,",
                                  "//     ReviewStatusID,",
                                  "    ReviewStatus,",
                                  "    [%DateKey],",
                                  "    ReviewYear,",
                                  "    ReviewRound,    ",
                                  "    ReviewYearAndRound,",
                                  "    ReviewPOCID,",
                                  "    POCStatus,",
                                  "    ReviewPOCURL,",
                                  "    [Net Score],",
                                  "    QAwardFlg,",
                                  "    ReviewCreateBy,",
                                  "    MostEffectiveFlg",
                                  "//     CreateDT,",
                                  "//     ModifyBy,",
                                  "//     ModifyDT,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityReview.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [TempScores] into [lib://DataShare/QVD Transform\\QVD_Transform_ScoresWithDates.qvd]",
                                  "(qvd);",
                                  "drop table TempScores;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Community Review",
        "LoadScriptContent":  [
                                  "///$tab Community Review",
                                  "//// Rename fields, create Most Effective Flg",
                                  "[factCommunityReview]:",
                                  "LOAD",
                                  "//  factCommunityReviewID,",
                                  "    \u0027$(QEReviewDashboard)\u0027 \u0026 ReviewID as ReviewDashboard,",
                                  "    ReviewID as [%ReviewIDKey],",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//  ReviewStatusID,",
                                  "    ReviewStatus,",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    DocumentYear as ReviewYear,",
                                  "    DocumentPeriod as ReviewRound,",
                                  "    DocumentYear \u0026 \u0027-\u0027 \u0026 DocumentPeriod as ReviewYearAndRound,",
                                  "    POCID as ReviewPOCID,",
                                  "//  POCStatusID,",
                                  "    POCStatus,",
                                  "    \u0027$(QEPOC)\u0027 \u0026 POCID as ReviewPOCURL,",
                                  "    Num(ScoreAdjusted, \u0027#0\u0027) as [Net Score],",
                                  "    QAwardFlg,",
                                  "    Capitalize(CreateBy) as ReviewCreateBy,",
                                  "//  date(floor(CreateDT)),",
                                  "    ModifyBy as ModifyBy,",
                                  "    date(floor(ModifyDT)) as ModifyDT,",
                                  "    MostEffectiveFlg ",
                                  "//  ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReview.qvd]",
                                  "(qvd); //Only pull in closed so RVPs/Communities can\u0027t see the Open reviews before they are offically started at the community.",
                                  "",
                                  "Store [factCommunityReview] into [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityReview.qvd]",
                                  "(qvd);",
                                  "drop table [factCommunityReview];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Community Trip Report Detail with Type",
        "LoadScriptContent":  [
                                  "///$tab Community Trip Report Detail with Type",
                                  "////TR Questions and Answers",
                                  "TRQuestions:",
                                  "LOAD",
                                  "//     factCommunityTripReportDetailID,",
                                  "    ReviewID as [%TripReviewIDKey],",
                                  "    ResponseID as TripDetailID,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "//     SectionID,",
                                  "    \"Section\" as TripSection,",
                                  "//     SectionSort,",
                                  "    QuestionID as TripQuestionID,",
                                  "//     QuestionNumber,",
                                  "    Question as TripQuestion,",
                                  "//     QuestionSort,",
                                  "//     AnswerID,",
                                  "    Answer as TripAnswer,",
                                  "    \"Comment\" as TripComment,",
                                  "    QuestionScore,",
                                  "    AnswerScore",
                                  "//    CreateBy as TripDetailCreateBy,",
                                  "//    date(floor(CreateDT)) as [%DateKey]",
                                  "//    ModifyBy as TripDetailModifyBy",
                                  "//     date(floor(ModifyDT)) as TripDetailModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityTripReportDetail.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Grab pertinent information from the Trip Report table.",
                                  "JOIN(TRQuestions)",
                                  "LOAD",
                                  "//     factCommunityTripReportID,",
                                  "    %TripReviewIDKey,",
                                  "//     TripReportID,",
                                  "    TripReport,",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    [%DateKey],",
                                  "    TripReportYear,",
                                  "//     TripReportStatusID,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "//     Summary as TripSummary,",
                                  "    TripPOCID,",
                                  "//     POCStatusID,",
                                  "\tPOCStatus,",
                                  "//     TripViewPOCURL,",
                                  "//     TripPOCURL,",
                                  "    TripCommPOCURL,",
                                  "    TripCreateBy,",
                                  "    UserDepartment,",
                                  "    UserJobCode,",
                                  "    UserJobTitle",
                                  "// //     date(floor(CreateDT)) as TripCreateDT,",
                                  "//    ModifyBy as ModifyBy,",
                                  "//    date(floor(ModifyDT)) as ModifyDT",
                                  "//     ReplicaDT",
                                  "",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [TRQuestions] into [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityTripDetailwithType.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table TRQuestions;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Community Trip Report POC",
        "LoadScriptContent":  [
                                  "///$tab Community Trip Report POC",
                                  "////Start with the PTC data",
                                  "TripPOC:",
                                  "LOAD",
                                  "    factCommunityTripReportPOCID,",
                                  "//     CommunityNumber,",
                                  "//     TripReport,",
                                  "    ReviewID as %TripReviewIDKey,",
                                  "//     ReviewtDT,",
                                  "//     ReviewModifyBy,",
                                  "//     ReviewModifyDT,",
                                  "//     ReviewStatus,",
                                  "    \"Section\" as TripSection,",
                                  "//     SectionNumber,",
                                  "//     QuestionNumber,",
                                  "    Question as TripQuestion,",
                                  "//     InterpretiveGuideline,",
                                  "//     Answer,",
                                  "//     AnswerComment,",
                                  "    POCID as TripPOCID,",
                                  "    POCDT as TripPOCDT,",
                                  "    POCStatus,",
                                  "    TaskGoal,",
                                  "    TaskResult,",
                                  "    TaskDueDT,",
                                  "    TaskStatus,",
                                  "    TaskStatusReason,",
                                  "//     POCModifyBy,",
                                  "    POCModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityTripReportPOC.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Get pertinent information from the TR table.",
                                  "LEFT JOIN(TripPOC)",
                                  "LOAD",
                                  "//     factCommunityTripReportID,",
                                  "//     %TripReviewIDKey,",
                                  "//     TripReportID,",
                                  "    TripReport,",
                                  "//     CommunityNumber as [%CommunityKey],",
                                  "    [%DateKey],",
                                  "    TripReportYear,",
                                  "//     TripReportStatusID,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "//     Summary as TripSummary,",
                                  "    TripPOCID,",
                                  "//     POCStatusID,",
                                  "// \tPOCStatus,",
                                  "//     TripViewPOCURL,",
                                  "//     TripPOCURL,",
                                  "    TripCommPOCURL,",
                                  "    TripCreateBy,",
                                  "    UserDepartment,",
                                  "    UserJobCode,",
                                  "    UserJobTitle",
                                  "// //     date(floor(CreateDT)) as TripCreateDT,",
                                  "//    ModifyBy as ModifyBy,",
                                  "//    date(floor(ModifyDT)) as ModifyDT",
                                  "//     ReplicaDT",
                                  "",
                                  "FROM [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [TripPOC] into [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityTripReportPOC.qvd]",
                                  "(qvd);",
                                  "",
                                  "Drop Table TripPOC;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Community Trip Report",
        "LoadScriptContent":  [
                                  "///$tab Community Trip Report",
                                  "IF vSkipQuality = 0 then",
                                  "",
                                  "////Step 1: Rename fields and set Aging POC flag.",
                                  "[factCommunityTripReport]:",
                                  "LOAD",
                                  "//     factCommunityTripReportID,",
                                  "    ReviewID as %TripReviewIDKey,",
                                  "//     TripReportID,",
                                  "    TripReport,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    date(floor(EffectiveDT)) as [%DateKey],",
                                  "    YEAR(EffectiveDT) as TripReportYear,",
                                  "//     TripReportStatusID,",
                                  "    TripReportStatus,",
                                  "//     RatingID,",
                                  "    Summary as TripSummary,",
                                  "    POCID as TripPOCID,",
                                  "//     POCStatusID,",
                                  "\tPOCStatus,",
                                  "//     POCURL as TripViewPOCURL,",
                                  "    IF(ISNULL(POCID), NULL(), \u0027$(TripReportPOC)\u0027 \u0026 POCID) as TripCommPOCURL,",
                                  "    Capitalize(CreateBy) as TripCreateBy,",
                                  "//     date(floor(CreateDT)) as TripCreateDT,",
                                  "   ModifyBy as ModifyBy,",
                                  "   date(floor(ModifyDT)) as ModifyDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "LEFT JOIN(factCommunityTripReport)",
                                  "LOAD",
                                  "//     mstrUserID,",
                                  "//     \"UserID\",",
                                  "//     CommunityNumber,",
                                  "//     Employee,",
                                  "//     UserTypeID,",
                                  "//     UserType,",
                                  "    Capitalize(UserName) as TripCreateBy,",
                                  "//     EMPLID,",
                                  "    Department as UserDepartment,",
                                  "    JobCode as UserJobCode,",
                                  "    JobTitle as UserJobTitle",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrUser.qvd]",
                                  "(qvd) Where UserTypeID=1;",
                                  "",
                                  "",
                                  "Store [factCommunityTripReport] into [lib://DataShare/QVD Transform\\QVD_Transform_factCommunityTripReport.qvd]",
                                  "(qvd);",
                                  "drop table [factCommunityTripReport];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Diagnosis",
        "LoadScriptContent":  [
                                  "///$tab Diagnosis",
                                  "factResidentDiagnosis:",
                                  "LOAD ",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(EffectiveDT)) as %DateKey,",
                                  "    \"Type\" as DiagnosisType,",
                                  "    Diagnosis",
                                  "    WHERE NOT Match(Diagnosis, \u0027No known diagnosis\u0027);",
                                  "SQL SELECT * FROM $(vInsightsData)Care.factResidentDiagnosis;",
                                  "",
                                  "Store [factResidentDiagnosis] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentDiagnosis.qvd](qvd);",
                                  "DROP TABLE factResidentDiagnosis;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "eLeadCreationJournalActivity",
        "LoadScriptContent":  [
                                  "///$tab eLeadCreationJournalActivity",
                                  "////Table of all eLead Creation Activity (created by APFM, ASL.com, etc.) Used for Speed to Lead calculations",
                                  "eLeadCreationJournalActivity:",
                                  "LOAD",
                                  "    InquiryID as %InquiryID,",
                                  "//     factInquiryJournalActivityID,",
                                  "//     InquiryJournalID,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//     TypeID,",
                                  "//     \"Type\",",
                                  "//     TypeCategoryID,",
                                  "//     TypeCategory,",
                                  "//     TypeCategorySEQ,",
                                  "    date(floor(EffectiveDT)) as eLeadCreationDT,",
                                  "    EffectiveTM as eLeadCreationTM,",
                                  "    Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027) as eLeadCreationTMHour,",
                                  "    Timestamp#(date(floor(EffectiveDT)) \u0026 \u0027 \u0027 \u0026 Time#(time(LEFT(EffectiveTM, 8), \u0027hh:mm:ss tt\u0027), \u0027hh:mm:ss TT\u0027) ,\u0027MM/DD/YYYY hh:mm:ss TT\u0027) as eLeadCreationDTandTM,",
                                  "    IF( hour(Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027)) \u003e=8",
                                  "    \tand hour(Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027))\u003c20, 1,0) as SpeedToLeadFlg,",
                                  "    IF( hour(Time#(time(LEFT(EffectiveTM, 8), \u0027h:00 tt\u0027), \u0027h:00 TT\u0027))\u003e=20, 1,0) as LateNightLeadFlg",
                                  "//     EffectiveDTChangeCount,",
                                  "//     Owner,",
                                  "//     CloseBy,",
                                  "//     CloseDT,",
                                  "//     CloseFlg,",
                                  "//     Objective,",
                                  "//     Note,",
                                  "//     ReplicaDT,",
                                  "//     \"MIN(InquiryJournalID)\"",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_FactELeadCreationJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [eLeadCreationJournalActivity] into [lib://DataShare/QVD Transform\\QVD_Transform_factELeadCreationJournalActivity.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table eLeadCreationJournalActivity;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Incident",
        "LoadScriptContent":  [
                                  "///$tab Incident",
                                  "////Step 1: rename and format",
                                  "mstrIncident:",
                                  "LOAD",
                                  "// \tmstrIncidentID,",
                                  "    ",
                                  "\tIncidentVersion,",
                                  "    CommunityNumber as [%CommunityKey],",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    IncidentID,",
                                  "    Date(Floor(IncidentDT)) as %DateKey,",
                                  "    Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027) as IncidentTM,",
                                  "    Time(MakeTime(hour(time(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027),\u0027hh:mm TT\u0027))), \u0027h:mm TT\u0027) as IncidentHour,",
                                  "    ",
                                  "    Timestamp(IncidentDT \u0026 \u0027 \u0027 \u0026IncidentTM,\u0027MM/DD/YYYY hh:mm TT\u0027) as IncidentDTandTime,",
                                  "    ",
                                  "\tIF(hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027)) \u003e= 7 ",
                                  "    and hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003c= 14, \u0027First\u0027,",
                                  "    IF(hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003e=15 ",
                                  "    and hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003c=22, \u0027Second\u0027,",
                                  "    IF(hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027))\u003c=6 ",
                                  "    or hour(Time(LEFT(IncidentTM, Len(IncidentTM)-11), \u0027hh:mm TT\u0027)) \u003e=23, \u0027Third\u0027))) as IncidentShift,",
                                  "    ",
                                  "    IncidentReportDateTime,",
                                  "    IncidentCategory,",
                                  "    IncidentType,",
                                  "    ",
                                  "    IF(IncidentType = \u0027Critical\u0027, \u00271\u0027,",
                                  "    IF(IncidentType = \u0027Non Critical\u0027, \u00272\u0027,",
                                  "    IF(IncidentType = \u0027Non Critical - State Reportable\u0027, \u00273\u0027))) as IncidentPriority,",
                                  "    ",
                                  "    HasAttachmentFlg,",
                                  "    IncidentStatus,",
                                  "    FallFlg,",
                                  "    MedicationErrorFlg,",
                                  "    AbuseFlg,",
                                  "    PropertyFlg,",
                                  "    ExposureFlg,",
                                  "    BehaviorFlg,",
                                  "    ElopementFlg,",
                                  "    AccidentFlg,",
                                  "    InjuryFlg,",
                                  "    IllnessFlg,",
                                  "\tOutcomeDeathFlg,",
                                  "    OutcomeHospitalFlg,",
                                  "    OutcomeUnconsciousFlg,",
                                  "    OutcomeAdverseDrugFlg,",
                                  "    OutcomeNoMedicalTreatmentFlg,",
                                  "    OutcomeMedicalTreatmentFlg,",
                                  "    OutcomeFirstAidFlg,",
                                  "    OutcomeAdverseFamilyReactionFlg,",
                                  "    OutcomeResidentRefusedTreatmentFlg,",
                                  "    OutcomeOtherFlg,",
                                  "    OutcomeEMSFlg,",
                                  "    OutcomeEMTTransportFlg,",
                                  "\tOutcomeFamilyTransportFlg,",
                                  "    OutcomePendingFlg,",
                                  "    UntypedFlg",
                                  " ",
                                  "   FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrIncident.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 2: grab resident name and BillingID",
                                  "LEFT JOIN (mstrIncident)",
                                  "LOAD",
                                  "    CustomerID as [%CustomerIDKey],",
                                  "    \"Resident\" as ResidentName,",
                                  "    BillingID as ResidentID",
                                  "    ",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [mstrIncident] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrIncident.qvd]",
                                  "(qvd);",
                                  "drop Table mstrIncident;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "IsEleadFlg",
        "LoadScriptContent":  [
                                  "///$tab IsEleadFlg",
                                  "////List of all eLead Organizations (so we can exclude in our journal activity and create accurate eLead Flags.",
                                  "eLeadOrganization:",
                                  "LOAD distinct CreateBy as eLeadOrganizationList;",
                                  "SQL SELECT distinct CreateBy FROM $(vBusinessData).CRM.tblInquiryJournal where ELeadFlg = 1",
                                  "UNION",
                                  "SELECT distinct CreateBy FROM $(vBusinessData).CRM.tblInquiry where ELeadFlg = 1;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Main",
        "LoadScriptContent":  [
                                  "///$tab Main",
                                  "SET ThousandSep=\u0027,\u0027;",
                                  "SET DecimalSep=\u0027.\u0027;",
                                  "SET MoneyThousandSep=\u0027,\u0027;",
                                  "SET MoneyDecimalSep=\u0027.\u0027;",
                                  "SET MoneyFormat=\u0027$#,##0.00;($#,##0.00)\u0027;",
                                  "SET TimeFormat=\u0027hh:mm:ss.mmm\u0027;",
                                  "SET DateFormat=\u0027M/D/YYYY\u0027;",
                                  "SET TimestampFormat=\u0027M/D/YYYY h:mm:ss[.fff] TT\u0027;",
                                  "SET FirstWeekDay=0;",
                                  "SET BrokenWeeks=1;",
                                  "SET ReferenceDay=0;",
                                  "SET FirstMonthOfYear=1;",
                                  "SET CollationLocale=\u0027en-US\u0027;",
                                  "SET CreateSearchIndexOnReload=0;",
                                  "SET MonthNames=\u0027Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec\u0027;",
                                  "SET LongMonthNames=\u0027January;February;March;April;May;June;July;August;September;October;November;December\u0027;",
                                  "SET DayNames=\u0027Mon;Tue;Wed;Thu;Fri;Sat;Sun\u0027;",
                                  "SET LongDayNames=\u0027Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday\u0027;",
                                  "Let vToday=Today();",
                                  "let vmindate=date(Yearstart(Today(),-2));",
                                  "let vmindate2=date(Yearstart(Today(),-3));",
                                  "let vminfiscalyear=Year(Today());",
                                  "Let vMinCompliance = \u0027.95\u0027;",
                                  "Let vMaxCompliance = \u00271.05\u0027;",
                                  "LET vmindatetasks = date(Today() - 14);",
                                  "LET vmaxdatetasks = date(floor(today() + 7));",
                                  "",
                                  "variables:",
                                  "LOAD",
                                  "    vDatabase,",
                                  "    vInsightsData,",
                                  "    vBusinessData,",
                                  "    vUserDirectory,",
                                  "    vURLBase,",
                                  "    vSkipQuality,",
                                  "    vDivReg",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_variables.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "// variables for databases, etc.",
                                  "let vDatabase = Peek(\u0027vDatabase\u0027,0,\u0027variables\u0027);",
                                  "let vInsightsData = Peek(\u0027vInsightsData\u0027,0,\u0027variables\u0027);",
                                  "let vBusinessData = Peek(\u0027vBusinessData\u0027,0,\u0027variables\u0027);",
                                  "let vUserDirectory = Peek(\u0027vUserDirectory\u0027,0,\u0027variables\u0027);",
                                  "let vURLBase = Peek(\u0027vURLBase\u0027,0,\u0027variables\u0027);",
                                  "let vSkipQuality = Peek(\u0027vSkipQuality\u0027,0,\u0027variables\u0027); //used to skip section of code for customers not using the QMS product",
                                  "let vDivReg = Peek(\u0027vDivReg\u0027,0,\u0027variables\u0027); //used to automate inclusion/exclusion of division and region in apps",
                                  "",
                                  "drop table variables;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Mapping URLs",
        "LoadScriptContent":  [
                                  "///$tab Mapping URLs",
                                  "LET CRM_URL = \u0027https://$(vURLBase).crm.glennissolutions.com/crm/\u0027; ",
                                  "LET QMS_URL = \u0027https://$(vURLBase).qms.glennissolutions.com/\u0027;",
                                  "LET RMS_URL = \u0027https://$(vURLBase).rms.glennissolutions.com/Application/ResidentManagement/\u0027;",
                                  "LET CMS_URL = \u0027https://$(vURLBase).cms.glennissolutions.com/application/ARM/CareManagement/\u0027;",
                                  "",
                                  "",
                                  "LET InquirerDashboard = \u0027$(CRM_URL)\u0027 \u0026 \u0027Inquiry/Dashboard/\u0027;",
                                  "LET OrganizationDashboard = \u0027$(CRM_URL)\u0027 \u0026 \u0027professional/OrganizationDashboardGet?CorporationID=\u0027;",
                                  "LET ContactDashboard = \u0027$(CRM_URL)\u0027 \u0026 \u0027professional/ContactDashboardGet?ContactID=\u0027;",
                                  "LET TripReportPOC = \u0027$(QMS_URL)\u0027 \u0026 \u0027TripReport/PlanOfCorrection?PlanOfCorrectionResponseID=\u0027;",
                                  "LET QEReviewDashboard = \u0027$(QMS_URL)\u0027 \u0026 \u0027Review/ReadOnlyReview?CommunityReviewID=\u0027;",
                                  "LET QEPOC = \u0027$(QMS_URL)\u0027 \u0026 \u0027OverView/PlanOfCorrection?PlanOfCorrectionID=\u0027;",
                                  "LET RMSLeaseManagement = \u0027$(RMS_URL)\u0027 \u0026 \u0027LeaseDashboard.aspx?CustomerID=\u0027;",
                                  "LET CMSResidentDashboard = \u0027$(CMS_URL)\u0027 \u0026 \u0027ResidentDashboard.aspx?CommunityNumber=\u0027;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Mobility Devices",
        "LoadScriptContent":  [
                                  "///$tab Mobility Devices",
                                  "init_mobility:",
                                  "CrossTable (MobilityDevice, MobilityValue)",
                                  "LOAD %CustomerIDKey,",
                                  "     HasCaneFlg,",
                                  "     HasWheelchairFlg,",
                                  "     HasWalkerFlg,",
                                  "     HasScooterFlg,",
                                  "     HasMobilityOtherFlg,",
                                  "     MobilityOther",
                                  "WHERE Exists(%CustomerIDKey);",
                                  "SQL SELECT CustomerID as \"%CustomerIDKey\",",
                                  "    HasCaneFlg,",
                                  "    HasWheelchairFlg,",
                                  "    HasWalkerFlg,",
                                  "    HasScooterFlg,",
                                  "    HasMobilityOtherFlg,",
                                  "    MobilityOther",
                                  "FROM $(vBusinessData).ACM.tblResidentPersonalCareData;",
                                  "",
                                  "fact_mobility:",
                                  "LOAD %CustomerIDKey, ",
                                  "\t Replace(Replace(MobilityDevice, \u0027Has\u0027,\u0027\u0027), \u0027Flg\u0027, \u0027\u0027) as MobilityDevice ",
                                  "Resident init_mobility WHERE MobilityValue = 1;",
                                  "",
                                  "Store [fact_mobility] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentMobilityDevice.qvd](qvd);",
                                  "",
                                  "DROP TABLES init_mobility, fact_mobility;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "mstrB2B",
        "LoadScriptContent":  [
                                  "///$tab mstrB2B",
                                  "///rename fields",
                                  "mstrCorporation:",
                                  "LOAD",
                                  "//     mstrCorporationID,",
                                  "    CorporationID as %OrganizationID,",
                                  "    Corporation as Organization,",
                                  "    Status as OrganizationStatus,",
                                  "    CorporationType as B2BType,",
                                  "    CategoryType as B2BCategoryType,",
                                  "    Category as B2BCategory,",
                                  "    IsEleadFlg as IsEleadCorporationFlg,",
                                  "\tAddress1 as B2BAddress1, ",
                                  "// \tAddress2, ",
                                  "// \tCity, ",
                                  "\tState as CommunityState, ",
                                  "// \tPostalCode, ",
                                  "// \tCountry, ",
                                  "\tLatitude,",
                                  "\tLongitude,",
                                  "// GeoMakePoint(Latitude,Longitude) as [B2B Location],",
                                  "\tCompetitorID,",
                                  "//     PhoneWork as B2BPhoneWork,",
                                  "//     PhoneCell as B2BPhoneCell,",
                                  "//     PhoneFax as B2BPhoneFax,",
                                  "\tPriority,",
                                  "\tOutreachFrequency,",
                                  "    NICID,",
                                  "\t\u0027$(OrganizationDashboard)\u0027 \u0026 CorporationID as OrganizationDashboard",
                                  "//     MSA,",
                                  "//     InboundCount as B2BInboundCount,",
                                  "//     LastInboundDT as B2BLastInboundDT,",
                                  "//     OutboundCount as B2BOutboundCount,",
                                  "//     LastOutboundDT as B2BLastOutboundDT",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [mstrCorporation] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrCorporation.qvd]",
                                  "(qvd);",
                                  "drop table [mstrCorporation];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "mstrB2BContact",
        "LoadScriptContent":  [
                                  "///$tab mstrB2BContact",
                                  "////rename fields. only active contacts.",
                                  "mstrContact:",
                                  "LOAD",
                                  "//     mstrContactID,",
                                  "    ContactID,",
                                  "    CorporationID as [%OrganizationID],",
                                  "    Contact,",
                                  "    Title,",
                                  "    Suffix,",
                                  "//     Status,",
                                  "    Address1 as ContactAddress1,",
                                  "    Address2 as ContactAddress2,",
                                  "    City as ContactCity,",
                                  "    State as ContactState,",
                                  "    PostalCode as ContactPostalCode,",
                                  "//     Country,",
                                  "//     Latitude,",
                                  "//     Longitude,",
                                  "//     GooglePlaceID,",
                                  "    PhoneWork as ContactPhoneWork,",
                                  "    PhoneCell as ContactPhoneCell,",
                                  "    PhoneHome as ContactPhoneHome,",
                                  "    Priority as ContactPriority,",
                                  "//     InboundCount,",
                                  "//     LastInboundDT,",
                                  "//     OutboundCount,",
                                  "//     LastOutboundDT,",
                                  "    lower(Email) as ContactEmail,",
                                  "    \u0027$(ContactDashboard)\u0027 \u0026 ContactID as ContactDashboard",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrContact.qvd]",
                                  "(qvd)",
                                  "where Status=\u0027Active\u0027;",
                                  "",
                                  "Store [mstrContact] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrContact.qvd]",
                                  "(qvd);",
                                  "drop table [mstrContact];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Resident Move Out",
        "LoadScriptContent":  [
                                  "///$tab Resident Move Out",
                                  "////Step 1: Move Out table, rename fields, create short name for Move Out Reason.",
                                  "[factResidentMoveOutTEMP]:",
                                  "LOAD",
                                  "               CommunityNumber as %CommunityKey, ",
                                  "               CustomerID as %CustomerIDKey, ",
                                  "               Location,",
                                  "               date(floor(MoveOutDT)) as %DateKey,",
                                  "               Subfield(MoveOutReason, \u0027- \u0027,-1) as MoveOutReasonShort,",
                                  "               MoveOutReason as MoveOutReason,",
                                  "               Note as MoveOutNote",
                                  "// //            ReplicaDT   ",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factResidentMoveOut.qvd]",
                                  "(qvd)",
                                  "where MoveOutDT \u003e= \u0027$(vmindate2)\u0027;",
                                  "",
                                  "////Step 2: Grab Resident Name.",
                                  "Left Join (factResidentMoveOutTEMP)",
                                  "LOAD distinct",
                                  "//            KeyID, ",
                                  "               CustomerID as [%CustomerIDKey], ",
                                  "//            CommunityID, ",
                                  "// \t\t\t   CommunityNumber as %CommunityKey,",
                                  "//            InquiryID, ",
                                  "//            BillingID, ",
                                  "               Resident as Customer ",
                                  "//            Address1, ",
                                  "//            Address2, ",
                                  "//            City, ",
                                  "//            State, ",
                                  "//            PostalCode, ",
                                  "//            Country, ",
                                  "//            Longitude, ",
                                  "//            Latitude, ",
                                  "//            StatusID, ",
                                  "//            Gender, ",
                                  "//            BirthDT, ",
                                  "//            CreateDT, ",
                                  "//            ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 3: Grab move in date (based on customer and move out date).",
                                  "LEFT JOIN (factResidentMoveOutTEMP)",
                                  "LOAD",
                                  "//     ResidentLeaseSegmentID,",
                                  "//     LeaseID,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "    Date(Floor(LeaseSegmentStartDT)) as MoveInDate,",
                                  "    Date(Floor(LeaseSegmentEndDT)) as %DateKey",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factLeaseSegment.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Step 4: Calculate Day of Residence",
                                  "factResidentMoveOut:",
                                  "LOAD %DateKey-MoveInDate as DayofResidence,",
                                  "*",
                                  "Resident factResidentMoveOutTEMP;",
                                  "",
                                  "Store [factResidentMoveOut] into [lib://DataShare/QVD Transform\\QVD_Transform_factResidentMoveOut.qvd]",
                                  "(qvd);",
                                  "drop table [factResidentMoveOut];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Score Card",
        "LoadScriptContent":  [
                                  "///$tab Score Card",
                                  "////Calculations to correct for outlier conversions (see explanations below)",
                                  "factScoreCard:",
                                  "LOAD",
                                  "//     factScoreCardID,",
                                  "//     EffectiveDT,",
                                  "//     EffectiveDTPreviousPeriodEnd,",
                                  "//     EffectivePreviousMonthEnd,",
                                  "//     EffectiveDTMonthName,",
                                  "//     CommunityID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "//     CommunityName,",
                                  "//     Community,",
                                  "//     Company,",
                                  "//     division,",
                                  "//     SVP,",
                                  "//     region,",
                                  "//     RVP,",
                                  "    UnitCapacity,",
                                  "    UnitVacancyCurrentPeriod,",
                                  "//     UnitActualCurrentPeriod,",
                                  "    UnitPercentageActualCapacityCurrentPeriod,",
                                  "//     UnitActualPreviousPeriod,",
                                  "    UnitPercentageActualCapacityPreviousPeriod,",
                                  "//     UnitActualPreviousMonth,",
                                  "//     UnitPercentageActualCapacityPreviousMonth,",
                                  "//     UnitActual365High,",
                                  "//     UnitPercentageActualCapacity365High,",
                                  "    InquiryTargetCurrentMonth,",
                                  "//     InquiryActualCurrentMonth,",
                                  "//     InquiryActualPortfolioRank,",
                                  "    InquiryForecastCurrentMonth,",
                                  "    InquiryTourTargetCurrentMonth,",
                                  "//     InquiryTourActualCurrentMonth,",
                                  "//     InquiryTourActualPortfolioRank,",
                                  "    InquiryTourForecastCurrentMonth,",
                                  "    InquiryToTourConversionPercentageCurrentMonth,",
                                  "    inquiryTourToMoveInConversionPercentageCurrentMonth,",
                                  "    UnitMoveinTargetCurrentMonth,",
                                  "//     UnitMoveinActualCurrentMonth,",
                                  "    UnitMoveinForecastCurrentMonth,",
                                  "    UnitMoveOutTargetCurrentMonth,",
                                  "//     UnitMoveOutActualCurrentMonth,",
                                  "    UnitMoveOutForecastCurrentMonth,",
                                  "//     UnitActualForecastNextMonth00,",
                                  "//     UnitActualForecastNextMonth01,",
                                  "//     UnitActualForecastNextMonth02,",
                                  "//     UnitActualForecastNextMonth00MonthName,",
                                  "//     UnitActualForecastNextMonth01MonthName,",
                                  "//     UnitActualForecastNextMonth02MonthName,",
                                  "//     ResidentActualShortTermLeaveCurrentPeriod,",
                                  "    InquiryTourPastDueCurrentMonth,",
                                  "//     UnitMoveOutScheduledCurrentMonth,",
                                  "//     UnitReservationActualCurrentMonth,",
                                  "//     UnitReservationPastDueCurrentMonth,",
                                  "//     InquiryWithoutActivityCurrentMonth,",
                                  "//      InquiryByMonthHistoricalAverage,",
                                  "     InquiryTourByMonthHistoricalAverage,",
                                  "    UnitMoveInByMonthHistoricalAverage,",
                                  "    UnitMoveOutByMonthHistoricalAverage",
                                  "//     ProfessionalReferralAgencyCount,",
                                  "//     ProfessionalReferralB2BCount,",
                                  "//     InquiryForecastCurrentMonthTemperature,",
                                  "//     InquiryTourForecastCurrentMonthTemperature,",
                                  "//     UnitMoveinForecastCurrentMonthTemperature,",
                                  "//     ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factScoreCard.qvd]",
                                  "(qvd);",
                                  "",
                                  "Store [factScoreCard] into [lib://DataShare/QVD Transform\\QVD_Transform_factScoreCard.qvd]",
                                  "(qvd);",
                                  "drop Table factScoreCard;"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Section Access Load",
        "LoadScriptContent":  [
                                  "///$tab Section Access Load",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "Security:",
                                  "//Loading all users in customer\u0027s User Directory",
                                  "Load \u0027USER\u0027 as ACCESS,",
                                  "\tUserID, ",
                                  "    UserName, ",
                                  "    \u0027$(vUserDirectory)\u0027 \u0026 Upper(UserName) as USERID",
                                  ";",
                                  "SELECT",
                                  "   mstrUser.UserID,",
                                  "   mstrUser.UserName",
                                  "FROM $(vInsightsData)Master.mstrUser",
                                  ";",
                                  "",
                                  "//These are all the communities the users have access to see",
                                  "Left Join(Security)",
                                  "Load UserID,Num#(CommunityNumber) as COMMUNITYNUMBER;",
                                  "SELECT",
                                  "\tUserID, ",
                                  "\tCommunityNumber ",
                                  "FROM $(vInsightsData)Master.mstrUserToCommunity;",
                                  "",
                                  "//We are adding any admin users for Qlik\u0027s loading purposes",
                                  "Concatenate(Security)",
                                  "Load * Inline [",
                                  "ACCESS,USERID,COMMUNITYNUMBER",
                                  "ADMIN,INTERNAL\\SA_SCHEDULER,*",
                                  "];",
                                  "",
                                  "GlennisUserList:",
                                  "LOAD \u0027USER\u0027 as ACCESS",
                                  "\t,UserName as UserName",
                                  "    ,\u0027DEMO-GLENNIS\\\u0027 \u0026 Upper(UserName) as USERID",
                                  "FROM [lib://DataShare/.xls Library/DemoGlennis Users.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "",
                                  "JOIN(GlennisUserList)",
                                  "LOAD distinct COMMUNITYNUMBER Resident Security;",
                                  "",
                                  "Concatenate(Security)",
                                  "LOAD * Resident GlennisUserList;",
                                  "Drop Table GlennisUserList;",
                                  "",
                                  "// Drop Field UserID from Security;",
                                  "",
                                  "store Security into [lib://DataShare/QVD Transform/QVD_Transform_SectionAccess.qvd]",
                                  "(qvd);"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Short Term Leave",
        "LoadScriptContent":  [
                                  "///$tab Short Term Leave",
                                  "////Step 1: Only NULL ReturnDT, include outbound location",
                                  "mstrSTL:",
                                  "LOAD",
                                  "//    factShortTermLeaveID,",
                                  "    ShortTermLeaveID,",
                                  "    CommunityNumber as %CommunityKey,",
                                  "    CustomerID as %CustomerIDKey,",
                                  "   Date(Floor(DepartureDT)) as DepartureDT,",
                                  "   Date(Floor(ExpectedReturnDT)) as ExpectedReturnDT,",
                                  "//    ReturnDT,",
                                  "//    Note,",
                                  "    OutboundLocation",
                                  "//    ReplicaDT",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrSTL.qvd]",
                                  "(qvd)",
                                  "where isNull(ReturnDT);",
                                  "",
                                  "Store [mstrSTL] into [lib://DataShare/QVD Transform\\QVD_Transform_mstrSTL.qvd]",
                                  "(qvd);",
                                  "drop Table [mstrSTL];"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "tab_order.txt",
        "LoadScriptContent":  [
                                  "Main%tab_file_order_divider%Mapping URLs%tab_file_order_divider%Section Access Load%tab_file_order_divider%Communities%tab_file_order_divider%Active Status%tab_file_order_divider%IsEleadFlg%tab_file_order_divider%Unit Occupancy By Month%tab_file_order_divider%mstrB2B%tab_file_order_divider%mstrB2BContact%tab_file_order_divider%1.1 TEMPTourConfirmation%tab_file_order_divider%1.2 Journal Activity%tab_file_order_divider%1.3 Last Journal Activity%tab_file_order_divider%1.4 Next Journal Activity%tab_file_order_divider%1.5 First Journal Activity%tab_file_order_divider%eLeadCreationJournalActivity%tab_file_order_divider%Resident Move Out%tab_file_order_divider%2.1 B2B Activity%tab_file_order_divider%2.3 Next B2B Activity%tab_file_order_divider%Community Trip Report%tab_file_order_divider%Community Trip Report Detail with Type%tab_file_order_divider%Community Trip Report POC%tab_file_order_divider%Community Review%tab_file_order_divider%Community Review Score with Date%tab_file_order_divider%3.1 Detail with Review Round%tab_file_order_divider%4.1 Resident Assessed Care Type%tab_file_order_divider%4.2 Resident Assessed Med Level%tab_file_order_divider%4.3 Most Effective Billed Care%tab_file_order_divider%4.4 RentRoll%tab_file_order_divider%4.5 Product Inventory (after Rent Roll)%tab_file_order_divider%Short Term Leave%tab_file_order_divider%Score Card%tab_file_order_divider%5.1 Scheduled Move Out%tab_file_order_divider%6.0 Database Advancements%tab_file_order_divider%6.1 factProductPricing EXTRACT%tab_file_order_divider%6.2  Inquiry By Referral Source%tab_file_order_divider%6.3 Reservation Key Table (RVP Approval)%tab_file_order_divider%6.4  Revenue%tab_file_order_divider%6.5  Reservations%tab_file_order_divider%6.6 Tour Activity%tab_file_order_divider%6.7 store JournalActivity%tab_file_order_divider%Incident%tab_file_order_divider%ADL%tab_file_order_divider%Diagnosis%tab_file_order_divider%Assessment History%tab_file_order_divider%Care Variance%tab_file_order_divider%Mobility Devices"
                              ]
    },
    {
        "App":  "DevelopmentTransformation",
        "Section":  "Unit Occupancy By Month",
        "LoadScriptContent":  [
                                  "///$tab Unit Occupancy By Month",
                                  "//// Step 1: Rename Fields, create Comm_OccuUnits and Comm_Units for Jonathan\u0027s apps.",
                                  "factUnitOccupancyByMonth:",
                                  "LOAD",
                                  "//  UnitOccupancyByMonthID, ",
                                  "\tCommunityNumber as [%CommunityKey], ",
                                  "\tdate(floor(EffectiveDT)) as %DateKey, ",
                                  "\tActual as M_EOMActual, ",
                                  "    IF(Date(Floor(EffectiveDT))= Date(Floor(QuarterEnd(EffectiveDT,0))), Actual, NULL()) as Comm_OccUnits,",
                                  "    Respite as M_Respite,",
                                  "    ScheduledOut as M_ScheduledOut,",
                                  "    Reservation as M_Reservation,",
                                  "\tCapacity as M_EOMCapacity, ",
                                  "    IF(Date(Floor(EffectiveDT))= Date(Floor(QuarterEnd(EffectiveDT,0))),Capacity, NULL()) as Comm_Units,",
                                  "\tActualToCapacityPercentage as M_EOMOccPercent, ",
                                  "\tMoveIn as M_UnitMoveIns, ",
                                  "\tMoveOut as M_UnitMoveOuts, ",
                                  "\tOutOfPeriodAdjustment as M_Adjustments",
                                  "// \tReplicaDT as UnitOccupancyByMonthReplicaDT",
                                  "",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_factUnitOccupancyByMonth.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "Store [factUnitOccupancyByMonth] into [lib://DataShare/QVD Transform\\QVD_Transform_factUnitOccupancyByMonth.qvd]",
                                  "(qvd);",
                                  "drop table [factUnitOccupancyByMonth];"
                              ]
    }
]
