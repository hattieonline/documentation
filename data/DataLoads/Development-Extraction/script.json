[
    {
        "App":  "Development-Extraction",
        "Section":  "1.1 eLead Creation Journal Activity",
        "LoadScriptContent":  [
                                  "///$tab 1.1 eLead Creation Journal Activity",
                                  "eLeadCreationJournalActivity:",
                                  "////Step 1: Get all of the activity created by APFM, etc. so we know when the eLead was created (first email notification of eLead)",
                                  "LOAD",
                                  "factInquiryJournalActivityID,",
                                  "    InquiryJournalID,",
                                  "    InquiryJournalID as eLeadCreationJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "//     CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    Time#(EffectiveTM, \u0027hh:mm:ss\u0027) as EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    ELeadFlg,",
                                  "    ReplicaDT",
                                  " Where Exists(CommunityInclude, CommunityNumber) and JournalRank = 1;",
                                  "SQL SELECT factInquiryJournalActivityID,",
                                  "    factInquiryJournalActivity.InquiryJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    ELeadFlg,",
                                  "    ReplicaDT,",
                                  "    RANK ( ) OVER (Partition By CommunityNumber, InquiryID Order By factInquiryJournalActivity.InquiryJournalID) as JournalRank",
                                  "FROM $(vInsightsData)Sales.factInquiryJournalActivity",
                                  "Left Join (Select InquiryJournalID, ELeadFlg from $(vBusinessData).CRM.tblInquiryJournal Where ELeadFlg IS NOT NULL) ELead",
                                  "ON ELead.InquiryJournalID = factInquiryJournalActivity.InquiryJournalID",
                                  "where ",
                                  "\t\tEffectiveDt\u003e=\u0027$(vmindate2)\u0027",
                                  "AND\t\tEffectiveDt is not null",
                                  "AND\t\tELeadFlg = 1",
                                  "AND\t\tTypeID in (7, 40)",
                                  "order by EffectiveDT,EffectiveTM",
                                  ";",
                                  "",
                                  "",
                                  "store [eLeadCreationJournalActivity] into [lib://DataShare/QVD Extract\\QVD_Extract_FactELeadCreationJournalActivity.qvd](qvd);"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "1.2 Journal Activity",
        "LoadScriptContent":  [
                                  "///$tab 1.2 Journal Activity",
                                  "InquiryJournalActivity:",
                                  "LOAD",
                                  "factInquiryJournalActivityID,",
                                  "    InquiryJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    Time#(EffectiveTM, \u0027hh:mm:ss\u0027) as EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    JournalStatusChangeReasonID,",
                                  "    JournalStatusChangeReason,",
                                  "    ELeadFlg,",
                                  "    ReplicaDT",
                                  " Where Exists(CommunityInclude, CommunityNumber) ",
                                  "\tand Not(Exists(eLeadCreationJournalID, InquiryJournalID));",
                                  "",
                                  "SQL SELECT factInquiryJournalActivityID,",
                                  "    factInquiryJournalActivity.InquiryJournalID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    TypeID,",
                                  "    \"Type\",",
                                  "    TypeCategoryID,",
                                  "    TypeCategory,",
                                  "    TypeCategorySEQ,",
                                  "    EffectiveDT,",
                                  "    EffectiveTM,",
                                  "    EffectiveDTChangeCount,",
                                  "    Owner,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CloseFlg,",
                                  "    Objective,",
                                  "    Note,",
                                  "    ApplicationURL,",
                                  "    JournalStatusChangeReasonID,",
                                  "    JournalStatusChangeReason,",
                                  "    ELeadFlg,",
                                  "    ReplicaDT",
                                  "FROM $(vInsightsData)Sales.factInquiryJournalActivity",
                                  "Left Join (Select InquiryJournalID, ELeadFlg from $(vBusinessData).CRM.tblInquiryJournal Where ELeadFlg IS NOT NULL) ELead",
                                  "ON ELead.InquiryJournalID = factInquiryJournalActivity.InquiryJournalID",
                                  "where ",
                                  "\t\tEffectiveDt\u003e=\u0027$(vmindate2)\u0027",
                                  "AND \tEffectiveDt is not null",
                                  "order by EffectiveDT,EffectiveTM;",
                                  "",
                                  "////want to only pull in data with a date. Also, do not want to include the eLead creation journal activity (email) by APFM, etc. ",
                                  "////\t\tto accurately determine the first contact point with the community.",
                                  "",
                                  "////Left Joining to get flags that will be used throughout apps ",
                                  "Left Join (InquiryJournalActivity)",
                                  "LOAD",
                                  "    JournalTypeID as TypeID,",
                                  "    JournalQlikCategory,",
                                  "    PlannedTourFlg,",
                                  "    TelephoneCallFlg,",
                                  "    ScheduledTourFlg",
                                  "FROM [lib://DataShare/.xls Library/Sales/Journal Categories.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "",
                                  "store [InquiryJournalActivity] into [lib://DataShare/QVD Extract\\QVD_Extract_FactInquiryJournalActivity.qvd](qvd);",
                                  "",
                                  "Drop Table [InquiryJournalActivity];",
                                  "Drop Table [eLeadCreationJournalActivity];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Auto Apply Move Ins",
        "LoadScriptContent":  [
                                  "///$tab Auto Apply Move Ins",
                                  "AutoApply:",
                                  "LOAD CustomerID,",
                                  "    LeaseXml,",
                                  "    CreateDT,",
                                  "    IsAutoApplyFlg",
                                  "Where Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT CustomerID,",
                                  "\tCommunityID,",
                                  "    LeaseXml.value(\u0027(Lease/LeaseStartDT)[1][not(@xsi:nil = true)]\u0027, \u0027VARCHAR(10)\u0027) as \u0027LeaseXml\u0027,",
                                  "    CreateDT,",
                                  "    IsAutoApplyFlg",
                                  "FROM $(vBusinessData).ResidentManagement.wrkResidentMoveIn",
                                  " ",
                                  "WHERE ",
                                  "//CustomerID = \u00271486922\u0027 ",
                                  "//AND ",
                                  "PrimaryResidentFlg = 1",
                                  "AND ProcessFlg = 0",
                                  "AND IsAutoApplyFlg = 1",
                                  " ;",
                                  " ",
                                  "Left Join (AutoApply)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare/QVD Extract/QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  " ",
                                  "store [AutoApply] into [lib://DataShare/QVD Extract\\QVD_Extract_AutoApply.qvd](qvd);",
                                  "",
                                  "Drop Table [AutoApply];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "B2B Activity",
        "LoadScriptContent":  [
                                  "///$tab B2B Activity",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "[factContactJournalActivity]:",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "",
                                  "SELECT ",
                                  "*",
                                  "FROM $(vInsightsData)Sales.factContactJournalActivity",
                                  "where effectivedt\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "////Left Joining to get journal categories for use in Qlik",
                                  "Left Join (factContactJournalActivity)",
                                  "LOAD",
                                  "    JournalTypeID as TypeID,",
                                  "    JournalQlikCategory",
                                  "FROM [lib://DataShare/.xls Library/Sales/Journal Categories.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "store [factContactJournalActivity] into [lib://DataShare/QVD Extract\\QVD_Extract_factContactJournalActivity.qvd](qvd);",
                                  "",
                                  "Drop Table [factContactJournalActivity];",
                                  "",
                                  "",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Business Data tblReservation",
        "LoadScriptContent":  [
                                  "///$tab Business Data tblReservation",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "tblReservationBusinessData:",
                                  "LOAD ReservationID,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    CommunityID,",
                                  "    BedID,",
                                  "    ProductInventoryID,",
                                  "    BedNumber,",
                                  "    BillingID,",
                                  "    DesiredDT,",
                                  "    DepositAmount,",
                                  "    PayorID,",
                                  "    MethodOfPaymentID,",
                                  "    RoomRate,",
                                  "    RateLockFlg,",
                                  "    RateLockEndDT,",
                                  "    EffectiveDT,",
                                  "    Note,",
                                  "    ReservationXML,",
                                  "    CloseFlg,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    ActiveFlg,",
                                  "    inquiryHistoryID,",
                                  "    StreetRate,",
                                  "    ReasonID,",
                                  "    HasRVPApprovalFlg,",
                                  "    ReservationCreateRank,",
                                  "    ReservationProductCreateRank,",
                                  "    RoomRateDeviationReason",
                                  "    Where Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT ReservationID,",
                                  "    InquiryID,",
                                  "    CustomerID,",
                                  "    CommunityID,",
                                  "    BedID,",
                                  "    ProductInventoryID,",
                                  "    BedNumber,",
                                  "    BillingID,",
                                  "    DesiredDT,",
                                  "    DepositAmount,",
                                  "    PayorID,",
                                  "    MethodOfPaymentID,",
                                  "    RoomRate,",
                                  "    RateLockFlg,",
                                  "    RateLockEndDT,",
                                  "    EffectiveDT,",
                                  "    Note,",
                                  "    ReservationXML,",
                                  "    CloseFlg,",
                                  "    CloseBy,",
                                  "    CloseDT,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    ActiveFlg,",
                                  "    inquiryHistoryID,",
                                  "    StreetRate,",
                                  "    ReasonID,",
                                  "    HasRVPApprovalFlg,",
                                  "    RoomRateDeviationReason,",
                                  "    RANK() OVER (PARTITION BY      CommunityID, InquiryID, CustomerID",
                                  "                                        ORDER BY    CommunityID,",
                                  "                                        \t\t\tInquiryID,",
                                  "                                        \t\t\tCustomerID,",
                                  "                                                    CreateDT DESC,",
                                  "                                                    ReservationID DESC) AS [ReservationCreateRank],",
                                  "\tRANK() OVER (PARTITION BY\t\tCommunityID, InquiryID, CustomerID, ProductInventoryID",
                                  "    \t\t\t\t\t\t\t\t\tORDER BY\tCommunityID,",
                                  "                                        \t\t\tInquiryID,",
                                  "                                                    CustomerID,",
                                  "                                                    ProductInventoryID,",
                                  "                                                    CreateDT DESC,",
                                  "                                                    ReservationID DESC) AS ReservationProductCreateRank",
                                  "FROM $(vBusinessData).CRM.tblReservation",
                                  "where ActiveFlg=1 and EffectiveDT\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "////Joining to get Community Number because we join on that in most of our transformation tables.",
                                  "Left Join (tblReservationBusinessData)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "////Joining to get the Reason",
                                  "Left Join (tblReservationBusinessData)",
                                  "LOAD ReasonID,",
                                  "    Reason;",
                                  "SQL SELECT ReasonID,",
                                  "    Reason",
                                  "FROM $(vBusinessData).CRM.luReservationCloseReason;",
                                  "",
                                  "",
                                  "",
                                  "store [tblReservationBusinessData] into [lib://DataShare/QVD Extract\\QVD_Extract_BusinessData_tblReservation.qvd](qvd);",
                                  "drop table tblReservationBusinessData;"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Communities",
        "LoadScriptContent":  [
                                  "///$tab Communities",
                                  "////Extraction layer of Community Table used for most apps",
                                  "[mstrCommunity]:",
                                  "    LOAD CommunityNumber as CommunityInclude,",
                                  "    CommunityID as CommunityIDInclude,",
                                  "    *",
                                  "Where IsReportFlg=1;",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Master.mstrCommunity;",
                                  "",
                                  "",
                                  "store [mstrCommunity] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrCommunity.qvd](qvd);"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Review Detail",
        "LoadScriptContent":  [
                                  "///$tab Community Review Detail",
                                  "////Only loading question details for reviews included in the Community Review load.",
                                  "[factCommunityReviewDetail]:",
                                  "",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber)",
                                  "and Exists(IncludeReviewID, ReviewID);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Quality.factCommunityReviewDetail;",
                                  "",
                                  "store [factCommunityReviewDetail] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReviewDetail.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityReviewDetail];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Review POC",
        "LoadScriptContent":  [
                                  "///$tab Community Review POC",
                                  "////Only loading scores for PTC included in the Community Review load.",
                                  "",
                                  "factCommunityReviewPOC:",
                                  "LOAD *",
                                  "where Exists(IncludePTCID, PlanOfCorrectionId);",
                                  "SQL SELECT tblPlanOfCorrectionResponse.PlanOfCorrectionResponseId,",
                                  "\tPlanOfCorrectionId,",
                                  "\tCustomFlg,",
                                  "\tCommunityReviewResponseId,",
                                  "\tPlanOfCorrectionResponseStatusId,",
                                  "\tOwner,",
                                  "\tDueDt,",
                                  "    Goal.Goal,",
                                  "    Result.Result",
                                  "",
                                  "FROM $(vBusinessData).QE.tblPlanOfCorrectionResponse",
                                  "Left Join (Select \tPlanOfCorrectionResponseId,",
                                  "\t\t\t\t\tComments as Goal",
                                  "\t\t\tFROM \t$(vBusinessData).QE.lnkPlanOfCorrectionResponseToComments",
                                  "            WHERE \tCommentTypeID = 2) Goal",
                                  "ON Goal.PlanOfCorrectionResponseId = tblPlanOfCorrectionResponse.PlanOfCorrectionResponseId",
                                  "Left Join (Select \tPlanOfCorrectionResponseId,",
                                  "\t\t\t\t\tComments as Result",
                                  "\t\t\tFROM \t$(vBusinessData).QE.lnkPlanOfCorrectionResponseToComments",
                                  "            WHERE \tCommentTypeID = 3) Result",
                                  "ON Result.PlanOfCorrectionResponseId = tblPlanOfCorrectionResponse.PlanOfCorrectionResponseId",
                                  "Where ActiveFlg=1;",
                                  "",
                                  "store [factCommunityReviewPOC] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReviewPOC.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityReviewPOC];",
                                  "Drop Table [factCommunityReview]; ////Now we can drop the table because we no longer need ReviewID and PTCID to include.",
                                  "",
                                  "",
                                  "End If"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Review Score",
        "LoadScriptContent":  [
                                  "///$tab Community Review Score",
                                  "////Only loading scores for reviews included in the Community Review load.",
                                  "[factCommunityReviewScore]:",
                                  "",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber)",
                                  "and Exists(IncludeReviewID, ReviewID);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Quality.factCommunityReviewScore ;",
                                  "",
                                  "store [factCommunityReviewScore] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReviewScore.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityReviewScore];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Review",
        "LoadScriptContent":  [
                                  "///$tab Community Review",
                                  "////Step 2: determine which review IDs (and PTC IDs) should be included. Will use to limit the rest of the data loads without having to join in each load to get year, community, etc.",
                                  "////\t\tAlso loading all of the high level details for each review.",
                                  "[factCommunityReview]:",
                                  "",
                                  "LOAD ReviewID as IncludeReviewID,",
                                  "POCID as IncludePTCID,",
                                  "IF(ReviewRank = 1, \u0027Yes\u0027, \u0027No\u0027) as MostEffectiveFlg,",
                                  " *",
                                  "Where Exists(CommunityInclude, CommunityNumber)",
                                  "and WildMatch(DocumentYear, Year(YearStart(Today())), Year(YearStart(Today(),-1)), Year(YearStart(Today(),-2)));",
                                  "",
                                  "Select",
                                  "*,",
                                  "RANK ( ) OVER (Partition By CommunityNumber Order By ReviewID desc) as ReviewRank",
                                  "FROM $(vInsightsData)Quality.factCommunityReview",
                                  "Where ReviewStatus = \u0027Close\u0027;",
                                  "",
                                  "Drop Field ReviewRank from factCommunityReview;",
                                  "",
                                  "store [factCommunityReview] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityReview.qvd](qvd);"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Trip Report Detail",
        "LoadScriptContent":  [
                                  "///$tab Community Trip Report Detail",
                                  "[factCommunityTripReportDetail]:",
                                  "",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Quality.factCommunityTripReportDetail",
                                  "where CreateDT\u003e=\u0027$(vmindate3)\u0027;",
                                  "",
                                  "store [factCommunityTripReportDetail] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityTripReportDetail.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityTripReportDetail];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Trip Report POC",
        "LoadScriptContent":  [
                                  "///$tab Community Trip Report POC",
                                  "[factCommunityTripReportPOC]:",
                                  "",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM $(vInsightsData)Quality.factCommunityTripReportPOC",
                                  "where ReviewtDT\u003e=\u0027$(vmindate3)\u0027;",
                                  "",
                                  "store [factCommunityTripReportPOC] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityTripReportPOC.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityTripReportPOC];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Community Trip Report",
        "LoadScriptContent":  [
                                  "///$tab Community Trip Report",
                                  "IF vSkipQuality = 0 then",
                                  "",
                                  "[factCommunityTripReport]:",
                                  "",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Quality.factCommunityTripReport",
                                  "where CreateDT\u003e=\u0027$(vmindate3)\u0027; ",
                                  "",
                                  "store [factCommunityTripReport] into [lib://DataShare/QVD Extract\\QVD_Extract_factCommunityTripReport.qvd](qvd);",
                                  "",
                                  "Drop Table [factCommunityTripReport];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "dimDate",
        "LoadScriptContent":  [
                                  "///$tab dimDate",
                                  "[dimDate]:",
                                  "    LOAD",
                                  "    date(floor(EffectiveDT)) as EffectiveDT, ",
                                  "    date(floor(EffectiveDT)) as %DateKey,",
                                  "\tFullDateUSA, ",
                                  "\tNUM#(DayOfMonth) as DayOfMonth, ",
                                  "    MonthDayCount,",
                                  "\tDaySuffix, ",
                                  "\tDayName, ",
                                  "\tDayOfWeekUSA, ",
                                  "\tDayOfWeekInMonth, ",
                                  "\tDayOfWeekInYear, ",
                                  "\tDayOfQuarter, ",
                                  "\tDayOfYear, ",
                                  "\tWeekOfMonth, ",
                                  "\tWeekOfQuarter, ",
                                  "\tWeekOfYear, ",
                                  "    Date(WeekStart(EffectiveDT)) as WeekStart,",
                                  "\tMonth, ",
                                  "\tMonthName, ",
                                  "\tMonthOfQuarter, ",
                                  "\tQuarter, ",
                                  "\tQuarterName, ",
                                  "    \u0027Q\u0027 \u0026 Quarter as QuarterPeriod,",
                                  "    Date(Floor(QuarterStart(EffectiveDT))) as QuarterStart,",
                                  "\tYear, ",
                                  "\tYearName, ",
                                  "\tMonthYear, ",
                                  "\tMMYYYY,",
                                  "    SundayStartDT,",
                                  "\tFirstDayOfMonth, ",
                                  "\tLastDayOfMonth, ",
                                  "\tFirstDayOfQuarter, ",
                                  "\tLastDayOfQuarter, ",
                                  "\tFirstDayOfYear, ",
                                  "\tLastDayOfYear, ",
                                  "\tIsHolidayUSA, ",
                                  "\tIsWeekday, ",
                                  "\tHolidayUSA,",
                                  "    IF(Date(Floor(LastDayOfMonth)) = Date(Floor(EffectiveDT)), 1, 0) as LastDayOfMonthFlg,",
                                  "    IF(Date(Floor(Today())) = Date(Floor(EffectiveDT)), 1, 0) as TodayFlg,",
                                  "    IF(Date(Floor(WeekStart(Today()))) = Date(Floor(WeekStart(EffectiveDT))), 1, 0) as CurrentWeekFlg,",
                                  "    IF(Date(Floor(EffectiveDT)) \u003e= Date(Floor(Date(Today()-30))), 1, 0) as T30Flg,",
                                  "    IF(Date(Floor(EffectiveDT)) \u003e= Date(Floor(Date(Today()-7))), 1, 0) as T7Flg",
                                  "    ",
                                  "// \tFiscalDayOfYear, ",
                                  "// \tFiscalWeekOfYear, ",
                                  "// \tFiscalMonth, ",
                                  "// \tFiscalQuarter, ",
                                  "// \tFiscalQuarterName, ",
                                  "// \tFiscalYear, ",
                                  "// \tFiscalYearName, ",
                                  "// \tFiscalMonthYear, ",
                                  "// \tFiscalMMYYYY, ",
                                  "// \tFiscalFirstDayOfMonth, ",
                                  "// \tFiscalLastDayOfMonth, ",
                                  "// \tFiscalFirstDayOfQuarter, ",
                                  "// \tFiscalLastDayOfQuarter, ",
                                  "// \tFiscalFirstDayOfYear, ",
                                  "// \tFiscalLastDayOfYear;",
                                  "where EffectiveDT \u003e=\u0027$(vmindate2)\u0027 and EffectiveDT \u003c=\u0027$(vmaxdate2)\u0027;",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Dimension.dimDate",
                                  ";",
                                  "",
                                  "store [dimDate] into [lib://DataShare/QVD Extract\\QVD_Extract_dimDate.qvd](qvd);",
                                  "",
                                  "Drop Table [dimDate];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Drop mstrCommunity",
        "LoadScriptContent":  [
                                  "///$tab Drop mstrCommunity",
                                  "Drop Table [mstrCommunity];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "factInquiryByReferral",
        "LoadScriptContent":  [
                                  "///$tab factInquiryByReferral",
                                  "factInquiryByReferral:",
                                  "Load distinct",
                                  "// \tInquiryByReferralID,",
                                  "    CommunityID,",
                                  "    CommunityNumber,",
                                  "    InquiryID,",
                                  "    InquiryDT,",
                                  "    Date(Floor(InquiryDT)) as %DateKey,",
                                  "    Status,",
                                  "    StatusDT,",
                                  "    Inquiry,",
                                  "    Address1,",
                                  "    Address2,",
                                  "    City,",
                                  "    State,",
                                  "    PostalCode,",
                                  "    Country,",
                                  "    Email,",
                                  "    Phone,",
                                  "    PhoneWork,",
                                  "    PhoneCell,",
                                  "    Longitude,",
                                  "    Latitude,",
                                  "    RelationToCustomer,",
                                  "    ReferralCategoryType,",
                                  "    ReferralCategory,",
                                  "    ReferralType,",
                                  "    ReferralSourceID,",
                                  "    ReferralSource,",
                                  "    ReferredByID,",
                                  "    ReferredBy,",
                                  "    SecondaryReferralCategoryType,",
                                  "    SecondaryReferralCategory,",
                                  "    SecondaryReferralType,",
                                  "    SecondaryReferralSourceID,",
                                  "    SecondaryReferralSource,",
                                  "    SecondaryReferredByID,",
                                  "    SecondaryReferredBy,",
                                  "    IsEleadFlg,",
                                  "    TourDT,",
                                  "    TourType,",
                                  "    TourOwner,",
                                  "    TourInitialCount,",
                                  "    TourAdditionalCount,",
                                  "    TourCount,",
                                  "    CallCount,      ",
                                  "    IsSelfAssessmentFlg,",
                                  "    OutboundCategory,",
                                  "    OutboundLocationID,",
                                  "    OutboundLocation,",
                                  "    OutboundLocationType,",
                                  "    OutboundInfluence,",
                                  "    CompetitorRate,",
                                  "    AllowContactPhoneFlg,",
                                  "    AllowContactMailFlg,",
                                  "    AllowContactEmailFlg,",
                                  "    CustomerID,",
                                  "    BillingID,",
                                  "    LivingSituation,",
                                  "    CareType,",
                                  "    CareTypeCode,",
                                  "    PayorType,",
                                  "    Note,",
                                  "    RoomType,",
                                  "    MoveInDT,",
                                  "    IF(ISNULL(PhysicalMoveInDT), MoveInDT, PhysicalMoveInDT) as PhysicalMoveInDT,",
                                  "    ApplicationURL,",
                                  "    HasBiographyNote,",
                                  "    HasObjectionNote,",
                                  "    HasDiscoveryNote,",
                                  "    HasCurrentLivingSituationNote,",
                                  "    HasWhatPromptedSearchNote,",
                                  "    HasBudgetNote,",
                                  "    HasRoomTypeNote,",
                                  "    HasTimeFrameNote,",
                                  "    CreateBy,",
                                  "    CreateDT,",
                                  "    ModifyBy,",
                                  "    ModifyDT,",
                                  "    ReplicaDT",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL Select",
                                  "*",
                                  "FROM $(vInsightsData)Sales.factInquiryByReferral factInquiryByReferral",
                                  "left join ",
                                  "\t(Select distinct ",
                                  "    \t\t CustomerID as CustomerIDMoveIn",
                                  "            ,MoveInDT as FinancialMoveInDT",
                                  "            ,PhysicalMoveInDT",
                                  "            ,RANK() OVER( Partition By CustomerID, cast(MoveInDT as date) order by CreateDT desc, ResidentMoveInID desc) as Ranking",
                                  "\tfrom $(vBusinessData).ARM.tblResidentMoveIn where ActiveFlg=1) tblResidentMI",
                                  "on \t\ttblResidentMI.CustomerIDMoveIn = factInquiryByReferral.CustomerID ",
                                  "and\t\tcast(tblResidentMI.FinancialMoveInDT as date) = cast(factInquiryByReferral.MoveInDT as date) ",
                                  "and\t\tRanking=1",
                                  "",
                                  "left join ",
                                  "\t(Select distinct",
                                  "    \t\t CareType as CareTypeName",
                                  "            ,Code as CareTypeCode",
                                  "\tfrom $(vBusinessData).ARM.luCareType where ActiveFlg = 1) luCareType",
                                  "on\t\tluCareType.CareTypeName = factInquiryByReferral.CareType",
                                  "where \tInquiryDT \u003e= \u0027$(vmindate2)\u0027 ",
                                  "or \t\tStatus in (Select distinct ResidentStatus FROM $(vBusinessData).ARM.luResidentStatus",
                                  "\t\t\t\t\tInner Join (Select ResidentStatusID from $(vBusinessData).Core.lnkResidentStatusToCategory where ResidentStatusCategoryID = 3 and ActiveFlg = 1) lnkResidentStatusToCategory",
                                  "                    ON\t\t\tlnkResidentStatusToCategory.ResidentStatusID = luResidentStatus.ResidentStatusID)",
                                  "or\t\tMoveInDT \u003e= \u0027$(vmindate2)\u0027",
                                  ";",
                                  "//where statement, only include if inquired or moved in in the last 3 years or if they are in an active selling status currently. So not too much data that would cause issues with loads, but have all of the recently relevant information.",
                                  "",
                                  "",
                                  "store [factInquiryByReferral] into [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryByReferral.qvd](qvd);",
                                  "",
                                  "Drop Table [factInquiryByReferral];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Incident",
        "LoadScriptContent":  [
                                  "///$tab Incident",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "mstrIncident:",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "",
                                  "SELECT DISTINCT ",
                                  " \u00272.0\u0027 AS IncidentVersion",
                                  ",tblCommunity.CommunityNumber",
                                  ",tblCustomer.CustomerID",
                                  ",tblIncident.IncidentID",
                                  ",CAST(tblIncident.IncidentDT AS Date) AS IncidentDT",
                                  ",CAST(tblIncident.IncidentTM AS Time) AS IncidentTM",
                                  ",tblIncident.ReportDT as IncidentReportDateTime",
                                  ",\u0027Resident\u0027 AS IncidentCategory",
                                  ",luIncidentType.IncidentType",
                                  ",CASE WHEN tblIncident.StatusID = 1 AND tblIncident.ActiveFlg=1 AND tblResidentNote.ResidentNoteId IS NULL AND wrkResidentNote.ProcessStatusID = 1 //Pending - Not Submitted",
                                  "\tTHEN \u0027Not Submitted\u0027 ",
                                  "    ELSE CASE WHEN tblIncident.StatusID = 1 //Pending - Pending Approval",
                                  "    \tTHEN \u0027Pending Approval\u0027 ",
                                  "        ELSE luStatus.Status ",
                                  "\tEND ",
                                  " END AS IncidentStatus",
                                  ",CASE WHEN lnkIncidentToAttachment.AttachmentID IS NULL THEN 0 ELSE 1 END AS HasAttachmentFlg",
                                  ",isFallFlg AS FallFlg",
                                  ",isMedicationErrorFlg AS MedicationErrorFlg",
                                  ",isAbuseFlg AS AbuseFlg",
                                  ",isPropertyFlg AS PropertyFlg",
                                  ",isExposureFlg AS ExposureFlg",
                                  ",isBehaviorSymptomFlg AS BehaviorFlg",
                                  ",isElopementFlg AS ElopementFlg",
                                  ",isAccidentFlg AS AccidentFlg",
                                  ",isInjuryFlg AS InjuryFlg",
                                  ",isIllnessFlg AS IllnessFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeDeath.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeDeathFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeHospital.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeHospitalFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeUnconscious.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeUnconsciousFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseDrugFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeNoMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFirstAid.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFirstAidFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseFamilyReactionFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeResidentRefused.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeResidentRefusedTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeOther.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeOtherFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMS.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMSFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMT.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMTTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFamilyTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomePending.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomePendingFlg",
                                  ",CASE WHEN  tblIncident.isFallFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isMedicationErrorFlg\t!= 1",
                                  "\t\tAND\ttblIncident.isAbuseFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isPropertyFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isExposureFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isBehaviorSymptomFlg\t!= 1",
                                  "\t\tAND\ttblIncident.isElopementFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isAccidentFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isInjuryFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.isIllnessFlg\t\t\t!= 1 THEN 1",
                                  "\t\tELSE 0",
                                  "\t\tEND AS UntypedFlg",
                                  "FROM $(vBusinessData).IncidentReport.tblIncident tblIncident",
                                  "INNER JOIN $(vBusinessData).ARM.tblCommunity tblCommunity",
                                  "\t\tON tblCommunity.CommunityID = tblIncident.CommunityID",
                                  "INNER JOIN $(vBusinessData).ARM.tblCustomer tblCustomer",
                                  "\t\tON tblCustomer.CustomerID = tblIncident.CustomerID",
                                  "INNER JOIN $(vBusinessData).IncidentReport.luIncidentType luIncidentType",
                                  "\t\tON luIncidentType.IncidentTypeID = tblIncident.IncidentTypeID",
                                  "INNER JOIN $(vBusinessData).IncidentReport.luStatus luStatus",
                                  "\t\tON luStatus.StatusID = tblIncident.StatusID",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToAttachment lnkIncidentToAttachment",
                                  "\t\tON lnkIncidentToAttachment.IncidentID = tblIncident.IncidentID AND lnkIncidentToAttachment.ActiveFlg = 1",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeDeath",
                                  "\t\tON lnkIncident_OutcomeDeath.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeDeath.OutcomeSeverityID = 1",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeHospital",
                                  "\t\tON lnkIncident_OutcomeHospital.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeHospital.OutcomeSeverityID = 2",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeUnconscious",
                                  "\t\tON lnkIncident_OutcomeUnconscious.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeUnconscious.OutcomeSeverityID = 3",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeAdverseDrug",
                                  "\t\tON lnkIncident_OutcomeAdverseDrug.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID = 4",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeNoMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeNoMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID = 5",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID = 6",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeFallWithInjury",
                                  "\t\tON lnkIncident_OutcomeFallWithInjury.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFallWithInjury.OutcomeSeverityID = 7",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeFirstAid",
                                  "\t\tON lnkIncident_OutcomeFirstAid.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFirstAid.OutcomeSeverityID = 8",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeAdverseFamily",
                                  "\t\tON lnkIncident_OutcomeAdverseFamily.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID = 9",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeResidentRefused",
                                  "\t\tON lnkIncident_OutcomeResidentRefused.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeResidentRefused.OutcomeSeverityID = 10",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeOther",
                                  "\t\tON lnkIncident_OutcomeOther.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeOther.OutcomeSeverityID = 11",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeEMS",
                                  "\t\tON lnkIncident_OutcomeEMS.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMS.OutcomeSeverityID = 16",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeEMT",
                                  "\t\tON lnkIncident_OutcomeEMT.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMT.OutcomeSeverityID = 17",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomeFamilyTransport",
                                  "\t\tON lnkIncident_OutcomeFamilyTransport.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID = 18",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.lnkIncidentToOutcome lnkIncident_OutcomePending",
                                  "\t\tON lnkIncident_OutcomePending.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomePending.OutcomeSeverityID = 19",
                                  "LEFT JOIN  $(vBusinessData).ACM.tblResidentNote tblResidentNote",
                                  "\t\tON tblResidentNote.IncidentID = tblIncident.IncidentID",
                                  "LEFT JOIN  $(vBusinessData).IncidentReport.wrkResidentNote",
                                  "\t\tON wrkResidentNote.IncidentID = tblIncident.IncidentID",
                                  "WHERE\ttblIncident.ActiveFlg = 1",
                                  "AND\t\tDATEDIFF(DD, tblIncident.IncidentDT, GETDATE()) \u003c= 365",
                                  "UNION",
                                  "SELECT DISTINCT ",
                                  " \u00271.0\u0027 AS IncidentVersion",
                                  ",tblCommunity.CommunityNumber",
                                  ",tblCustomer.CustomerID",
                                  ",tblIncident.IncidentID",
                                  ",CAST(IncidentDate AS Date) AS IncidentDT",
                                  ",CAST(IncidentTime AS Time) AS IncidentTM",
                                  ",tblIncident.DateCommitted as IncidentReportDateTime",
                                  ",\u0027Resident\u0027 AS IncidentCategory",
                                  ",luIncidentType.Incident_Type",
                                  ",CASE WHEN luStatus.Incident_Status = \u0027Pending\u0027 THEN \u0027Pending Approval\u0027 ELSE luStatus.Incident_Status END AS IncidentStatus",
                                  ",CASE WHEN lnkIncidentDocument.DocumentID IS NULL THEN 0 ELSE 1 END AS HasAttachmentFlg",
                                  ",FallFlg AS FallFlg",
                                  ",MedicationErrorFlg AS MedicationErrorFlg",
                                  ",AbuseFlg AS AbuseFlg",
                                  ",PropertyFlg AS PropertyFlg",
                                  ",ExposureFlg AS ExposureFlg",
                                  ",BehaviorFlg AS BehaviorFlg",
                                  ",ElopementFlg AS ElopementFlg",
                                  ",AccidentFlg AS AccidentFlg",
                                  ",InjuryFlg AS InjuryFlg",
                                  ",IllnessFlg AS IllnessFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeDeath.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeDeathFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeHospital.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeHospitalFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeUnconscious.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeUnconsciousFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseDrugFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeNoMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeMedicalTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFirstAid.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFirstAidFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeAdverseFamilyReactionFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeResidentRefused.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeResidentRefusedTreatmentFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeOther.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeOtherFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMS.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMSFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeEMT.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeEMTTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomeFamilyTransportFlg",
                                  ",ISNULL(CASE WHEN (lnkIncident_OutcomePending.OutcomeSeverityID \u003e 0) THEN 1",
                                  "\t\t\t\t\tELSE 0 ",
                                  "\t\t\t\t\tEND,0) AS OutcomePendingFlg",
                                  ",CASE WHEN  tblIncident.FallFlg\t\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.MedicationErrorFlg\t\t!= 1",
                                  "\t\tAND\ttblIncident.AbuseFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.PropertyFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.ExposureFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.BehaviorFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.ElopementFlg\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.AccidentFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.InjuryFlg\t\t\t\t!= 1",
                                  "\t\tAND\ttblIncident.IllnessFlg\t\t\t\t!= 1 THEN 1",
                                  "\t\tELSE 0",
                                  "\t\tEND AS UntypedFlg",
                                  "FROM $(vBusinessData).Incident.tblIncident tblIncident",
                                  "INNER JOIN $(vBusinessData).ARM.tblCommunity tblCommunity",
                                  "\t\tON tblCommunity.CommunityNumber = tblIncident.CommunityNumber",
                                  "INNER JOIN $(vBusinessData).ARM.tblCustomer tblCustomer",
                                  "\t\tON tblCustomer.CustomerID = tblIncident.CustomerID",
                                  "INNER JOIN $(vBusinessData).Incident.lu_IncidentType luIncidentType",
                                  "\t\tON luIncidentType.Incident_TypeID = tblIncident.Incident_TypeID",
                                  "INNER JOIN $(vBusinessData).Incident.lu_IncidentStatus luStatus",
                                  "\t\tON luStatus.Incident_StatusID = tblIncident.Incident_StatusID",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncidentDocument lnkIncidentDocument",
                                  "\t\tON lnkIncidentDocument.IncidentID = tblIncident.IncidentID",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeDeath",
                                  "\t\tON lnkIncident_OutcomeDeath.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeDeath.OutcomeSeverityID = 1",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeHospital",
                                  "\t\tON lnkIncident_OutcomeHospital.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeHospital.OutcomeSeverityID = 2",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeUnconscious",
                                  "\t\tON lnkIncident_OutcomeUnconscious.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeUnconscious.OutcomeSeverityID = 3",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeAdverseDrug",
                                  "\t\tON lnkIncident_OutcomeAdverseDrug.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseDrug.OutcomeSeverityID = 4",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeNoMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeNoMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeNoMedicalTreatment.OutcomeSeverityID = 5",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeMedicalTreatment",
                                  "\t\tON lnkIncident_OutcomeMedicalTreatment.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeMedicalTreatment.OutcomeSeverityID = 6",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeFallWithInjury",
                                  "\t\tON lnkIncident_OutcomeFallWithInjury.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFallWithInjury.OutcomeSeverityID = 7",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeFirstAid",
                                  "\t\tON lnkIncident_OutcomeFirstAid.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFirstAid.OutcomeSeverityID = 8",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeAdverseFamily",
                                  "\t\tON lnkIncident_OutcomeAdverseFamily.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeAdverseFamily.OutcomeSeverityID = 9",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeResidentRefused",
                                  "\t\tON lnkIncident_OutcomeResidentRefused.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeResidentRefused.OutcomeSeverityID = 10",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeOther",
                                  "\t\tON lnkIncident_OutcomeOther.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeOther.OutcomeSeverityID = 11",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeEMS",
                                  "\t\tON lnkIncident_OutcomeEMS.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMS.OutcomeSeverityID = 16",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeEMT",
                                  "\t\tON lnkIncident_OutcomeEMT.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeEMT.OutcomeSeverityID = 17",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomeFamilyTransport",
                                  "\t\tON lnkIncident_OutcomeFamilyTransport.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomeFamilyTransport.OutcomeSeverityID = 18",
                                  "LEFT JOIN  $(vBusinessData).Incident.lnkIncident_Outcome lnkIncident_OutcomePending",
                                  "\t\tON lnkIncident_OutcomePending.IncidentID = tblIncident.IncidentID AND lnkIncident_OutcomePending.OutcomeSeverityID = 19",
                                  "WHERE\ttblIncident.ActiveFlg = 1",
                                  "AND\t\tDATEDIFF(DD, IncidentDate, GETDATE()) \u003c= 365",
                                  "ORDER BY IncidentVersion",
                                  "\t\t,IncidentID ASC",
                                  "",
                                  ";",
                                  "store [mstrIncident] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrIncident.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [mstrIncident];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Lease Segment",
        "LoadScriptContent":  [
                                  "///$tab Lease Segment",
                                  "LeaseSegment:",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM $(vInsightsData)Resident.factResidentLeaseSegment;",
                                  "",
                                  "store [LeaseSegment] into [lib://DataShare/QVD Extract\\QVD_Extract_factLeaseSegment.qvd](qvd);",
                                  "",
                                  "Drop Table [LeaseSegment];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Main",
        "LoadScriptContent":  [
                                  "///$tab Main",
                                  "SET ThousandSep=\u0027,\u0027;",
                                  "SET DecimalSep=\u0027.\u0027;",
                                  "SET MoneyThousandSep=\u0027,\u0027;",
                                  "SET MoneyDecimalSep=\u0027.\u0027;",
                                  "SET MoneyFormat=\u0027$#,##0.00;($#,##0.00)\u0027;",
                                  "SET TimeFormat=\u0027hh:mm:ss.mmm\u0027;",
                                  "SET DateFormat=\u0027M/D/YYYY\u0027;",
                                  "SET TimestampFormat=\u0027M/D/YYYY h:mm:ss[.fff] TT\u0027;",
                                  "SET FirstWeekDay=6;",
                                  "SET BrokenWeeks=1;",
                                  "SET ReferenceDay=0;",
                                  "SET FirstMonthOfYear=1;",
                                  "SET CollationLocale=\u0027en-US\u0027;",
                                  "SET CreateSearchIndexOnReload=0;",
                                  "SET MonthNames=\u0027Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec\u0027;",
                                  "SET LongMonthNames=\u0027January;February;March;April;May;June;July;August;September;October;November;December\u0027;",
                                  "SET DayNames=\u0027Mon;Tue;Wed;Thu;Fri;Sat;Sun\u0027;",
                                  "SET LongDayNames=\u0027Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday\u0027;",
                                  "",
                                  "",
                                  "// set vmindate=\u00271/1/2015\u0027;",
                                  "let vmindate=date(Yearstart(Today(),-2));",
                                  "let vmindate2=date(YearStart(Today(),-3)); //FOR INQUIRIES",
                                  "let vmindate3=date(YearStart(Today(),-1));",
                                  "let vmaxdate=date(today()+90);",
                                  "let vmaxdate2=Date(YearEnd(Today())+365);",
                                  "let vToday = Date(Floor(Today()));",
                                  "let vnext60day = Date(Floor(Today()+60));",
                                  "",
                                  "",
                                  "variables:",
                                  "LOAD",
                                  "    vDatabase,",
                                  "    vInsightsData,",
                                  "    vBusinessData,",
                                  "    vUserDirectory,",
                                  "    vURLBase,",
                                  "    vSkipQuality,",
                                  "    vDivReg",
                                  "FROM [lib://DataShare/QVD Transform/QVD_Transform_variables.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "// variables for databases, etc.",
                                  "let vDatabase = Peek(\u0027vDatabase\u0027,0,\u0027variables\u0027);",
                                  "let vInsightsData = Peek(\u0027vInsightsData\u0027,0,\u0027variables\u0027);",
                                  "let vBusinessData = Peek(\u0027vBusinessData\u0027,0,\u0027variables\u0027);",
                                  "let vSkipQuality = Peek(\u0027vSkipQuality\u0027,0,\u0027variables\u0027); //used to skip section of code for customers not using the QMS product",
                                  "",
                                  "drop table variables;",
                                  "",
                                  "// This is our data warehouse connection",
                                  "",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "mstr Customer",
        "LoadScriptContent":  [
                                  "///$tab mstr Customer",
                                  "[mstrCustomer]:",
                                  "",
                                  "LOAD",
                                  "\t*",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT KeyID,",
                                  "\tmstrCustomer.CustomerID,",
                                  "    mstrCustomer.CommunityID,",
                                  "    CommunityNumber,",
                                  "    mstrCustomer.InquiryID,",
                                  "    BillingID,",
                                  "    CustomerAccountTypeID,",
                                  "    CustomerType,",
                                  "    \"Resident\",",
                                  "    Address1,",
                                  "    Address2,",
                                  "    City,",
                                  "    State,",
                                  "    PostalCode,",
                                  "    Country,",
                                  "    Longitude,",
                                  "    Latitude,",
                                  "    StatusID,",
                                  "    ResidentStatus as Status,",
                                  "    Gender,",
                                  "    BirthDT,",
                                  "    CreateDT,",
                                  "    ApplicationURL,",
                                  "    ReplicaDT",
                                  "FROM $(vInsightsData)Master.mstrCustomer",
                                  "Left Join \t(Select CommunityID, InquiryID, CustomerID, CustomerAccountTypeID FROM $(vBusinessData).ARM.tblCustomer) tblCustomer",
                                  "ON\t\t\ttblCustomer.CommunityID = mstrCustomer.CommunityID",
                                  "AND\t\t\ttblCustomer.InquiryID = mstrCustomer.InquiryID",
                                  "AND\t\t\ttblCustomer.CustomerID = mstrCustomer.CustomerID",
                                  "",
                                  "Left Join \t(Select ResidentStatusID, ResidentStatus FROM $(vBusinessData).ARM.luResidentStatus) luResidentStatus",
                                  "ON\t\t\tluResidentStatus.ResidentStatusID = mstrCustomer.StatusID",
                                  "WHERE\t\ttblCustomer.CustomerAccountTypeID=1",
                                  ";",
                                  "",
                                  "store [mstrCustomer] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrCustomer.qvd](qvd);",
                                  "",
                                  "Drop Tables [mstrCustomer];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "mstrB2B",
        "LoadScriptContent":  [
                                  "///$tab mstrB2B",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "[mstrCorporation]:",
                                  "LOAD *;",
                                  "SELECT ",
                                  "*",
                                  "FROM $(vInsightsData)Sales.mstrCorporation;",
                                  "",
                                  "store [mstrCorporation] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrCorporation.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrCorporation];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "mstrContact",
        "LoadScriptContent":  [
                                  "///$tab mstrContact",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "[mstrContact]:",
                                  "LOAD *;",
                                  "SQL SELECT *",
                                  "FROM $(vInsightsData)Sales.mstrContact;",
                                  "",
                                  "store [mstrContact] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrContact.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrContact];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "mstrInquiry",
        "LoadScriptContent":  [
                                  "///$tab mstrInquiry",
                                  "mstrInquiry:",
                                  "LOAD",
                                  "\t*",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT ",
                                  "*",
                                  "FROM $(vInsightsData)Sales.mstrInquiry;",
                                  "",
                                  "store [mstrInquiry] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrInquiry.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrInquiry];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Occupancy",
        "LoadScriptContent":  [
                                  "///$tab Occupancy",
                                  "factUnitOccupancyByMonth:",
                                  "  LOAD ",
                                  "    *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Occupancy.factUnitOccupancyByMonth",
                                  "where EffectiveDT \u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "store [factUnitOccupancyByMonth] into [lib://DataShare/QVD Extract\\QVD_Extract_factUnitOccupancyByMonth.qvd](qvd);",
                                  "",
                                  "Drop Table [factUnitOccupancyByMonth];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Product Inventory",
        "LoadScriptContent":  [
                                  "///$tab Product Inventory",
                                  "[mstrProductInventory]:",
                                  "    LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Pricing.mstrProductInventory",
                                  "Left Join (Select ProductInventoryID as ProductInventoryID2, DailyRate, SemiPrivateRate, isModelRoomFlg FROM $(vBusinessData).ARM.\"vwProductInventory_1\") vwProductInventory",
                                  "ON vwProductInventory.ProductInventoryID2 = mstrProductInventory.ProductInventoryID;",
                                  "",
                                  "Drop Field ProductInventoryID2 from mstrProductInventory;",
                                  "",
                                  "store [mstrProductInventory] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrProductInventory.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrProductInventory];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "QE Descriptive Tables",
        "LoadScriptContent":  [
                                  "///$tab QE Descriptive Tables",
                                  "////All of the Descriptive QE tables that will be used for POC and to grab the current Question Text",
                                  "QEtblQuestion:",
                                  "LOAD QuestionID,",
                                  "    Question;",
                                  "SQL SELECT QuestionID,",
                                  "    Question",
                                  "FROM $(vBusinessData).QMS.tblQuestion;",
                                  "store [QEtblQuestion] into [lib://DataShare/QVD Extract\\QVD_Extract_QEtblQuestion.qvd](qvd);",
                                  "Drop Table [QEtblQuestion];",
                                  "",
                                  "",
                                  "",
                                  "QElnkQuestionToChoiceType:",
                                  "LOAD QuestionID,",
                                  "    ChoiceTypeID;",
                                  "SQL SELECT tblQuestionExtension.QuestionExtensionID,",
                                  "    QuestionID,",
                                  "    SurveyID,",
                                  "    ChoiceTypeID",
                                  "FROM $(vBusinessData).QMS.tblQuestionExtension",
                                  "left join (",
                                  "\tSelect \tQuestionExtensionID,",
                                  "    \t\tChoiceTypeID ",
                                  "\tFROM $(vBusinessData).QMS.lnkChoiceTypeToQuestion) lnkChoiceTypeToQuestion",
                                  "ON lnkChoiceTypeToQuestion.QuestionExtensionID = tblQuestionExtension.QuestionExtensionID",
                                  ";",
                                  "store [QElnkQuestionToChoiceType] into [lib://DataShare/QVD Extract\\QVD_Extract_QElnkQuestionToChoiceType.qvd](qvd);",
                                  "Drop Table [QElnkQuestionToChoiceType];",
                                  "",
                                  "",
                                  "",
                                  "QEluPlanOfCorrectionResponseStatus:",
                                  "LOAD ",
                                  "PlanOfCorrectionResponseStatusID,",
                                  "    Status;",
                                  "//     CreateDT,",
                                  "//     CreateBy,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     ActiveFlg;",
                                  "SQL SELECT PlanOfCorrectionResponseStatusID,",
                                  "    Status",
                                  "//     CreateDT,",
                                  "//     CreateBy,",
                                  "//     ModifyDT,",
                                  "//     ModifyBy,",
                                  "//     ActiveFlg",
                                  "FROM $(vBusinessData).QE.luPlanOfCorrectionResponseStatus;",
                                  "store [QEluPlanOfCorrectionResponseStatus] into [lib://DataShare/QVD Extract\\QVD_Extract_QEluPlanOfCorrectionResponseStatus.qvd](qvd);",
                                  "Drop Table [QEluPlanOfCorrectionResponseStatus];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Reservation",
        "LoadScriptContent":  [
                                  "///$tab Reservation",
                                  "[factReservation]:",
                                  "    LOAD",
                                  "    *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Sales.factReservation;",
                                  "",
                                  "store [factReservation] into [lib://DataShare/QVD Extract\\QVD_Extract_factReservation.qvd](qvd);",
                                  "",
                                  "Drop Table [factReservation];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Resident Care Ancillary",
        "LoadScriptContent":  [
                                  "///$tab Resident Care Ancillary",
                                  "factResidentCareAncillary:",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *,",
                                  "\tRANK ( ) OVER (Partition By CustomerID, SeriesID Order By EffectiveDT desc, CareHistoryID desc) as factResidentCareAncillaryRank",
                                  "FROM $(vInsightsData)Care.factResidentCareAncillary;",
                                  "",
                                  "store [factResidentCareAncillary] into [lib://DataShare/QVD Extract\\QVD_Extract_factResidentCareAncillary.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [factResidentCareAncillary];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Resident Care Primary",
        "LoadScriptContent":  [
                                  "///$tab Resident Care Primary",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "factResidentCarePrimary:",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *,",
                                  "\tRANK ( ) OVER (Partition By CustomerID Order By EffectiveDT desc, CareHistoryID desc) as factResidentCarePrimaryRank",
                                  "FROM $(vInsightsData)Care.factResidentCarePrimary factResidentCarePrimary",
                                  "left join ",
                                  "\t(Select distinct",
                                  "    \t\t CareTypeID as luCareTypeID",
                                  "            ,Code as CareTypeCode",
                                  "\tfrom $(vBusinessData).ARM.luCareType where ActiveFlg = 1) luCareType",
                                  "on\t\tluCareType.luCareTypeID = factResidentCarePrimary.CareTypeID;",
                                  "",
                                  "Drop Field luCareTypeID from factResidentCarePrimary;",
                                  "",
                                  "store [factResidentCarePrimary] into [lib://DataShare/QVD Extract\\QVD_Extract_factResidentCarePrimary.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [factResidentCarePrimary];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Resident Move Out",
        "LoadScriptContent":  [
                                  "///$tab Resident Move Out",
                                  "[factResidentMoveOut]:",
                                  "",
                                  "LOAD",
                                  "\t*",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "    select",
                                  "    *",
                                  "FROM $(vInsightsData)Resident.factResidentMoveOut;",
                                  "",
                                  "store [factResidentMoveOut] into [lib://DataShare/QVD Extract\\QVD_Extract_factResidentMoveOut.qvd](qvd);",
                                  "",
                                  "Drop Table [factResidentMoveOut];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "ResidentRoom",
        "LoadScriptContent":  [
                                  "///$tab ResidentRoom",
                                  "[factResidentRoom]:",
                                  "LOAD ",
                                  "ResidentRoomID, ",
                                  "\tCommunityNumber, ",
                                  "\tProductInventoryID, ",
                                  "\tEffectiveDt, ",
                                  "\tCustomerID, ",
                                  "\tRoomNumber, ",
                                  "\tPayorID, ",
                                  "\tPayor, ",
                                  "\tRate, ",
                                  "\tEventType, ",
                                  "\tIsPhysicalPresentFlg,",
                                  "\tReplicaDT,",
                                  "    factResidentRoomRank",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "SELECT *,",
                                  "CASE WHEN EffectiveDT\u003c= GetDate() THEN RANK() OVER (PARTITION BY CommunityNumber, CustomerID, CASE WHEN EffectiveDT\u003c= GetDate() THEN 1 ELSE 0 END",
                                  "\t\t\t\tORDER BY EffectiveDT Desc) ELSE 0 END as factResidentRoomRank",
                                  "FROM $(vInsightsData)Resident.factResidentRoom;",
                                  "",
                                  "store [factResidentRoom] into [lib://DataShare/QVD Extract\\QVD_Extract_factResidentRoom.qvd](qvd);",
                                  "",
                                  "Drop Table [factResidentRoom];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Revenue",
        "LoadScriptContent":  [
                                  "///$tab Revenue",
                                  "factRevenueByMoveIn:",
                                  "",
                                  "LOAD ",
                                  "*",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "Select",
                                  "*",
                                  "FROM $(vInsightsData)Revenue.factBonusRevenue factBonusRevenue",
                                  "left join ",
                                  "\t(Select distinct ",
                                  "    \t\t CustomerID as CustomerIDMoveIn",
                                  "            ,MoveInDT as FinancialMoveInDT",
                                  "            ,PhysicalMoveInDT",
                                  "            ,RANK() OVER( Partition By CustomerID, cast(MoveInDT as date) order by CreateDT desc, ResidentMoveInID desc) as Ranking",
                                  "\tfrom $(vBusinessData).ARM.tblResidentMoveIn where ActiveFlg=1) tblResidentMI",
                                  "on \t\ttblResidentMI.CustomerIDMoveIn = factBonusRevenue.CustomerID ",
                                  "\tand cast(tblResidentMI.FinancialMoveInDT as date) = cast(factBonusRevenue.MoveInDt as date) ",
                                  "    and Ranking=1",
                                  "",
                                  "left join ",
                                  "\t(Select distinct",
                                  "    \t\t CareType as CareTypeName",
                                  "            ,Code as CareTypeCode",
                                  "\tfrom $(vBusinessData).ARM.luCareType where ActiveFlg = 1) luCareType",
                                  "on\t\tluCareType.CareTypeName = factBonusRevenue.CareType",
                                  "",
                                  "where factBonusRevenue.moveindt\u003e=\u0027$(vmindate2)\u0027;",
                                  "",
                                  "Drop Fields CustomerIDMoveIn, FinancialMoveInDT, Ranking, CareTypeName from factRevenueByMoveIn;",
                                  "",
                                  "store [factRevenueByMoveIn] into [lib://DataShare/QVD Extract\\QVD_Extract_factRevenueByMoveIn.qvd](qvd);",
                                  "",
                                  "Drop Table [factRevenueByMoveIn];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Scheduled Move Out",
        "LoadScriptContent":  [
                                  "///$tab Scheduled Move Out",
                                  "factResidentMoveOutSchedule:",
                                  "",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber)",
                                  ";",
                                  "SQL SELECT *",
                                  "FROM $(vInsightsData)Resident.factResidentMoveOutSchedule",
                                  "where MoveOutDT\u003e=\u0027$(vToday)\u0027 and MoveOutDT\u003c=\u0027$(vnext60day)\u0027;",
                                  "",
                                  "store [factResidentMoveOutSchedule] into [lib://DataShare/QVD Extract\\QVD_Extract_factResidentMoveOutSchedule.qvd](qvd);",
                                  "",
                                  "Drop Table [factResidentMoveOutSchedule];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Score Card",
        "LoadScriptContent":  [
                                  "///$tab Score Card",
                                  "factScoreCard:",
                                  "",
                                  "LOAD ",
                                  "*",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "",
                                  "SQL SELECT ",
                                  "*",
                                  "FROM $(vInsightsData)Sales.mstrScoreCard;",
                                  "",
                                  "store [factScoreCard] into [lib://DataShare/QVD Extract\\QVD_Extract_factScoreCard.qvd](qvd);",
                                  "",
                                  "Drop Table [factScoreCard];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "STL",
        "LoadScriptContent":  [
                                  "///$tab STL",
                                  "///Where ReturnDT is null because we only want current outstanding STL.",
                                  "mstrSTL:",
                                  "LOAD *",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM \t\t$(vInsightsData)Resident.factShortTermLeave",
                                  "Left Join \t(Select distinct ",
                                  "\t\t\t\t\tShortTermLeaveID as tblShortTermLeaveID",
                                  "\t\t\t\t\t,ExpectedReturnDT",
                                  "\t\t\tfrom \t$(vBusinessData).ARM.tblShortTermLeave) tblShortTermLeave",
                                  "ON\t\t\ttblShortTermLeave.tblShortTermLeaveID = factShortTermLeave.ShortTermLeaveID",
                                  "Where ReturnDT is null;",
                                  "",
                                  "drop field tblShortTermLeaveID from mstrSTL;",
                                  "",
                                  "store [mstrSTL] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrSTL.qvd](qvd);",
                                  "                          ",
                                  "Drop Table [mstrSTL];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "tab_order.txt",
        "LoadScriptContent":  [
                                  "variables%tab_file_order_divider%Main%tab_file_order_divider%dimDate%tab_file_order_divider%Communities%tab_file_order_divider%factInquiryByReferral%tab_file_order_divider%mstrContact%tab_file_order_divider%mstrB2B%tab_file_order_divider%mstrInquiry%tab_file_order_divider%mstr Customer%tab_file_order_divider%Reservation%tab_file_order_divider%Auto Apply Move Ins%tab_file_order_divider%tblResidentAssessment by Community%tab_file_order_divider%Occupancy%tab_file_order_divider%Revenue%tab_file_order_divider%Resident Move Out%tab_file_order_divider%Business Data tblReservation%tab_file_order_divider%Product Inventory%tab_file_order_divider%Score Card%tab_file_order_divider%STL%tab_file_order_divider%Tour Activity%tab_file_order_divider%ResidentRoom%tab_file_order_divider%1.1 eLead Creation Journal Activity%tab_file_order_divider%1.2 Journal Activity%tab_file_order_divider%B2B Activity%tab_file_order_divider%Resident Care Primary%tab_file_order_divider%Resident Care Ancillary%tab_file_order_divider%Scheduled Move Out%tab_file_order_divider%User%tab_file_order_divider%Community Trip Report%tab_file_order_divider%Community Trip Report Detail%tab_file_order_divider%Community Trip Report POC%tab_file_order_divider%QE Descriptive Tables%tab_file_order_divider%Community Review%tab_file_order_divider%Community Review Score%tab_file_order_divider%Community Review Detail%tab_file_order_divider%Community Review POC%tab_file_order_divider%Incident%tab_file_order_divider%Lease Segment%tab_file_order_divider%Drop mstrCommunity"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "tblResidentAssessment by Community",
        "LoadScriptContent":  [
                                  "///$tab tblResidentAssessment by Community",
                                  "tblResidentAssessment:",
                                  "LOAD CustomerID,",
                                  "\tCommunityID,",
                                  "    Date(Floor(LastAssessedDate)) as LastAssessedDate,",
                                  "    ResidentAssessmentCount,",
                                  "    RecentAssessmentID",
                                  "Where Exists(CommunityIDInclude, CommunityID);",
                                  "SQL SELECT CustomerID",
                                  "\t\t,CommunityID",
                                  "        ,Max(AssessmentDT) as LastAssessedDate",
                                  "        ,Count(Distinct ResidentAssessmentID) as ResidentAssessmentCount",
                                  "        ,Max(ResidentAssessmentID) as RecentAssessmentID",
                                  "FROM $(vBusinessData).ACM.tblResidentAssessment",
                                  "Where ActiveFlg=1",
                                  "Group by CustomerID, CommunityID;",
                                  "",
                                  "////Joining to get Community Number because we join on that in most of our transformation tables.",
                                  "Left Join (tblResidentAssessment)",
                                  "LOAD",
                                  "    CommunityID,",
                                  "    CommunityNumber",
                                  "FROM [lib://DataShare/QVD Extract\\QVD_Extract_mstrCommunity.qvd]",
                                  "(qvd);",
                                  "",
                                  "",
                                  "store [tblResidentAssessment] into [lib://DataShare/QVD Extract\\QVD_Extract_ResidentAssessmentByCustomerCommunity.qvd](qvd);",
                                  "",
                                  "Drop Table [tblResidentAssessment];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "Tour Activity",
        "LoadScriptContent":  [
                                  "///$tab Tour Activity",
                                  "LIB CONNECT TO \u0027$(vDatabase)\u0027;",
                                  "",
                                  "factInquiryTourActivity:",
                                  "LOAD*",
                                  "Where Exists(CommunityInclude, CommunityNumber);",
                                  "SQL SELECT *",
                                  "FROM $(vInsightsData)Sales.factInquiryTourActivity;",
                                  "",
                                  "store [factInquiryTourActivity] into [lib://DataShare/QVD Extract\\QVD_Extract_factInquiryTourActivity.qvd](qvd);",
                                  "",
                                  "Drop Table [factInquiryTourActivity];"
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "User",
        "LoadScriptContent":  [
                                  "///$tab User",
                                  "[mstrUser]:",
                                  "",
                                  "LOAD *",
                                  ";",
                                  "",
                                  "SELECT *",
                                  "FROM $(vInsightsData)Master.mstrUser;",
                                  "",
                                  "store [mstrUser] into [lib://DataShare/QVD Extract\\QVD_Extract_mstrUser.qvd](qvd);",
                                  "",
                                  "Drop Table [mstrUser];",
                                  "// USING FOR JOBCODE IN COMMUNITYREVIEW TRANSFORMATION TABLES AND IN THE VP SALES INCENTIVIZER TO DETERMINE WHICH COMM THEY HAVE. REMOVED COMM RESTRICTIONS FOR THIS REASON."
                              ]
    },
    {
        "App":  "Development-Extraction",
        "Section":  "variables",
        "LoadScriptContent":  [
                                  "///$tab variables",
                                  "variables:",
                                  "LOAD",
                                  "    vDatabase,",
                                  "    vInsightsData,",
                                  "    vBusinessData,",
                                  "    vUserDirectory,",
                                  "    vURLBase,",
                                  "    vSkipQuality,",
                                  "    vDivReg",
                                  "FROM [lib://DataShare/.xls Library/variables.xlsx]",
                                  "(ooxml, embedded labels, table is Sheet1);",
                                  "",
                                  "store variables into [lib://DataShare/QVD Transform/QVD_Transform_variables.qvd]",
                                  "(qvd);",
                                  "",
                                  "drop table variables;"
                              ]
    }
]
